{"jql_About":{"description":"<div>This module (<b>JQ</b>uery<b>L</b>ike) was inspired by the idea that some JQuery was too good <a target=\"_blank\" href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">to ditch</a>.</div>\n\n<div>It is developed in a modular fashion and uses plain ES20xx, so not really (or really not, take your pick) suitable for older browsers.</div>\n\n<div>The module originally was written in 2021. In 2023 it was rewritten in a <i>classfree object oriented</i> fashion, inspired by a <a target=\"_blank\" href=\"https://youtu.be/XFTOG895C7c?t=2562\">Douglas Crockford presentation</a>. This means you will very seldom find <code>this</code> in the code.</div>\n\n<div>It is <i>not</i> a replacement for <a target=\"_blank\" href=\"https://github.com/jquery/jquery\">JQuery</a>. Consider it a subset of JQuery <i>alike</i> methods to <i>retrieve</i>, <i>create</i>, <i>modify</i> or <i>manipulate</i> (collections of) HTML elements in your HTML document.</div>\n\n<div>This document is completely built using JQL. Another example/demo-version can be found @<a href=\"//kooiinc.github.io/JQL/TestNDemo/\" target=\"_blank\">kooiinc.github.io/JQL/TestNDemo</a>.</div>\n\n<div>In the following you'll find documentation for usage of the module, divided into 4 chapters:</div>\n\n<ul>\n  <li>\n    <div data-action=\"jump2Nav\" data-jumpgroup=\"static\" class=\"linkLike\">STATIC</div>:\n      JQL static module methods;</li>\n  <li>\n   <div data-action=\"jump2Nav\" data-jumpgroup=\"instance\" class=\"linkLike\">INSTANCE</div>: \n      all methods applicable to a JQL <i>instance</i>;</li>\n  <li>\n     <div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">POPUP</div>:\n       JQL includes a module to create (modal) popup messages;</li>\n  <li>\n     <div data-action=\"jump2Nav\" data-jumpgroup=\"debuglog\" class=\"linkLike\">DEBUGLOG</div>: \n         JQL includes a module to extensively log everything it does (you do with it).</li>\n</ul>\n\n<h2>JQL instance creation/retrieval</h2>\n\n<div class=\"note\"><b>Note</b>: \n  For this document JQL is imported as <code><b>$</b></code> \n  (so (the result of) <code>import $ from \"[location of JQL]\"</code>).\n  Most examples in the following use this.\n</div>\n\n<div>\n  JQL provides a single Function/Object to create and/or retrieve \n  HTML elements and convert the result to a JQL instance. \n  A JQL instance contains a collection of the created or retrieved HTML element(s). \n  These element(s) can be manipulated extensively.\n</div>\n\n<div>Element creation or retrieval using the imported JQL-function always results in a JQL instance. <br>The syntax is (JQL imported as <code>$</code>)</div>\n\n<ul>\n  <li>\n    <div>\n      <code>$(html: string | string[][, root: HTMLElement | JQL instance, position: string])</code>\n    </div>\n    <div>Creates element(s) from a single HTML string or an Array of HTML strings. \n     Using an Array of HTML strings creates the elements subsequently. \n     The created element(s) is/are appended to <code>root</code> (default <code>document.body</code>) \n     at <code>position</code> (default: as the last element of <code>root</code>).\n    </div>\n  </li>\n  <li>\n    <div><code>$(cssSelector: string[, root: HTMLElement | JQL instance])</code></div>\n    <div>Retrieves all Elements from the document using <code>cssSelector</code> \n     (e.g. <code>`div.example, h3#someId`</code>) \n     within <code>root</code> (default <code>document</code>).</div>\n   </li>\n  <li>\n    <div><code>$(element: Node | Node[])</code></div>\n    <div>Takes the given <code>element</code>(s) and creates a \n     JQL instance from it/them.</div>\n  </li>\n</ul>\n\n<div>\n  Most examples in this document can be run (use the [Try it] button). If elements \n  are created/modified in an example, the result is shown within the item at hand \n  (and removed after a few seconds) or in a popup. The examples deliberately use \n  all kinds of JQL methods, to familiarize you with them.</div>\n\n<div><a href=\"//github.com/KooiInc/JQL\"><img src=\"//github.githubassets.com/favicons/favicon.png\" class=\"gitLink\">source code @Github</a></div>"},"instance_text":{"description":"<div>Set the textcontent of all elements of the instance element collection.</div>\n\n<div>When <code>textValue</code> is empty, returns the current textcontent of the <i>first element</i> of the instance element collection.\nOtherwise returns the JQL Instance.</div>","params":[{"textValue":"String"},{"append":"Boolean, default false"}],"returnValue":"String | JQL Instance"},"instance_each":{"description":"<div>Loops through every element of the instance collection and applies the given callback function to it.</div>\n\n<div>The signature of the callback function is <code>(element, [i]) => {...}</code>. Elements that are not <code>HTMLElement</code> (e.g. <code>Comment</code> or text nodes) are <i>not</i> processed.</div>\n\n<div>Click the [Try it] button twice and watch the method name headers for a demo.</div>\n\n<example>##EXAMPLECODE@eachEx##</example>","params":[{"cb":"Function. The lambda function to appy to every element of the collection."}],"returnValue":"JQL Instance"},"instance_remove":{"description":"<div>Removes every element of the instance element collection, <i>or</i>, when <code>selector</code> is present, removes every child element from of the instance element collection for which the selector applies.</div>\n\n<example>\n$(`p`).remove(); // => all &lt;p> are removed from the document\n$(`p`).remove(\".toBeRemoved\"); // => all &lt;p.toBeRemoved> are removed from the document\n$(`p`).remove(\":not(.keepMe)\"); // => all &lt;p> except \"&lt;p.keepMe>\" are removed from the document\n</example>","params":[{"selector":"string. A (valid) css selector string, e.g. <code>#someDiv.someClass</code>"}],"returnValue":"None"},"instance_computedStyle":{"description":"<div>Retrieves the computed style for the given <code>property</code> the first element of the instance collection.</div>\n\n<div>See also <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">Style.computed</div>.</div>\n\n<example>##EXAMPLECODE@computedStyleEx##</example>","params":[{"property":"string. Style property string, e.g. <code>width</code>, <code>display</code>"}],"returnValue":"String | undefined"},"instance_isEmpty":{"description":"<div>returns: <code>true</code> if the JQL Instance collection is empty, otherwise <code>false</code>.</div>\n\n<div class=\"note\"><b>Note</b>: alternatively you can use <code>[JQL instance].is.empty</code>.</div>\n\n<example>##EXAMPLECODE@isEmptyEx##</example>","params":[],"returnValue":"Boolean"},"instance_getData":{"description":"<div>Retrieve the value of a data-attribute. When <code>valueWhenFalsy</code> is present, it will return that value if the data-attribute does not exist.</div>\n\n<div><b>See also</b>: <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_data\">data</div>.</div>\n\n<example>##EXAMPLECODE@getDataEx##</example>","params":[{"dataAttribute":"string. The data-attribute to query, e.q. <code>width</code>"},{"valueWhenFalsy":"Any. The value to return when the data-attribute was not found."}],"returnValue":"Any | undefined"},"instance_is":{"description":"<div><code>[JQL instance].is</code> is a <i>static property</i>. To retrieve a value of it use <code>[JQL instance].is[key]</code>. If the JQL instance element collection is empty, the return values of all properties except <code>empty</code> will be \"n/a\".</div>\n\n<div><code>[JQL instance].is</code> keys: </div>\n\n<ul><li><code>writable</code>: is the first element of the JQL instance collection writable?</li>\n<li><code>visible</code>: is the first element of the JQL instance collection visible in the DOM?</li>\n<li><code>disabled</code>: is the first element of the JQL instance collection disabled?</li>\n<li><code>open</code>: is the first element of the JQL instance collection open (<code>&lt;details></code> or <code>&lt;dialog></code>)</li>\n<li><code>modal</code>: is the first element of the JQL instance collection modal (<code>&lt;dialog></code>)</li>\n<li><code>empty</code>: is the JQL instance element collection empty?</li>\n<li><code>virtual</code>: does the JQL instance only exist in memory?</li></ul>\n\n<example>##EXAMPLECODE@isEx##</example>\n","params":[],"returnValue":"Object&lt;string, Boolean | string>"},"instance_hasClass":{"description":"<div>For (the list of) className(s) determine if the first (root) element of the JQL Instance element collection contains (one of) the <code>classNames</code>.</div>\n\n<example>##EXAMPLECODE@hasClassEx##</example>","params":[{"...classNames":"string[]"}],"returnValue":"Boolean"},"instance_replace":{"description":"<div>Replace [oldChild] (a DOM Element, css selector or a JQL instance) within the first (root) element of the instance element collection with a new JQL Instance</div>\n\n<example>##EXAMPLECODE@replaceEx##</example>","params":[{"oldChild":"JQL instance | HTMLElement | String. If String, a (valid) css selector. "},{"newChild":"JQL Instance"}],"returnValue":"JQL Instance"},"instance_toDOM":{"description":"<div>\n  Add a 'virtual' element (an element created in memory, using the <code> \n  [instance].virtual</code> or the <code>[JQL constructor][tagName]</code> method) \n  to the DOM. \n</div>\n\n<div>\n  Defaults to adding the element to the body, but <code>root</code> may be any element (if \n  the DOM allows it). See <div class=\"linkLike\" data-jumpkey=\"static_virtual\" data- \n action=\"jump2Nav\">virtual</div> documentation for an example.\n</div>","params":[{"root":"HTMLElement. Default <code>document.body</code>"},{"position":"String. One of \"beforeend\", \"afterbegin\", \"beforebegin\", \"afterend\". Default: \"beforeend\""}],"returnValue":"JQL Instance"},"instance_first":{"description":"<div>Returns the first element of the JQL element collection or a new JQL Instance derived from the first element of the JQL Instance element collection. When <code>asJQLInstance</code> is true, the element is returned as a new JQL Instance (equivalent to <div data-action=\"jump2Nav\" data-jumpkey=\"instance_first$\" class=\"linkLike\">first$</div>), otherwise a <code>DOM Node</code>.</div>\n\n<example>##EXAMPLECODE@firstEx##</example>","params":[{"asJQLInstance":"Boolean. Default false"}],"returnValue":"HTMLElement | JQL Instance"},"instance_append":{"description":"<div>Appends one ore more elements to each element of the JQL Instance collection (for real, in the DOM tree).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul>\n  <li>when the JQL Instance to append to is empty, nothing will happen.</li>\n  <li>If (one of) elems2Append consists of html string(s), they should contain valid html \n  (e.g., no flow content in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>). \n  The HTML is always sanitized.</li>\n  <li>Already existing (in DOM) <code>elems2Append</code> are <i>moved</i> to the JQL instance when the JQL instance to append to has one element in \n    its collection, <b>but</b></li>\n  <li><code>elems2Append</code> (if JQL instance or Node) are <i>cloned and stripped of their id</i> when the JQL instance collection to append to contains more then one element.</li>\n</ul>\n\n<example>##EXAMPLECODE@appendEx##</example>","params":[{"...elems2Append":"string[] | HTMLElement[]| Text[] | Comment[] | JQL instance[]"}],"returnValue":"JQL Instance"},"instance_appendTo":{"description":"<div>Appends the collection of one JQL instance to another instance, so injects the element(s) of [JQl instance element collection] to each element of <code>appendTo</code> (for real, injected and visible in the DOM tree).</div>\n\n<div class=\"note\"><b>Note</b>: this returns <code>appendTo</code> (so, the <i>parent</i> JQL Instance).</div>\n\n<example>##EXAMPLECODE@appendToEx##</example>","params":[{"appendTo":"JQL instance"}],"returnValue":"JQL Instance"},"static_delegate":{"description":"<div>Create targeted event listeners/handlers. </div>\n\n<div class=\"note\"><b>Note</b>: <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/DOM_events\">non bubbling events</a> are delegated using <code>{capture: true}</code>. This concerns the following events:</div>\n\n<ul>\n  <li><code>load</code></li>\n  <li><code>unload</code></li>\n  <li><code>scroll</code></li>\n  <li><code>focus</code></li>\n  <li><code>blur</code></li>\n  <li><code>DOMNodeRemovedFromDocument</code></li>\n  <li><code>DOMNodeInsertedIntoDocument</code></li>\n  <li><code>loadstart</code></li>\n  <li><code>progress</code></li>\n  <li><code>error</code></li>\n  <li><code>abort</code></li>\n  <li><code>load</code></li>\n  <li><code>loadend</code></li>\n  <li><code>pointerenter</code></li>\n  <li><code>pointerleave</code></li>\n  <li><code>readystatechange</code></li>\n</ul>\n\n<div>The example creates a click listener/handler for the header of this chapter (\"[JQL].delegate\"). The handler changes the color of all headers (by changing the value of the corresponding variable within <code>:root</code>). It is a specific click handler for this header only (but all headers are affected: so click on the header '[JQL].delegate' changes the color of all headers, clicking on another header handles\nthe already defined click handler (scroll to it)).</div>\n\n<example>##EXAMPLECODE@staticDelegateEx##</example>","params":[{"type":"string. Event type (e.g. <code>click</code>) to listen for"},{"origin":"string. Optional selector to identify the element to assign listener to (e.g. <code>#someId</code>)"},{"...handlers":"One or more lambda functions"}],"returnValue":"JQL Instance"},"instance_dimensions":{"description":"<div>Retrieve the actual dimensions of the first (root) element in the instance element collection. It actually returns the result of <code>getBoundingClientRect</code>, see <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">MDN</a> for interpretation of the values.</div>\n\n<div class=\"note\"><b>Note</b>: dimensions is a <i>property</i>, not a function. Usage <code>[JQL instance].dimensions</code>.</div>\n\n<example>##EXAMPLECODE@dimEx##</example>","params":[],"returnValue":"(Object) <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMRect\">DOMRect</a> | undefined"},"instance_duplicate":{"description":"<div>Duplicate a JQL instance to memory (default) or to DOM (append to <code>root</code>).</div>\n\n<div>The elements within the instance are cloned, their id's are removed and the resulting NodeList is converted to a new JQL Instance.</div>\n\n<div class=\"note\"><b>Note</b>: check the cloned nodes classList/properties/attributes: you may want to change them before injecting to DOM.</div>\n\n<example>##EXAMPLECODE@duplicateEx##</example>","params":[{"toDOM":"Boolean. Default <code>false</code>"},{"root":"Node. Default document.body"}],"returnValue":"JQL Instance"},"instance_css":{"description":"<div>Style each element of the element collection of the JQL Instance <i>within</i> the custom style sheet (<code>&lt;style id=\"JQLStylesheet\"></code>), using an intermediate (generated, random) or given class name. Preferably use key-value pairs, even when assigning a single property.</div>\n\n<div class=\"note\"><b>Notes</b></div>\n<ul>\n<li>the intermediate className starts with <code>\"jQLClass-\"</code>. There will be one intermediate class name per element. Subsequent .css calls will modify the rule for the generated class name.</li>\n<li>using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code></li>\n</ul>\n\n<example>##EXAMPLECODE@cssEx##</example>\n\n<div><div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">See also [JQL instance].Style.inSheet</div><div>","params":[{"keyOrKvPairs":"Object<string, string> | string. If you want to use a className for the css, add a <code>className</code> property to the Object."},{"value":"string | undefined. If <code>value</code> is a string, <code>keyOrKvPairs</code> must be a string too."}],"returnValue":"JQL Instance"},"instance_empty":{"description":"<div>Remove contents for all elements of the JQL instance element collection.</div>\n\n<div>Equivalent to <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_clear\">clear</div></div>","params":[],"returnValue":"JQL Instance. An instance with elements without any content."},"instance_clear":{"description":"<div>Remove contents for all elements of the JQL instance element collection.</div>\n\n<example>##EXAMPLECODE@clearEx##</example>","params":[],"returnValue":"JQL Instance. An empty instance."},"instance_hide":{"description":"<div>Hide each element of the element collection of the JQL instance.</div>\n\n<div class=\"note\"><b>Note</b>: hiding changes the css <code>display</code> property to \"none\". It may be more useful to use a <code>css class</code> for this.</div>\n\n<example>##EXAMPLECODE@showHideEx##</example>","params":[],"returnValue":"JQL instance"},"instance_removeAttribute":{"description":"<div>Remove some attribute from each element of the element collection of the JQL Instance.</div>","params":[{"attrName":"string."}],"returnValue":"JQL Instance"},"instance_removeClass":{"description":"<div>Remove <code>classNames</code> from for each element of the element collection of the JQL Instance. Class names can be one or more strings.</div>\n\n<example>##EXAMPLECODE@removeClassEx##</example>","params":[{"...classNames":"string[]. One or more classNames"}],"returnValue":"JQL Instance"},"instance_replaceClass":{"description":"<div>Swap <code>className</code> with <code>nwClassnames</code> for each element of the element collection of the JQL Instance. Enables replacing a class name with one or more class name(s)</div>\n\n<example>##EXAMPLECODE@replaceClassEx##</example>","params":[{"className":"string. the className to replace  "},{"...nwClassNames":"string[]. The class name(s) to replace <code>className</code> with."}],"returnValue":"JQL Instance"},"instance_find":{"description":"<div>Find one or more elements within the first (root) element of the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>).</div>\n\n<example>##EXAMPLECODE@findEx##</example>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"NodeList | empty Array"},"instance_find$":{"description":"<div>Find one or more elements within the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>)  starting from the root element of the collection, and return a new JQL Instance from it's result</div>\n\n<example>##EXAMPLECODE@find$Ex##</example>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"JQL Instance"},"instance_first$":{"description":"<div>Alias for <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_single\">[JQL instance].single</div>.</div>","params":[{"indexOrSelector":"Number | string. If string, a (valid) css selector."}],"returnValue":"JQL Instance"},"instance_on":{"description":"<div>Add listener and handler lambda('s) for the JQL Instance root element.</div>\n\n<div>The lambda signature is <code>[handler function](event, JQLInstance)</code>.</div>\n\n<div>See <div data-action=\"jump2Nav\" data-jumpkey=\"instance_toggleClass\" class=\"linkLike\">the toggleClass documentation</div> for examplary usage.</div>","params":[{"type":"string. The event type (e.g. 'click', `keyup`)"},{"...callback":"Function[]. One or more handler functions (lambda's)"}],"returnValue":"JQL Instance"},"instance_outerHtml":{"description":"<div>Retrieves the complete html for the first (root) element of the JQL Instance.</div>\n\n<div class=\"note\"><b>Note</b>: <code>.outerHtml</code> is a <i><b>property</b></i> (not a method). \n It is also possible to use the <code>HTML</code> for this: <code>[instance].HTML.get(true)</code>.\n See: <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_HTML\">[JQL instance].HTML</div>\n</div>\n\n<example>##EXAMPLECODE@outerHTMLEx##</example>","params":[],"returnValue":"string"},"instance_parent":{"description":"<div>Get the direct parentNode of the first (root) element of the JQL Instance (as new JQL Instance).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul><li><code>.parent</code> is a <i>property</i> (not a method)</li>\n<li>In (the unlikely) case there is no parent, <code>.parent</code> returns the original JQL instance.</li></ul>","params":[],"returnValue":"JQL Instance"},"instance_html":{"description":"<div>Get (inner-) html of the first (root) element in the collection of the JQL instance <i>or</i> set html for each element of the collection.</div>\n\n<div>Overwrites current html of the elements, or appends (<code>append</code>: true) the value to it.</div>\n\n<div class=\"note\"><b>Note</b>: <code>htmlValue</code> is always sanitized.</div>\n\n<example>##EXAMPLECODE@htmlForEx##</example>","params":[{"htmlValue":"string. (valid) HTML string"},{"append":"Boolean. Default false"}],"returnValue":"string | JQL Instance"},"instance_htmlFor":{"description":"<div>\n  Sets/adds/removes html for one or more elements \n  (identified with a <code>forQuery</code>) within the element \n  collection of the JQL Instance.\n</div>\n\n<div class=\"note\"<b>Notes</b>:</div>\n<ul><li>html from <code>htmlString</code> is always sanitized.</li>\n<li>if <code>htmlString</code> is empty, the element content is removed.</li></ul>\n\n<example>##EXAMPLECODE@htmlForEx##</example>\n","params":[{"forQuery":"string.  A (valid) css selector."},{"htmlString":"string. (valid) HTML string."},{"append":"Boolean. Default false"}],"returnValue":"JQL Instance"},"instance_prepend":{"description":"<div>Injects one or more elements at the start of each element of the collection of a JQL Instance.</div>\n\n<div>The syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_append\">append</div>.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul>\n  <li>When (one of) <code>elems2Prepend</code> is a collection of elements (e.g. retrieved from <code>$(`.example`)</code>), the elements from the collection will be prepended in reversed order.\n  <li>When the JQL Instance to append to is empty, nothing will happen.</li>\n  <li>If (one of) elems2Prepend consists of html string(s), they should contain valid html \n    (e.g., no flow content in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>). \n    The HTML is always sanitized.</li>\n  <li>When (one of) <code>elems2Prepend</code>, a textNode is prepended.</li>\n  <li>Already existing (in DOM) <code>elems2Prepend</code> are <i>moved</i> to the JQL instance when the JQL instance to prepend to has one element in \n    its collection, <b>but</b></li>\n  <li><code>elems2Prepend</code> (if JQL instance or Node) are <i>cloned and stripped of their id</i> \n    when the JQL instance collection to append to contains more then one element.</li>\n</ul>\n\n<example>##EXAMPLECODE@prependEx##</example>","params":[{"...elems2Prepend":"string | HTMLElement | Text | Comment | JQL Instance (one or more)"}],"returnValue":"JQL Instance"},"instance_prop":{"description":"<div>Set one or more properties (e.g. <code>title</code> or <code>disabled</code>) value for each element of the JQL Instance element collection. Or, without <code>[value]</code> retrieve the value of [property] of the first (root) element from the JQL Instance collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul>\n  <li>Properties are validated (so, e.g. no <code>onclick</code> etc. - see example).</li>\n  <li>When the property is <code>id</code>, the id for the first element of the JQL instance collection will be set (duplicate id's are not allowed in html).</li>\n  <li>See all information on properties and attributes @<a target=\"_blank\" href=\"https://javascript.info/dom-attributes-and-properties\">javascript.info</a></li>\n</ul>\n\n<example>##EXAMPLECODE@propEx##</example>","params":[{"nameOrProperties":"string (e.g. <code>title</code>) or Object&lt;string, any>"},{"value":"string | undefined."}],"returnValue":"string | JQL Instance"},"instance_attr":{"description":"<div><b>Get</b> (<code>keyOrObj</code> string, <code>[value]</code> empty) attribute for the root element of the JQL Instance  or <b>set</b> attributes for the first (root) element of the JQL Instance element collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div> \n<ul>\n  <li>\n    to set <code>data-attribute</code> or <code>style</code>, use <code>{[data/style]: \n    {[key]: [value], ...}</code> (see example)\n  </li> \n  <li>\n    To set multiple <code>class</code>-names, use a comma or space separated \n    string of class names \n    <br>(e.g. <code>[instance].attr({class: `class1, class2, ... `})</code>)\n    <div><b class=\"red\">Additional note</b>: setting <code>class</code>\n      using <code>[JQL instance].attr</code> will <i>replace</i> \n      the existing <code>class</code> attribute.\n      Use\n      <div class=\"linkLike\" data-action=\"jump2Nav\"\n         data-jumpkey=\"instance_addClass\">[JQL instance].addClass</div> \n      to <i>add</i> classes to an Element.</div>\n   </li>\n   <li>\n     All attributes are validated (so, e.g. no <code>onclick</code> etc.)\n   </li>\n   <li>\n      Setting an attribute value ([keyOrObj] returns the JQL instance.\n    </li>\n   <li>\n     See all information on attributes and properties @<a target=\"_blank\" \n       href=\"https://javascript.info/dom-attributes-and-properties\">javascript.info</a>\n    </li>\n</ul>\n<div>\n\n<example>##EXAMPLECODE@attrEx##</example>","params":[{"keyOrObj":"string | Object<string, string>"},{"value":"string | Object<string, string> | undefined"}],"returnValue":"string | JQL instance"},"instance_addClass":{"description":"<div>Add [classNames] to each element of the element collection of the JQL instance. <code>...classNames</code> Can be one or more strings.</div>\n\n<example>##EXAMPLECODE@addClassEx##</example>\n","params":[{"...classNames":"string[]"}],"returnValue":"Object&lt;key, Function>"},"instance_About":{"description":"<div>All methods applicable for an <i>instance</i> of JQL.</div>\n\n<div>An instance of JQL is anything created with the imported JQL constructor (here <code>$</code>). Every instance is recognizable with a boolean property <code>isJQL</code>.</div>\n\n<example>\n// in html use <script type=\"module\">...</script>\nimport $ from \"//kooiinc.github.io/JQL/Bundle/jql.min.js\"; // or any location you downloaded the JQL library to\n</example>\n\n<div>As said, JQL can be used to retrieve, create, modify or manipulate (collections of) HTML elements.</div>\n<div>The syntax <code>[imported JQL constructor](input[, root, position])</code>:</div>\n\n<ul>\n<li><code>input</code>: A (n Array of) HTML string(s), HTMLElement, JQL instance or a (one, valid) css selector\n<br><b>Notes</b>:\n  <ul>\n   <li>When using an Array, its elements must be of equal types (so an Array of <i>either</i> Nodes (including text nodes), \n    <i>or</i> HTML strings, <i>or</i> JQL instances).</li>\n  <li>For creating Text Nodes you can use either <code>$(\"&lt;!text>some text\")</code> or <code>$($.text(\"some text\"))</code>. Both can also be Arrays.</li>\n  <li>For creating HTML Comment Nodes you can use either <code>$(\"&lt;!--[comment 1]-->\")</code> or \n    <code>$($.text(\"[comment 1]\", true))</code>. Both can also be Arrays.</li>\n  </ul>\n</li>\n\n<li><code>root</code>: (HTMLElement | JQL Instance) The root element for the [input]. Default is <code>document.body</code>. When root is a JQL Instance, the first element of its collection is presumed to be the root.</li>\n\n<li>\n <code>position</code>: (string) For creation of elements: where the instance should end up (relative to the root). You can use:\n <uL>\n    <li><code>\"beforebegin\"</code>: (before [root], so [root] will be the first sibling of [input])</li>\n    <li><code>\"afterbegin\"</code>: (after the begin of [root], so [input] as first element of [root])</li>\n    <li><code>\"beforeend\"</code>:  (before the end of [root], so [input] as last element of [root]))</li>\n    <li><code>\"afterend\"</code>: (after [root], so [input] will be the first sibling of [root])</li>\n  </ul>\n  You can also use <div data-action=\"jump2Nav\" data-jumpgroup=\"static\" class=\"linkLike\">the static [JQL].<b>at</b> property</div>.\n</li>\n</ul>\n\n<div>Every JQL Instance has a three relevant static properties:</div>\n\n<uL>\n  <li><code>collection: Array&lt;HTMLelement></code>: an Array with the collection of elements contained in the instance\n    (so, <code>$(`.someClass`).collection</code> can contain 0 to n elements)</li>\n  <li><code>isVirtual: boolean</code>: true if the instance is virtual (i.e. not (yet) in the \n   <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">DOM</a>-tree)</li>\n  <li><code>isJQL: boolean</code>: true if the instance is a JQL instance (so <code>$.nodes(`.someClass`).isJQL</code> is false) - \n    <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"static_nodes\">see [JQL].nodes</div></li>\n</ul>\n\n<div>Examples:</div>\n\n<ul>\n  <li><code>const exampleDiv = $(`&lt;div id=\"example\">Hello &lt;div class=\"example\">world&lt;/div>&lt;/div>`);</code></li>\n  <li><code>const exampleDiv = $(`&lt;div id=\"example\"> world&lt;/div>`, $.node(`.example:first-child`), \"afterbegin\");</code></li>\n  <li><code>const exampleDiv = $(`meta, style`, document.documentElement);</code></li>\n  <li><code>const exampleDiv = $([`&lt;div class=\"a\">A&lt;/div>`, `&lt;div class=\"B\">B&lt;/div>`]);</code></li>\n  <li><code>const exampleDivs = $(`.example`);</code></li>\n  <li><code>const exampleSubDivs = $(`#example`).find$(`.example`);</code></li>\n  <li>... etc</li>\n</ul>\n\n<div>Where a method's return value is <code>JQL Instance</code>, <a target=\"_blank\" href=\"https://www.geeksforgeeks.org/method-chaining-in-javascript/\"><i>method chaining</i></a> is possible.</div>\n\n<example>##EXAMPLECODE@chainEx##</example>\n\n<div>In the following every instance method is documented.</div>"},"static_About":{"description":"<div>Static methods are methods you can call using the imported JQL module.</div>\n\n<div>For example, when imported as <code>$</code>, <code>$.editCssRule(...)</code> or <code>const popup = $.popup()</code>.</div>\n\n<h2>Direct element creation</h2>\n\n<div>\n  For all allowed HTML elements (e.g. <code>div</code>, <code>table</code>, \n  <code>ul</code>) JQL encapsulates static methods to create them, \n  with <i>their HTML tagname as method name</i>.\n  A direct tag creation method name can either be UPPERCASE or lowercase\n  (<code>$.SPAN(...)</code> equals <code>$.span(...)</code>)\n</div>\n\n<div>For example <code>$.P('Hello!')</code> creates a <code>HTMLParagraphElement</code> with content \"Hello!\".</div>\n\n<div>Such HTML elements are created in memory, not yet added to the DOM and are not yet <code>JQL</code> instances.</div>\n\n<div>The syntax for element creation follows the syntax from the <a href=\"https://github.com/KooiInc/tinyDOM\"\n    target=\"_blank\">tinyDOM</a> library.</div>\n\n<div>There are <i>five</i> ways to convert directly created elements to <code>JQL</code> instances.\nFirst, one can use the imported JQL constructor to wrap elements.</div>\n\n<div>After importing JQL three <code>Symbol</code>s are available to convert a 'plain' <code>Node</code>. \nOne is for creating the JQL instance in memory, the other is to create the instance <i>and</i> inject it into the DOM tree. Summarized:</div>\n\n<ul class=\"numbered\">\n   <li>\n     Use the JQL constructor: \n     <br><code><b>$(</b> $.P('Hello!') <b>)</b></code>\n   </li>\n\n   <li>\n     Use <code>$[tagname|TAGNAME]_[jql|JQL](...)</code> to convert the element directly to \n     an in memory JQL instance:\n     <br><code>$<b>.div_jql(</b>'Hello world'<b>)</b>.addClass(\"hello\")</code>.\n   </li>\n\n   <li>Use <code>Symbol.jqlvirtual</code> to create an in memory JQL instance:\n     <br><code>$.P('Hello!')[<b>Symbol.jqlvirtual</b>].addClass(\"hello\")</code>\n   </li>\n\n   <li>Use <code>Symbol.jql</code> to create a JQL instance and append the \n     <code>Node</code> to the document (<code>document.body</code>):\n     <br><code>$.P('Hello!')[<b>Symbol.jql</b>].addClass(\"hello\")</code>\n   </li>\n\n   <li>Use the <code>Symbol.jql2Root</code> method\n     to create a JQL instance and append the \n     <code>Node</code> to a [root], optionally at a position [at]\n      relative to [root]:\n     <br><code>$.P('Hello!')[<b>Symbol.jql2Root</b>]($(`.myDiv`), $.at.start)</code>\n   </li>\n</ul>\n\n<div class=\"note\"><b>Note</b>: \n  For this document the Symbols are assigned to variables:\n  <uL>\n    <li><code>const <b>create</b> = Symbol.jqlvirtual</code></li>\n    <li><code>const <b>toDOM</b> = Symbol.jql</code></li>\n    <li><code>const <b>jqlTo</b> = Symbol.jql2Root</code></li>\n  </ul>\n</div>\n\n\n<example>##EXAMPLECODE@staticElemEx##</example>\n\n<example>##EXAMPLECODE@staticElemEx4##</example>\n\n<example>##EXAMPLECODE@staticElemEx2##</example>\n\n<example>##EXAMPLECODE@staticElemEx3##</example>\n\n"},"instance_setData":{"description":"<div>Set data-attribute(s) for each element of the the JQL Instance element collection. The attributes must be key-value pairs.</div>\n\n<div><b>See also</b>: <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_data\">data</div>.</div>\n\n<example>##EXAMPLECODE@setDataEx##</example>","params":[{"keyValuePairs":"Object<string, string>"}],"returnValue":"JQL Instance"},"instance_show":{"description":"<div>Show each element of the element collection of the JQL instance.</div>\n\n<div class=\"note\"><b>Note</b>: this will reset the <code>display</code> css property. For more granular showing/hiding elements, use your own classes.</div>\n\n<example>##EXAMPLECODE@showHideEx##</example>","params":[],"returnValue":"JQL Instance"},"instance_single":{"description":"<div>When <code>indexOrSelector</code> has a value, retrieves the first matching element from a JQL Instance collection, or retrieves the first (root) element from the collection. The result will be a new JQL Instance \n(<b class=\"red\">note</b>: its collection may be empty).</div>\n\n<code>indexOrSelector</code> is CSS Selector:\n\n<example>##EXAMPLECODE@singleEx##</example>\n\n<code>indexOrSelector</code> is empty:\n\n<example>##EXAMPLECODE@singleEx2##</example>\n\n<code>indexOrSelector</code> is number:\n\n<div class=\"note\"><b>Note</b>: retrieve a single element by number is zero based.</div>\n\n<example>##EXAMPLECODE@singleEx3##</example>\n\n\n<h3>Aliases <code>nth$</code> or <code>first$</code>\n\n<example>##EXAMPLECODE@first$Ex##</example>\n\n<example>##EXAMPLECODE@nth$Ex##</example>","params":[{"indexOrSelector":"string | number. An optional (valid) css selector."}],"returnValue":"JQL Instance"},"instance_style":{"description":"<div>Style each element of the of the JQL Instance element collection <i>inline</i>, so <code>&lt;div style=\"[the style from parameters]\"></code>. If <code>keyOrKvPairs</code> is a string and <code>value</code> is not empty, will set a single style value. Preferably use key-value pairs.</div>\n\n<div class=\"note\"><b>Note</b>: using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code>.</div>\n\n<div>Equivalent to <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">[JQL instance].Style.inline</div></div>","params":[{"keyOrKvPairs":"Object&lt;string, string> | string"},{"value":"string | undefined"}],"returnValue":"JQL Instance"},"instance_toNodeList":{"description":"<div>Copy the JQL Instance element collection into a <code>NodeList</code>. It may be a way to duplicate a collection of nodes (see example).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul><li>the list is not a live <code>NodeList</code>. In other words: the nodes are copies of the original (and <i>only exist in memory</i>)</li>\n<li>the eventual id of the copied nodes is removed (element id's must be unique). See also the <code>.duplicate</code> method</li></ul>\n\n<example>##EXAMPLECODE@toNodeListEx##</example>","params":[],"returnValue":"NodeList"},"instance_trigger":{"description":"<div>Trigger a handler for all elements of the the JQL Instance element collection.</div>\n\n<div class=\"note\"><b>Note</b>: bubbling is always true (<code>{bubbles: true}</code>), because event handling in this library uses <a target=\"_blank\" href=\"https://javascript.info/event-delegation\">event delegation</a>.</div>\n\n<div>See the example @<div data-action=\"jump2Nav\" data-jumpkey=\"static_delegate\" class=\"linkLike\">the delegate documentation</div></div>","params":[{"evtType":"string. An event identifier, e.g. <code>\"click\"</code>"},{"SpecifiedEvent":"Event. The event may be specified, e.g. <code>MouseEvent</code>. Defaults to generic <code>Event</code>"},{"options":"Object<string, any>. Event options. Default <code>{bubbles: true, cancelable: false, composed: false}</code>"}],"returnValue":"JQL Instance"},"instance_toggleClass":{"description":"<div>Toggle className (on/off) for each element of the JQL Instance element collection.</div>\n\n<example>##EXAMPLECODE@toggleClassEx##</example>","params":[{"className":"string. The class name to toggle (eg <code>'hidden'</code>)"}],"returnValue":"JQL Instance"},"instance_val":{"description":"<div>Get or set the value of (the root element of) the JQL instance, where the first element is one of input, textarea or select HTMLElement. </div>\n\n<div>When <code>newValue</code> is empty, return the current value, otherwise the JQL Instance. When <code>newValue</code> is not a string, the new value will be an empty string.</div>\n\n<example>##EXAMPLECODE@valEx##</example>","params":[{"newValue":"string. The value to set."}],"returnValue":"string | JQL Instance"},"static_virtual":{"description":"<div>Create a HTML element, but don't add it to DOM (so, only in memory).</div>\n\n<example>##EXAMPLECODE@virtualEx##</example>","params":[{"html":"string. A (valid) html string"},{"root":"Node. The parent of the element to create"},{"position":"The position relative to the parent of the element to create"}],"returnValue":"JQL Instance"},"static_text":{"description":"<div>Create a text (<code>isComment: false</code>) or comment (<code>isComment: true</code>) Node.</div>\n\n<example>##EXAMPLECODE@textOrCommentEx##</example>","params":[{"str":"string. The text content of the node "},{"isComment":"Boolean. Default false"}],"returnValue":"Text Node | Comment Node"},"static_popup":{"description":"<!--DEPRECATED-->\n\n<div>Alias for <code>[JQL].Popup</code>.\n  This is kept for backward \n  compatibility. <b class=\"red\">Note</b>: it may disappear someday!\n</div>\n","params":[],"returnValue":"Object<string, Function>"},"popup_About":{"description":"<div>Popup is a small module for creating (modal) popups. By default it is not initialized. You can initialize it using the <code>Popup</code> getter: <code>const popup = [JQL].Popup</code>, or use it directly (<code>[JQL].Popup.show(...)</code>). Also available as <code>[JQL].popup</code> (deprectated, may disappear without notice)</div>\n\n<div>Once initialized you can use the 4 methods the module contains, documented in the following.</div>\n\n"},"popup_create":{"description":"<div>Create a popup. When <code>isModalOrCallback</code> is a boolean and true, the window can not be automatically closed, use <code>removeModal</code> for that.</div>\n\n<div>When <code>isModalOrCallback</code> is a function it will be called after the popup is closed. Other <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\"><i>truthy</i></a> values create a modal popup.</div>\n\n<div class=\"note\"><b>Note</b>: <code>[JQL].Popup.create</code> is a legacy method. It is replaced with the more versatile (less convoluted) <div class=\"linkLike\" data-jumpkey=\"popup_show\" data-action=\"jump2Nav\">show</div> method.</div>\n\n<div>When <code>modalCallback</code> is a function, it will be called after a <i>modal</i> popup is closed.</div>\n\n<div>The examples demonstrate both a modal popup and a regular one.</div>\n\n<example>##EXAMPLECODE@popupCreateEx##</example>\n\n<example>##EXAMPLECODE@popupCreateModalEx##</example>","params":[{"message":"JQL instance | Node | HTML string | string"},{"isModalOrCallback":"Boolean | Function."},{"modalCallback":"Function. Optional function to call after closing a modal popup."},{"modalWarning":"Optional warning text when a user tries to close a modal popup without the preferred action."}],"returnValue":"Nothing"},"popup_createTimed":{"description":"<div>\n  Create a (non modal) popup, that closes itself after <code>closeAfter</code> seconds.\n</div>\n\n\n<example>##EXAMPLECODE@popupTimedEx##</example>\n","params":[{"message":"string. A text or (valid) HTML string."},{"closeAfter":"Number. The number of seconds after the popup closes itself. Default 2."},{"callback":"Function. Optional function to call after closing the popup."}],"returnValue":"Nothing"},"popup_removeModal":{"description":"<div>\nRemove a modal popup. \n\nSee the third example @<div class=\"linkLike\" data-jumpkey=\"popup_show\" data-action=\"jump2Nav\">[JQL].Popup.show</div>.</div>","params":[],"returnValue":"Nothing"},"static_log":{"description":"<div>Equivalent to <div class=\"linkLike\" data-jumpkey=\"debuglog_log\" data-action=\"jump2Nav\">log</div> in <div class=\"linkLike\" data-jumpgroup=\"debuglog\" data-action=\"jump2Nav\">debugLog</div>, but for intermediate logging to console (so <code>debugLog</code> doesn't have to be set to 'on').</div>\n\n<div>While loading this document this logging was called several times. See the console for that.</div>","params":[{"...args":"string[]"}],"returnValue":"JQL.debugLog"},"static_nodes":{"description":"<div>Retrieve or more DOM Nodes from [root]. The equivalent of <code>Array.from([root].querySelectorAll([css selector]))</code>. </div>\n\n<div class=\"note\"><b>Note</b>: returns a real <code>Array</code> (not a <code>NodeList</code>), so all <code>Array</code> methods work on the result.</div>\n\n<div>For example: <code>$.nodes(`.allGreen`).map(elem => elem.textContent += ` I'm green!`);</code>.</div>","params":[{"selector":"string. A (valid) css selector"},{"root":"Node. Default <code>document html element</code>"}],"returnValue":"Array&lt;Node>"},"static_node":{"description":"<div>Retrieve a DOM Node from [root]. The equivalent of <code>[root].querySelector([css selector])</code>. For example: <code>const firstGreen = $.node(`.allGreen`);</code>.</div>\n\n","params":[{"selector":"string. A (valid) css selector"},{"root":"Node. Default <code>document html element</code>"}],"returnValue":"Node"},"static_createStyle":{"description":"<!--DEPRECATED-->\n\n<div>\n  Alias of <div class=\"linkLike\" \n  data-action=\"jump2Nav\" \n  data-jumpkey=\"static_editStylesheet\">editStylesheet</div>. \n  This method is kept for backward \n  compatibility. <b class=\"red\">Note</b>: it may disappear someday!\n</div>","params":[{"id":"string"}],"returnValue":"Function."},"instance_prependTo":{"description":"<div>Injects the current JQL Instance at the start of <code>prependTo</code>. </div>\n\n<div>If <code>prependTo</code> is a HTML string, it is converted to a JQL Instance and thus validated.</div>\n\n<div>The syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_appendTo\">appendTo</div>.</div>\n\n\n","params":[{"prependTo":"string | JQL Instance"}],"returnValue":"JQL Instance"},"debuglog_About":{"description":"<div>To use extensive logging for debugging (or just follow the application flow) you can use a special object named <code>debugLog</code>. <code>debugLog</code> is a static property of the JQL module. Where a method returns <code>debugLog</code> (so itself) the result is <i>chainable</i>.</div>\n\n<div>Logging by default is to the browser console, but you can also log to a specially created element within your document.</div>\n\n<div>By default debug logging is not active.</div>\n\n<div>See it in action in <a class=\"linkLike\" target=\"_blank\" href=\"https://kooiinc.github.io/JQL/Resource/Demo/\">the JQL demonstration page</a> (click 'Show logs').</div>\n\n<div class=\"note\"><b>Note</b>: errors when creating elements are always logged to the browser console.</div>\n\n<example>\n// JQL imported as $\nconst { debugLog } = $;\nif (!debugLog.isOn()) {\n  debugLog\n   .on()\n   .toConsole.off()\n   .log(\"We started logging to div#logBox, enjoy ...\");\n}\n</example>\n\n<div>There are two extra <i>properties</i> in <code>debugLog</code> to note:</div>\n\n<ul>\n<li><code>toConsole</code> can be used to enable or disable logging to the browser console. \nUse <code>toConsole.on()</code> to enable, <code>toConsole.off()</code> to disable logging to the console.</code>.\nBy default logging to the console is enabled. If logging is not active, using <code>toConsole.on/off</code> will\nset the state for later usage.\n</li>\n<li><code>reversed</code>. By default logging (to screen) is from latest entry to the oldest. \nTo log from first entry to the last you can use <code>debugLog.reversed.on()</code>, and vice versa use <code>debugLog.reversed.off()</code>.\nAs with <code>toConsole</code> this is only useful if debug logging is active, and only if logging to console is <i>off</i>.</li>\n</ul>"},"debuglog_isOn":{"description":"<div>Check if debug logging state is active.</div>","params":[],"returnValue":"Boolean"},"debuglog_isVisible":{"description":"<div>When logging to screen is active, check if the special logging box is visible.</div>","params":[],"returnValue":"Boolean"},"debuglog_on":{"description":"<div>Activate debug logging. By default logs all to the browser console.</div>\n\n<div>Use <code>[JQL].debugLog.on().toConsole.off()</code> to activate logging to screen.</div>","params":[],"returnValue":"debugLog"},"debuglog_off":{"description":"<div>Deactivate debug logging.</div>","params":[],"returnValue":"debugLog"},"debuglog_remove":{"description":"<div>Removes and deactivates all logging. If applicable removes the log box from the DOM.</div>\n\n<div class=\"note\"><b>Note</b>: reactivate debug logging with <code>[JQL].debugLog.on()</code>.</div>","params":[],"returnValue":"debugLog"},"debuglog_log":{"description":"<div>Log one or more strings, either to the console or the DOM logging element. <code>debugLog</code> Must be on (so <code>debugLog.isOn === true</code>). </div>\n\n<div class=\"note\"><b>Note</b> For custom log messages to the console (independent of <code>debugLog.isOn</code>) you can use the <div class=\"linkLike\" data-jumpkey=\"static_log\" data-action=\"jump2Nav\">static [JQL].log method</div>.</div>","params":[{"...args":"string[]"}],"returnValue":"debugLog"},"debuglog_hide":{"description":"<div>Hide the DOM log box, if applicable (not logging to console).</div>","params":[],"returnValue":"debugLog"},"debuglog_show":{"description":"<div>Show the DOM log box, if applicable (not logging to console).</div>","params":[],"returnValue":"debugLog"},"debuglog_clear":{"description":"<div>Remove all strings logged until now from DOM log box or browser console.</div>","params":[],"returnValue":"debugLog"},"static_setStyle":{"description":"<!--DEPRECATED-->\n\n<div>\n  Alias of <div class=\"linkLike\" \n   data-action=\"jump2Nav\" \n   data-jumpkey=\"static_editCssRule\">editCssRule</div>. The method is kept for backward \n  compatibility. <b class=\"red\">Note</b>: it may disappear someday!\n</div>\n\n\n","params":[],"returnValue":"void"},"static_removeCssRule":{"description":"<div>Remove one or more css rules (e.g. <code>.someclass:after</code>) from the custom JQL stylesheet (<code>&lt;style id=\"JQLStylesheet\"></code>).</div>\n\n<div><b>Notes</b>:</div>\n<ul>\n<li>[...rules] may also be a single comma delimited string of several css selectors</li>\n<li>When a rule has several cssSelectors in one rule (e.g. <code>.test1, test2 {...}</code>, surround the rule to remove \n  with exclamation marks: <code>$.removeCssRule(`!.test1, test2!`)</code></li>\n<li>The selector to remove should be <i>exactly</i> the selector you used to create it. \nSo removal of <code>.test1, test2 {...}</code> will fail using <code>$.removeCssRule(`!.test1,test2!`)</code></li>\n<li>For clarity <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"static_removeCssRules\">removeCssRules</div> exists also. Both <code>removeCssRule</code> and <code>removeCssRule<b style=\"color:red\">s</b></code> work exactly the same.</li>\n</ul>\n\n<example>##EXAMPLECODE@removeCssRuleEx##</example>\n\n<div class=\"note\">\n  <b>Note</b>: \n  <code>removeCssRule</code> uses the repository <a target=\"_blank\"\n    href=\"https://github.com/KooiInc/LifeCSS\">LifeCSS</a>\n</div>","params":[{"...rules":"string | string[]. One ore more css selectors."}],"returnValue":"Nothing"},"static_editCssRule":{"description":"<div>Formerly known as <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_setStyle\">setStyle</div>.</div>\n\n<div>On importing, JQL creates a custom stylesheet in the header (<code>&lt;style id=\"JQLStylesheet\"></code>. Within this stylesheet you can create, remove and/or modify style rules using <code>[jql].editCssRule</code></div>\n\n<div>You can use either real style rule string, or a selector and an Object defining the properties of that selector.</div>\n\n<div>When a rule is valid and doesn't exist, it will be created. Existing rules are modified with the given parameters.</div>\n\n<div>You can remove rule properties (e.g. <code>color</code>) or complete rules.</div>\n\n<ul>\n<li>To remove one or more <i>rule properties</i>, use (for example) <code>$.editCssRule(`#someDiv`, {removeProperties: {color: 1, border: 1}})</code></li>\n<li>To completely remove a css rule, use (for example) <code>$.editCssRule(`#someDiv`, {removeRule: 1})</code> <i>OR</i> use  <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_removeCssRule\">removeCssRule</div></li></ul>\n\n<example>##EXAMPLECODE@editCssRuleEx##</example>\n\n<div class=\"note\">\n  <b>Note</b>: \n  <code>editCssRule</code> uses the repository <a target=\"_blank\"\n    href=\"https://github.com/KooiInc/LifeCSS\">LifeCSS</a>\n</div>","params":[{"ruleOrSelector":"string. A css selector (e.g. <code>div[data-form]</code>) or a css rule (e.g. <code>.redBold {color: red; font-weight: bold;}</code>)"},{"ruleObject":"Object&lt;string, string> optional. When [ruleOrSelector] is a css selector, an object with rule properties."}],"returnValue":"Nothing"},"static_allowTag":{"description":"<div>The creation of some html-tags are prohibited/not enabled by default (like <code>&lt;frameset></code>, or <code>&lt;script></code>). You can allow the creation of such tags using this static method.</div>\n\n<div>\nAllowing a <code>tagName</code> also enables its use as a static JQL extension method. So\n</div>\n\n<example>\n$.allowTag('template');\n// this will create template#myTemplate and add it to the DOM tree\n$.TEMPLATE({id: \"myTemplate\", innerHTML: \"...\"})[toDOM];\n</example>\n\n<div class=\"note\"><b style=\"color:red\">Note</b>: using <code>allowTag</code> may introduce security problems. <b class=\"warn\">Handle with care</b>!</div>","params":[{"tagName":""}],"returnValue":"Nothing"},"static_prohibitTag":{"description":"<div>The creation of most html-tags is allowed by default. You can prohibit the creation of a tag using this the <code>prohibitTag</code> method, e.g. <code>$.prohibitTag(`dialog`)</code>.</div>\n\n<div>\nProhibiting a <code>tagName</code> also disables its use as a static JQL extension method. So\n</div>\n\n<example>\n$.prohibitTag('template');\n// this will throw a TypeError (because the result of $.TEMPLATE_JQL(...) is undefined\n$.TEMPLATE_JQL({id: \"myTemplate\", innerHTML: \"...\"}).toDOM();\n</example>","params":[{"tag2Prohibit":""}],"returnValue":"Nothing"},"instance_length":{"description":"<div>The number of elements within the JQL instance element collection.</div>\n\n<example>##EXAMPLECODE@lenEx##</example>","params":[],"returnValue":"Number"},"popup_show":{"description":"<div>Create and display a popup 'window'. There is one parameter, which is an Object with the following properties.</div>\n\n<ul><li><code>content</code>: (JQL instance | HTML string | string) the message to show;</li>\n<li>[<code>modal</code>]: (Boolean) <code>true</code> makes the popup modal (a popup without a closer icon, which can only be closed using some handler withing its' content);</li>\n<li>[<code>closeAfter</code>]: (Number) the number of seconds after which the popup closes itself (ignored when <code>modal</code>);</li>\n<li>[<code>callback</code>]: (Function) a function that will be executed after closing the popup;</li>\n<li>[<code>warnMessage</code>]: (JQL instance | HTML string | string) a warning shown when the user tries to close the modal popup (e.g. by clicking outside it).</li></ul>\n\n<div>The only property that should have a value is <code>content</code>.</div>\n\n<div>The examples demonstrate a regular and modal popup.</div>\n\n\n<example>##EXAMPLECODE@popupShowEx##</example>\n\n<example>##EXAMPLECODE@popupShowTimedEx##</example>\n\n\n<example>##EXAMPLECODE@popupShowModalEx##</example>","params":[{"show_isObject":"<code>{ content[, modal, closeAfter, callback, warnMessage]  }</code>"}],"returnValue":"Nothing"},"instance_data":{"description":"<div>Delivers a utility Object to manipulate data-attributes of the first element of the JQL instance collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul>\n<li><code>[JQL instance].data</code> is a <i>static property</i>;</li>\n<li><code>[JQL instance].data</code>'s methods are applied to the first element of the JQL instance collection;</li>\n<li>The handling of casing for data-attributes is a bit weird and poorly documented imho. \nIn html and css a data-attribute like <code>helloWorld</code> will show up as <code>hello-world</code>, for setting of/retrieval from the <code>dataset</code> it should be <code>helloWorld</code>. The methods of <code>[JQL instance].data</code> mitigate this (in other words: you can always use either <i>camelCased</i> or <i>dashed notation</i> data-attributes here). The example should demonstrate this;</li>\n<li>The methods <code>.set</code> and <code>.remove</code> return the JQL instance (so, you can chain from them).\n</ul>\n\n<div>The available methods:</div>\n\n<ul>\n  <li><code>all</code>: Retrieves all data-attribute values (e.g. <code>[JQL instance].data.all.someattribute</code>);</li>\n  <li><code>get(key: string[, whenUndefined: any])</code> Retrieves the value of data-attribute with [key] (e.g. <code>[JQL instance].data.get(\"someattribute\")</code>. \n   <code>whenUndefined</code> (optional) will be returned when the data-attribute does not exist);</li>\n  <li><code>set({key1: value1, ..., keyn: valuen})</code> Sets one or more attribute values (e.g. <code>[JQL instance].data.set({someattribute: \"1\"})</code>);</li>\n  <li><code>remove(key: string)</code> Removes the data-attribute with [key] (e.g. <code>[JQL instance].data.remove(\"someattribute\")</code>).</li>\n</ul>\n\n<div><b>See also</b>\n<div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_getData\">getData</div> and\n  <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_setData\">setData</div>.</div>\n\n<example>##EXAMPLECODE@dataEx##</example>","params":[],"returnValue":"Object&lt;string, Function>"},"instance_HTML":{"description":"<div>Returns a utility object for retrieving inner-/outerHTML, replacing, inserting or appending html of the first element of the JQL instance element.</div>\n\n<div>The available methods:</div>\n<ul>\n<li><code>get([outer:boolean, escaped:boolean])</code> Retrieves the html. If [outer] is true, it will be the outerHTML, otherwise innerHTML. \n  When [escaped] is true, the html will be escaped, meaning that you can display the html within another html element.</li>\n<li><code>set(content:string|JQL instance, [append:boolean], [escape:boolean])</code> \n  Set the html of the first element of the JQL collection.\n  <ul>\n    <li>When [append] is true, [content] is appended to the existing html.</li>\n    <li>When[escape] is true, [content] is escaped (so: <code>&lt;div></code> becomes <code>&amp;lt;div></code>)</li>\n  </ul>\n  <b>Notes</b>: \n  <ul>\n    <li>[content] is always sanitized.</li>\n    <li>When not appended or inserted, <code>set</code> destroys everything within \n         the first element of the JQL collection</li></ul>\n</li>\n<li><code>replace(content:string|JQL Instance, [escape:boolean])</code> Replaces innerHTML with [content]. See <code>HTML.set</code>.</li>\n<li><code>append(content:string|JQL Instance, [escape:boolean])</code> Appends [content] to innerHTML. See <code>HTML.set</code>.</li>\n<li><code>insert(content:string|Node|JQL Instance, [escape:boolean])</code> Inserts [content] to innerHTML. See <code>HTML.set</code>.</li>\n</ul>\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul>\n<li><code>set</code>, <code>replace</code>, <code>append</code> and <code>insert</code> return the JQL instance.</li>\n<li>When the [html] parameter is a JQL Instance, the outer HTML of the first element of its collection will be used.</li>\n</ul>\n\n<example>##EXAMPLECODE@htmlObjEx##</example>\n","params":[],"returnValue":"Object&lt;string, Function>"},"static_editCssRules":{"description":"<div>Like <code>editCssRule</code> but for multiple css rules at once</div>\n<div>Add one or more css rules (e.g. <code>.redBold {color: red; font-weight: bold;}</code>) to <code>&lt;style id=\"JQLStylesheet\"></code>.</div>\n\n<example>##EXAMPLECODE@editCssRulesEx##</example>\n\n<div class=\"note\">\n  <b>Note</b>: \n  <code>editCssRules</code> uses the repository <a target=\"_blank\"\n    href=\"https://github.com/KooiInc/LifeCSS\">LifeCSS</a>\n</div>","params":[{"...rules":"string[]. One or more complete css rules"}],"returnValue":"Nothing"},"instance_Style":{"description":"<div>Delivers a utility object to manipulate styling of a JQL instance (element collection) or retrieve computed style value(s) from the first element of the element collection.</div>\n\n<div>The available methods:</div>\n<ul>\n<li><code>inline(rules: Object&lt;string, string>)</code> set the styling of all elements of the JQL instance collection using the style attribute (<code>style=\"...\"</code>)</li>\n<li><code>inSheet(rules: Object&lt;string, string>)</code> set the styling of all elements of the JQL instance collection using the JQL custom stylesheet. When rules contains a <code>className</code> property, the className and the rules values will be added to the styleSheet, otherwise a intermediate className will be created for the given rules (see the example)</li>\n<li><code>byRule({classes2Apply: Array&lt;string>, rules: Array&lt;string>})</code> Add one or more rules to the JQL custom stylesheet and (optionally) apply one or more classes to the concerning JQL Instance. See second example.\n</li>\n<li><code>nwRule(rule:string)</code>. Create a new rule with className (<code>.someClass</code>) or id (<code>#someId</code>) <i>and</i> add the class or id from the rule to the element this method is called from. See second example.\n<br><b>Note</b>: if the element already has an id, it is <i>NOT</i> overwritten!</li>\n<li><code>computed</code> (getter) Retrieves the complete computedStyle of the first element of the JQL instance collection.</li>\n<li><code>valueOf(key:string)</code> Retrieve the computed value of a style property (see example)</li>\n</ul>\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul><li><code>inline</code>, <code>inSheet</code> and <code>byRule</code> return the JQL instance.</li>\n<li>For the [key] value of <code>valueOf</code> you can either supply camel cased or dashed notation (e.g. \"borderLeft\" vs \"border-left\")</li></ul>\n\n<example>##EXAMPLECODE@styleObjInStyleEx##</example>\n\n<example>##EXAMPLECODE@styleRulingsEx##</example>\n","params":[],"returnValue":"Nothing"},"static_fn":{"description":"<div>Add custom method to JQL instances. </div>\n\n<div>The first argument of function [fn] is the JQL instance. Calling the added method, you only need [...arguments]. See both examples for usage.</div>\n\n<example>##EXAMPLECODE@fnEx##</example>\n\n<example>##EXAMPLECODE@fnEx2##</example>","params":[],"returnValue":"Nothing"},"instance_closest":{"description":"<div>Return the parent element/node with css selector the closest (upwards) to the first element of the JQL instance collection. Equals <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\">Element.closest</a>. The element returned is either new JQL instance (when something was found) or the original JQL instance (nothing found).</div>\n\n<example>##EXAMPLECODE@closestEx##</example>","params":[{"selector":"string. A css selector"}],"returnValue":"JQL instance"},"static_IS":{"description":"<div><code>[JQL].IS</code> is a utility. With it you can determine if a given Object is of (one of) the <code>shouldBe</code> types, <b><i>or</i></b> determine what type <code>obj</code> is.</div>\n\n<example>##EXAMPLECODE@ISEx##</example>\n\n<div>There's an extensive example of this utility method in the <a href=\"https://kooiinc.github.io/typeofAnything/Demo/\" target=\"_blank\">demonstration page</a> of the github repository 'typeOfAnything'.</div>","params":[],"returnValue":"Boolean"},"instance_afterMe":{"description":"<div>Alias for <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_after\">[JQL instance].after</div>.</div>\n","params":[{"elem2AddAfter":"JQL instance | HtmlElement | (valid) HTML string"}],"returnValue":"JQL instance"},"instance_beforeMe":{"description":"<div>\nAlias for <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_before\">[JQL instance].before</div>\n</div>","params":[{"elem2AddBefore":"JQL instance | HtmlElement | (valid) HTML string"}],"returnValue":"JQL instance"},"instance_andThen":{"description":"<div><code>.andThen</code> injects [elem2Add] into the parent of the current JQL instance, right <i>before</i> (before = true) or <i>after</i> it. The original instance is replaced with an JQL instance containing both elements in its collection. The return value is the new instance.</div>\n\n<example>##EXAMPLECODE@andThenEx##</example>","params":[{"elem2Add":"JQL instance | single HtmlElement | HTML string"},{"before":"Boolean (default value = false)"}],"returnValue":"JQL instance"},"static_removeCssRules":{"description":"<div>Remove one or several css rule(s) (e.g. <code>.someclass:after</code>) from the custom JQL stylesheet (<code>&lt;style id=\"JQLStylesheet\"></code>).</div>\n\n<ul>\n<li>[...rules] may also be a single comma delimited string of several css selectors</li>\n<li>When a rule has several cssSelectors in one rule (e.g. <code>.test1, test2 {...}</code>, surround the rule to remove \n  with exclamation marks: <code>$.removeCssRule(`!.test1, test2!`)</code></li>\n<li>The selector(s) to remove should be <i>exactly</i> the selector you used to create it. \nSo removal of <code>.test1, test2 {...}</code> will fail using <code>$.removeCssRule(`!.test1,test2!`)</code></li>\n<li>For clarity <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"static_removeCssRule\">removeCssRule</div> exists also. Both <code>removeCssRule</code> and <code>removeCssRule<b style=\"color:red\">s</b></code> work exactly the same.</li>\n</ul>\n\n<example>##EXAMPLECODE@removeCssRulesEx##</example>\n\n<div class=\"note\">\n  <b>Note</b>: \n  <code>removeCssRules</code> uses the repository <a target=\"_blank\"\n    href=\"https://github.com/KooiInc/LifeCSS\">LifeCSS</a>\n</div>","params":[{"...rules":"string | string[]. One ore more css selectors"}],"returnValue":"Nothing"},"instance_replaceWith":{"description":"<div>Replace the JQL Instance with a new JQL Instance.</div> \n\n<div><b>Note</b>: formerly known as <code>replaceMe</code>, which may still be used for now. <code>replaceMe</code> is candidate for future deprecation.</div>\n\n<example>##EXAMPLECODE@replaceWithEx##</example>","params":[{"newChild":"HTMLElement | JQL instance"}],"returnValue":"JQL Instance (from the replacement element)"},"debuglog_reversed":{"description":"<div>\n  By default logging starts with the oldest event logged. With This method on can \n  reverse that to newest first. Use <code>debugLog.reversed<b>.on/off()</b></code>\n</div>","params":[],"returnValue":"<code>debugLog</code>"},"static_lenient":{"description":"<div>\n  A few HTML tags are prohibited (e.g. <code>script</code>). One can override it using\n  <code>$.lenient</code>. It is an <code>Object</code> with two methods:\n</div>\n\n<ul>\n  <li>use <code>$.lenient.on()</code> to allow the creation of not allowed HTML tags \n    (e.g. <code>embed</code>)\n    <div class=\"note\"><b style=\"color:red\">\n      Note</b>: <code>$.lenient.on()</code> may introduce security problems. <b \n      class=\"warn\">Handle with care</b>!</div>\n  </li>\n  <li>(Default) use <code>$.lenient.off()</code> to use only permitted HTML tags.</li>\n</ul>\n\n<h3>\n  By default prohibited HTML tags:</h3> <ul>\n  <li>audio</li>\n  <li>embed</li>\n  <li>form</li>\n  <li>iframe</li>\n  <li>frameset</li>\n  <li>object</li>\n  <li>progress</li>\n  <li>script</li>\n  <li>template</li></ul>\n\n<div>To allow individual HTML tags, use <div class=\"linkLike\" data-jumpkey=\"static_allowTag\" data-action=\"jump2Nav\"><code>$.allowTag(tagName)</code></div></div>\n\n<div>To prohibit individual HTML tags, use <div class=\"linkLike\" data-jumpkey=\"static_prohibitTag\" data-action=\"jump2Nav\"><code>$.prohibitTag(tagName)</code></div></div>","params":[],"returnValue":"void"},"static_at":{"description":"<div>\n  <code>at</code> is an <code>Object</code> containing eight properties to use for\n  mapping a created elements' position relative to its parent, \n  in other words: the position parameter from the JQL constructor.\n</div>\n\n<div>For example:</div>\n\n<code>$(\n \"&lt;div>Hi there&lt;/div>\" <b class=\"comment\">/*[input]*/</b>, \n  $(\"#someElem\") <b class=\"comment\">/*[root]*/</b>, \n  <b>$.at.before</b>)</code>\n\n<div class=\"note\"><b style=\"color:red\">\n  Note</b>: one can provide keys <i>case insensitive</i>. So \n  <code>$.at.afterend</code> is equivalent to \n  <code>$.at.AfterEND</code>.\n</div>\n\n<div>Its keys (properties) are:</div>\n\n<ul>\n  <li>\n    <code>Before</code> or <code>BeforeBegin</code>: \n    before [root], so [root] will be the first sibling of [input]</li>\n  <li>\n    <code>Start</code> or <code>AfterBegin</code>: \n    after the begin of [root], so [input] as first element of [root]\n     (de facto <i>prepend</i>)\n  </li>\n  <li>\n    <code>End</code> or <code>BeforeEnd</code>:\n    before the end of [root], so [input] as last element of [root]\n   (de facto <i>append</i>)\n  </li>\n  <li>\n    <code>After</code> or <code>AfterEnd</code>: \n    after [root], so [input] will be the first sibling of [root]</li>\n</ul>\n\n<example>##EXAMPLECODE@staticAtEx##</example>\n\n","params":[],"returnValue":"n/a"},"static_editStylesheet":{"description":"<div>This factory function that creates (or retrieves) a stylesheet with the given <code>id</code> in the head of the document and returns a function to create/modify style rules in that stylesheet.</div>\n\n<div>See also <div data-action=\"jump2Nav\" data-jumpkey=\"static_editCssRules\" class=\"linkLike\">the <code>editCssRules</code>documentation</div>.</div>\n\n<example>##EXAMPLECODE@staticCreateStyleEx##</example>\n\n<div class=\"note\">\n  <b>Note</b>: \n  <code>editStylesheet</code> uses the repository <a target=\"_blank\"\n    href=\"https://github.com/KooiInc/LifeCSS\">LifeCSS</a>\n</div>","params":[{"id":"string. The id of the stylesheet to edit. If stylesheet#[id] does not exist, it will be created"}],"returnValue":"Function"},"static_Popup":{"description":"<div>The built in Popup library.</div>\n\n<div>See <div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">the documentation</div>.","params":[],"returnValue":"Object<string, Function>"},"instance_after":{"description":"<div><code>.after</code> injects [elem2Add] into the parent of the current JQL instance, right <i>after</i> it. The original instance is replaced with an JQL instance containing both elements in its collection. The return value is the new instance.</div>\n\n<example>##EXAMPLECODE@afterMeEx##</example>","params":[{"elem2AddAfter":"JQL instance | HtmlElement | (valid) HTML string"}],"returnValue":"JQL instance"},"instance_before":{"description":"<div><code>.beforeMe</code> injects [elem2Add] into the parent of the current JQL instance, right <i>before</i> it. The original instance is replaced with an JQL instance containing both elements in its collection. The return value is the new instance.</div>\n\n<example>##EXAMPLECODE@beforeMeEx##</example>","params":[{"elem2AddBefore":"JQL instance | HtmlElement | (valid) HTML string"}],"returnValue":"JQL instance"},"instance_nth$":{"description":"<div>Alias for <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_single\">[JQL instance].single</div>.</div>\n","params":[{"indexOrSelector":"string | number. An optional (valid) css selector."}],"returnValue":"JQL instance"}}