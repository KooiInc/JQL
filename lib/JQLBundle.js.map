{
  "version": 3,
  "sources": ["../src/DOMCleanup.js", "../src/Helpers.js", "../src/DOM.js", "../src/Styling.js", "../src/JQLCollectionExtensions.js", "../src/HandlerFactory.js", "../src/JQLExtensions.js", "../src/JQLExtensionHelpers.js", "../src/JQLLog.js", "../src/JQueryLike.js"],
  "sourcesContent": ["/**\r\n *\r\n * @module HtmlCleanup\r\n */\r\n\r\n// alllow or disallow unknown tags (default: false)\r\nlet lenient = false;\r\nconst log = false;\r\n/**\r\n * set allowance for unknown HTML tags, exposed as <code>JQL.allowUnknownHtmlTags</code>\r\n * @typedef allowUnknownHtmlTags\r\n * @type {Object}\r\n * @property {function} on Allow unknown HTML tags\r\n * @property {function} off Do not allow unknown HTML tags (default)\r\n */\r\nconst allowUnknownHtmlTags = {\r\n  on: () => lenient = true,\r\n  off: () => lenient = false,\r\n};\r\n\r\n/**\r\n * The initial set of tags and allowances for cleanup\r\n * @member cleanupTagInfo\r\n */\r\nconst cleanupTagInfo = {\r\n  a: {elem: HTMLAnchorElement, allowed: true},\r\n  area: {elem: HTMLAreaElement, allowed: false},\r\n  audio: {elem: HTMLAudioElement, allowed: false},\r\n  br: {elem: HTMLBRElement, allowed: true},\r\n  base: {elem: HTMLBaseElement, allowed: false},\r\n  body: {elem: HTMLBodyElement, allowed: false},\r\n  button: {elem: HTMLButtonElement, allowed: true},\r\n  canvas: {elem: HTMLCanvasElement, allowed: false},\r\n  dl: {elem: HTMLDListElement, allowed: true},\r\n  data: {elem: HTMLDataElement, allowed: false},\r\n  datalist: {elem: HTMLDataListElement, allowed: true},\r\n  div: {elem: HTMLDivElement, allowed: true},\r\n  embed: {elem: HTMLEmbedElement, allowed: false},\r\n  fieldset: {elem: HTMLFieldSetElement, allowed: true},\r\n  font: {elem: HTMLFontElement, allowed: false},\r\n  form: {elem: HTMLFormElement, allowed: false},\r\n  hr: {elem: HTMLHRElement, allowed: true},\r\n  head: {elem: HTMLHeadElement, allowed: false},\r\n  output: {elem: HTMLOutputElement, allowed: true},\r\n  iframe: {elem: HTMLIFrameElement, allowed: false},\r\n  frameset: {elem: HTMLFrameSetElement, allowed: false},\r\n  img: {elem: HTMLImageElement, allowed: true},\r\n  input: {elem: HTMLInputElement, allowed: true},\r\n  li: {elem: HTMLLIElement, allowed: true},\r\n  label: {elem: HTMLLabelElement, allowed: true},\r\n  legend: {elem: HTMLLegendElement, allowed: true},\r\n  link: {elem: HTMLLinkElement, allowed: false},\r\n  map: {elem: HTMLMapElement, allowed: false},\r\n  media: {elem: HTMLMediaElement, allowed: false},\r\n  meta: {elem: HTMLMetaElement, allowed: false},\r\n  meter: {elem: HTMLMeterElement, allowed: true},\r\n  ol: {elem: HTMLOListElement, allowed: true},\r\n  object: {elem: HTMLObjectElement, allowed: false},\r\n  optgroup: {elem: HTMLOptGroupElement, allowed: true},\r\n  option: {elem: HTMLOptionElement, allowed: true},\r\n  p: {elem: HTMLParagraphElement, allowed: true},\r\n  param: {elem: HTMLParamElement, allowed: true},\r\n  picture: {elem: HTMLPictureElement, allowed: false},\r\n  pre: {elem: HTMLPreElement, allowed: true},\r\n  progress: {elem: HTMLProgressElement, allowed: false},\r\n  quote: {elem: HTMLQuoteElement, allowed: true},\r\n  script: {elem: HTMLScriptElement, allowed: false},\r\n  select: {elem: HTMLSelectElement, allowed: true},\r\n  source: {elem: HTMLSourceElement, allowed: false},\r\n  span: {elem: HTMLSpanElement, allowed: true},\r\n  style: {elem: HTMLStyleElement, allowed: true},\r\n  caption: {elem: HTMLTableCaptionElement, allowed: true},\r\n  td: {elem: HTMLTableCellElement, allowed: true},\r\n  col: {elem: HTMLTableColElement, allowed: true},\r\n  table: {elem: HTMLTableElement, allowed: true},\r\n  tr: {elem: HTMLTableRowElement, allowed: true},\r\n  template: {elem: HTMLTemplateElement, allowed: false},\r\n  textarea: {elem: HTMLTextAreaElement, allowed: true},\r\n  time: {elem: HTMLTimeElement, allowed: true},\r\n  title: {elem: HTMLTitleElement, allowed: true},\r\n  track: {elem: HTMLTrackElement, allowed: true},\r\n  details: {elem: HTMLDetailsElement, allowed: false},\r\n  ul: {elem: HTMLUListElement, allowed: true},\r\n  video: {elem: HTMLVideoElement, allowed: false},\r\n  del: {elem: HTMLModElement, allowed: true},\r\n  ins: {elem: HTMLModElement, allowed: true},\r\n  slot: {elem: HTMLSlotElement, allowed: false},\r\n  blockquote: {elem: HTMLQuoteElement, allowed: true},\r\n  dialog: {name: \"dialog\", allowed: false},\r\n  summary: {name: \"summary\", allowed: true},\r\n  main: {name: \"main\", allowed: true},\r\n  address: {name: \"address\", allowed: true},\r\n  colgroup: {name: \"colgroup\", allowed: true},\r\n  tbody: {name: \"tbody\", allowed: true},\r\n  tfoot: {name: \"tfoot\", allowed: true},\r\n  th: {name: \"th\", allowed: true},\r\n  dd: {name: \"dd\", allowed: true},\r\n  dt: {name: \"dt\", allowed: true},\r\n  figcaption: {name: \"figcaption\", allowed: true},\r\n  figure: {name: \"figure\", allowed: true},\r\n  i: {name: \"i\", allowed: true},\r\n  b: {name: \"b\", allowed: true},\r\n  code: {name: \"code\", allowed: true},\r\n  h1: {name: \"h1\", allowed: true},\r\n  h2: {name: \"h2\", allowed: true},\r\n  h3: {name: \"h3\", allowed: true},\r\n  h4: {name: \"h4\", allowed: true},\r\n  abbr: {name: \"abbr\", allowed: true},\r\n  bdo: {name: \"bdo\", allowed: true},\r\n  dfn: {name: \"dfn\", allowed: true},\r\n  em: {name: \"em\", allowed: true},\r\n  kbd: {name: \"kbd\", allowed: true},\r\n  mark: {name: \"mark\", allowed: true},\r\n  q: {name: \"1\", allowed: true},\r\n  rb: {name: \"rb\", allowed: true},\r\n  rp: {name: \"rp\", allowed: true},\r\n  rt: {name: \"rt\", allowed: true},\r\n  ruby: {name: \"ruby\", allowed: true},\r\n  s: {name: \"s\", allowed: true},\r\n  strike: {name: \"strike\", allowed: true, is: \"deprecated\"},\r\n  samp: {name: \"samp\", allowed: true},\r\n  small: {name: \"small\", allowed: true},\r\n  strong: {name: \"strong\", allowed: true},\r\n  sup: {name: \"sup\", allowed: true},\r\n  sub: {name: \"sub\", allowed: true},\r\n  u: {name: \"u\", allowed: true},\r\n  var: {name: \"var\", allowed: true},\r\n  wbr: {name: \"wbr\", allowed: true},\r\n  nobr: {name: \"nobr\", allowed: false},\r\n  tt: {name: \"tt\", allowed: true},\r\n  noscript: {name: \"noscript\", allowed: true},\r\n  comment: {name: \"comment\", allowed: false},\r\n\r\n  isAllowed(elem) {\r\n    const tagInSet = Object.values(this)\r\n      .find(tag => tag.elem && elem instanceof tag.elem ||\r\n        (elem.nodeName || \"\").toLowerCase() === tag.name);\r\n    return (tagInSet && tagInSet.allowed) ||\r\n      lenient && !tagInSet;\r\n  }\r\n};\r\n\r\n// regexex not allowed attributes/attribute values\r\nlet notAllowedAttributes = /(^action|allow|contenteditable|data|on)|download|formaction|form|autofocus|poster|source|dirname|srcdoc|srcset|xlink|for|event|xmlns/i;\r\nlet notAllowedAttributeValues = /javascript|injected|import|noreferrer|alert|DataURL/i;\r\n\r\n// cleanup a given html element\r\nconst cleanupHtml = elem => {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = `<div id=\"placeholder\">${elem.outerHTML}</div>`;\r\n  const el2Clean = template.content.querySelector(\"#placeholder\");\r\n  el2Clean.querySelectorAll(\"*\").forEach(child => {\r\n    [...child.attributes]\r\n      .forEach(attr => {\r\n          const evilValues = notAllowedAttributeValues.test(attr.value.trim());\r\n          const evilAttrib = notAllowedAttributes.test(attr.name.trim());\r\n        if (evilValues) {\r\n          console.info(`DOM cleanup message: attribute [${attr.name}] with value [${attr.value}] removed`);\r\n          child.removeAttribute(attr.name);\r\n        } else if (evilAttrib) {\r\n          console.info(`DOM cleanup message: attribute [${attr.name}] removed`);\r\n          child.removeAttribute(attr.name);\r\n        }\r\n    });\r\n    const tagInSet = cleanupTagInfo.isAllowed(child);\r\n    if (!tagInSet) {\r\n      log && console.info(`DOM cleanup message: tag [${child.nodeName.toLowerCase()}] removed`);\r\n      child.parentNode.removeChild(child);\r\n    }\r\n  });\r\n  return el2Clean.children[0];\r\n};\r\n\r\n// get restricted tags\r\n// optionally emphasize a tag in the reporting [emphasizeTag]\r\nconst emphasize = str => `***${str}***`;\r\nconst getRestricted = emphasizeTag =>\r\n  Object.entries(cleanupTagInfo)\r\n    .reduce((acc, [key, value]) =>\r\n      !value.allowed &&\r\n      [...acc, (emphasizeTag && key === emphasizeTag ? emphasize(key) : key)] ||\r\n      acc\r\n      , []);\r\n\r\n/**\r\n * Set/unset permission for creation of a specific tag. Exposed as <code>JQL.setTagPermission</code>.\r\n * @member setTagPermission\r\n * @function\r\n * @param tagName {string} the tag to set allowance for, e.g. <code>link</code> or <code>iframe</code>.\r\n * <br><b>Note</b>: when the tag does not exist in <code>cleanupTagInfo</code>, nothing happens.\r\n * @param allowed {boolean} true: can use tag, false: can not use tag.\r\n */\r\n// set [allowed] state (boolean) for [tagName] (string)\r\nconst setTagPermission = (tagName, allowed = false) => {\r\n  if (cleanupTagInfo[tagName]) {\r\n    cleanupTagInfo[tagName] = {\r\n      ...cleanupTagInfo[tagName.toLowerCase()],\r\n      allowed: allowed,\r\n    };\r\n  }\r\n};\r\n\r\n// get or set currently disallowed attributes regular expression\r\n// noinspection JSUnusedGlobalSymbols\r\nconst getOrSetrestrictedAttributes = attrsRegExp => {\r\n  if (attrsRegExp && attrsRegExp instanceof RegExp) {\r\n    notAllowedAttributes = attrsRegExp;\r\n  }\r\n  return notAllowedAttributes;\r\n};\r\n\r\nexport {cleanupHtml, getRestricted, setTagPermission, getOrSetrestrictedAttributes, allowUnknownHtmlTags};\r\n", "// noinspection JSUnusedGlobalSymbols,JSUnresolvedFunction,JSCheckFunctionSignatures\r\n// noinspection JSUnusedGlobalSymbols\r\n\r\n/**\r\n * Helper methods\r\n * @module Helpers\r\n */\r\n\r\nimport {setTagPermission} from \"./DOMCleanup.js\";\r\nimport {createElementFromHtmlString} from \"./DOM.js\";\r\nconst pad0 = (nr, n=2) => `${nr}`.padStart(n, `0`);\r\nconst cleanWhitespace = str => str.replace(/\\s{2,}/g, \" \");\r\nconst toZeroPaddedEuropeanDate = val => val.split(\"/\").reverse().map(v => `${v}`.padStart(2, \"0\")).join(\"/\");\r\nconst date2EuropeanDate = date => date.toISOString().split(\"T\").shift().split(\"-\").reverse().map(v => `${v}`.padStart(2, \"0\")).join(\"-\");\r\nconst displayHour = h => `${h}`.padStart(2, `0`) + `:00`;\r\nconst throwIf = (assertion = false, message = `Unspecified error`, ErrorType = Error) =>\r\n  assertion && (() => {\r\n    throw new ErrorType(message);\r\n  })();\r\n/**\r\n * Returns the current time, including milliseconds enclosed in square brackets,\r\n * e.q. <code>[12:32:34.346]</code>.\r\n * @returns {string}\r\n */\r\nconst time = () => ((d) => \r\n  `[${pad0(d.getHours())}:${pad0(d.getMinutes())}:${\r\n    pad0(d.getSeconds())}.${pad0(d.getMilliseconds(), 3)}]`)(new Date());\r\nconst Logger = (forceConsole = false) => {\r\n  let logEl;\r\n  if (typeof window === \"object\" && !forceConsole) {\r\n      logEl = document.querySelector(\"#JQLLog\") || (() => {\r\n        return document.body.insertAdjacentElement(\r\n          Object.assign(document.createElement('pre'), { id: \"log\" })\r\n        );\r\n      })();\r\n  return (...logLines) => {\r\n      if (logLines.length < 1) {\r\n        logEl.textContent = \"\";\r\n      } else {\r\n        logLines.forEach(s => logEl.textContent += `${s}\\n`);\r\n      }\r\n      logEl.normalize();\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Trunctate a html string (e.g. from <code>[element]outerHTML</code>)\r\n * to a single line with a maximum length\r\n * @param str {string} The html string\r\n * @param maxLength {Number} The length to truncate to (default: 120)\r\n * @returns {string}\r\n */\r\nconst truncateHtmlStr = (str, maxLength = 120) => str.trim()\r\n  .substr(0, maxLength)\r\n  .replace(/>\\s+</g, `><`)\r\n  .replace(/</g, `&lt;`)\r\n  .replace(/\\s{2,}/g, ` `)\r\n  .replace(/\\n/g, `\\\\n`) + (str.length > maxLength ? `&hellip;` : ``).trim();\r\n\r\n/**\r\n * Split up a given time (in milliseconds) to days/hours/minutes/seconds/milliseconds\r\n * @param milliseconds {Number} The number of milliseconds (e.g. from <code>new Date().getTime()</code>)\r\n * @returns {{hours: number, seconds: number, minutes: number, days: number, milliSeconds: number}}\r\n */\r\nconst time2Fragments = (milliseconds) => {\r\n  milliseconds = Math.abs(milliseconds);\r\n  let secs = Math.floor(Math.abs(milliseconds) / 1000);\r\n  let mins = Math.floor(secs / 60);\r\n  let hours = Math.floor(mins / 60);\r\n  let days = Math.floor(hours / 24);\r\n  const millisecs = Math.floor(Math.abs(milliseconds)) % 1000;\r\n\r\n  return {\r\n    days: days,\r\n    hours: hours % 24,\r\n    minutes: mins % 60,\r\n    seconds: secs % 60,\r\n    milliSeconds: millisecs,\r\n  };\r\n};\r\n\r\n/**\r\n * Generic function to check for duplicates with certain keys\r\n * within an array of objects\r\n * @param data {Array} The array\r\n * @param keys {string[]} The keys to filter on\r\n * @returns {boolean}\r\n */\r\nfunction hasDuplicatesForKeys(data, ...keys) {\r\n  let check = new Set();\r\n  data.forEach( d => check.add( keys.map( k => d[k] ).join(``) ) );\r\n  return [...check].length < data.length;\r\n}\r\n\r\n/**\r\n * Simple even/odd checker\r\n * @param nr {Number} the input number to check\r\n * @returns {boolean}\r\n */\r\nconst isEven = nr => !(nr & 1);\r\n\r\nconst shuffleLuckyNumbers = n => {\r\n  const shuffleFisherYates = (array) => {\r\n    let i = array.length;\r\n    while (i--) {\r\n      const ri = Math.floor(Math.random() * i);\r\n      [array[i], array[ri]] = [array[ri], array[i]];\r\n    }\r\n    return array;\r\n  }\r\n  return shuffleFisherYates([...Array(n)].map((...[, i]) => i+1 <= n ? i+1 : i + 1 - n));\r\n};\r\n// no map or forEach, to keep it (a bit) faster\r\nconst parseAllToTemplate = (objects2Parse, intoTemplate, fallback = String.fromCharCode(0)) => {\r\n  let lines = [...Array(objects2Parse.length)];\r\n  for (let i = 0; i < objects2Parse.length; i += 1) {\r\n    lines[i] = parseTemplate(intoTemplate, objects2Parse[i], fallback);\r\n  }\r\n  return lines.join(\"\");\r\n};\r\n\r\nconst randomStringExtension = () => {\r\n  if (String.getRandom) {\r\n    return;\r\n  }\r\n  const characters = [...Array(26)]\r\n    .map((x, i) => String.fromCharCode(i + 65))\r\n    .concat([...Array(26)].map((x, i) => String.fromCharCode(i + 97)))\r\n    .concat([...Array(10)].map((x, i) => `${i}`));\r\n  const getCharacters = excludes =>\r\n    excludes && characters.filter(c => !~excludes.indexOf(c)) || characters;\r\n\r\n  String.getRandom = (len = 12, excludes = []) => {\r\n    const chars = getCharacters(excludes);\r\n    return [...Array(len)]\r\n      .map(() => chars[Math.floor(Math.random() * chars.length)])\r\n      .join(\"\");\r\n  };\r\n  // html element-id's can not start with a number\r\n  String.createRandomHtmlElementId = (len = 12, excludes = []) => {\r\n    const charsWithoutNumbers = getCharacters(excludes.concat('0123456789'.split(\"\")));\r\n    const firstChr = charsWithoutNumbers[Math.floor(Math.random() * charsWithoutNumbers.length)];\r\n    return firstChr.concat(String.getRandom(len - 1, excludes));\r\n  };\r\n};\r\n\r\n/**\r\n * Get frequencies for all elements of [arr]\r\n * If [arr] is not an Array, just returns it\r\n * @param arr {Array}\r\n * @returns {Object|Array}\r\n */\r\nconst frequencies = arr =>\r\n  Array.isArray(arr) && arr.reduce((acc, curr) => ({...acc, [curr]: -~acc[curr]}), {}) || arr;\r\n\r\n/**\r\n * Repeat a given string [n] times\r\n * @param str {string} The string to repeat\r\n * @param n {Number} The number of time to repeat the string\r\n * @example\r\n * console.log(repeat(`-`, 10));\r\n * // logs: ----------\r\n * @returns {string}\r\n */\r\nconst repeat = (str, n) => Array(n + 1).join(str);\r\nconst parseTemplate = (template, valuesMapping, fallback = String.fromCharCode(0)) =>\r\n  template.replace(/{[^}]+}/g, (match) =>\r\n    valuesMapping[match.slice(1, -1)] || fallback || match);\r\nconst addCssIfNotAlreadyAdded = (cssId, styleSheetLocation) => {\r\n  const fileOrigin = /^file:/i.test(location.href);\r\n  setTagPermission(\"link\", true);\r\n  if (![...document.styleSheets].find(sheet => sheet.id === cssId)) {\r\n    const cssLink = createElementFromHtmlString(`\r\n        <link id=\"${cssId}\" href=\"${fileOrigin ? \"https:\" : \"\"}${styleSheetLocation}\" \r\n          type=\"text/css\" rel=\"stylesheet\"/>`);\r\n    document.querySelector(\"head\").appendChild(cssLink);\r\n  }\r\n  setTagPermission(\"link\", false);\r\n};\r\n\r\nconst initDefault = (value, defaultValue, ...includeFalsies) => {\r\n  const empty = value => includeFalsies &&\r\n    includeFalsies.filter(v =>\r\n      value !== undefined && isNaN(value) ? isNaN(v) : v === value).length\r\n      ? false : Boolean(value) === false;\r\n  return empty(value) ? defaultValue : value;\r\n};\r\n\r\n/**\r\n * Convert a camel-cased term to dashed string, e.g. for style rule keys\r\n * @example\r\n * toDashedNotation(`marginRight`); //=> `margin-right`\r\n * toDashedNotation(`borderTopLeftRadius`); //=> `border-top-left-radius`\r\n * @param str2Convert {string} The (property)string to convert\r\n * @returns {string}\r\n */\r\nconst toDashedNotation = str2Convert => str2Convert.replace(/[A-Z]/g, a => `-${a.toLowerCase()}`.toLowerCase());\r\n\r\n/**\r\n * Convert a dashed term to camelCased string e.g.\r\n * @example\r\n * toUndashedNotation(`margin-right`); //=> `marginRight`\r\n * toUndashedNotation(`border-top-left-adius`); //=> `borderTopLeftRadius`\r\n * @param str2Convert {string} The (property)string to convert\r\n * @returns {string}\r\n */\r\nconst toUndashedNotation = prop => [...prop.toLowerCase()]\r\n  .reduce( (acc, v) => {\r\n    const isDash = v === `-`;\r\n    acc = {...acc, s: acc.s.concat(isDash ? `` : acc.nextUpcase ? v.toUpperCase() : v)};\r\n    acc.nextUpcase = isDash;\r\n    return acc;\r\n  }, {s: '', nextUpcase: false}).s;\r\n\r\n/**\r\n * Is [obj] really an object (and not a <code>Date</code> or <code>Array</code>)?\r\n * @param obj {Object}\r\n * @returns {boolean|false|number}\r\n */\r\nconst isObjectAndNotArray = obj =>\r\n  (obj.constructor !== Date &&\r\n    !Array.isArray(obj) && JSON.stringify(obj) === \"{}\") ||\r\n  obj.constructor !== String && Object.keys(obj).length;\r\n\r\nconst importAsync = (url, callback) => import(url).then(callback);\r\nconst createDeepCloneExtension = () => {\r\n  const isImmutable = val =>\r\n    val === null || val === undefined || [String, Boolean, Number].find(V => val.constructor === V);\r\n  const isObjectAndNotArray = obj =>\r\n    (obj.constructor !== Date && !Array.isArray(obj) && JSON.stringify(obj) === \"{}\") || Object.keys(obj).length;\r\n  const cloneArr = arr => arr.reduce( (acc, value) =>\r\n    [...acc, isObjectAndNotArray(value) ? cloneObj(value) : value], []);\r\n  const isCyclic = obj => {\r\n    try {\r\n      JSON.stringify(obj);\r\n    } catch(err) {\r\n      return err.message;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  function cloneObj(obj) {\r\n    const cyclic = isCyclic(obj);\r\n    return cyclic ? {\r\n        error: `Object clone error: the structure is cyclic and can not be cloned, sorry.`,\r\n        initial: obj } :\r\n      Object.keys(obj).length === 0 ? obj :\r\n        Object.entries(obj)\r\n          .reduce( (acc, [key, value]) => ( {\r\n            ...acc,\r\n            [key]:\r\n              Array.isArray(value)\r\n                ? cloneArr(value) :\r\n                !isImmutable(value) && isObjectAndNotArray(value)\r\n                  ? cloneObj(value)\r\n                  : value && value.constructor\r\n                  ? new value.constructor(value)\r\n                  : value } ),  {} );\r\n  }\r\n  Object.clone = cloneObj;\r\n};\r\n\r\n/**\r\n * <b>Todo</b> use Number.toLocaleString is way simpler, check for edge cases\r\n * @param number\r\n * @param locale\r\n * @returns {*|string}\r\n */\r\nconst groupDigits = (number, locale = \"DecimalComma\") => {\r\n  const separators = {\r\n    DecimalDot: { thousands: \",\", decimal: \".\" },\r\n    DecimalComma: { thousands: \".\", decimal: \",\" },\r\n  };\r\n  locale = Object.keys(separators).find(v => v === locale) ? locale : \"DecimalComma\";\r\n\r\n  return number.constructor !== Number ? number : (() => {\r\n    const precision = (number, len) => number.toFixed(12).split(\".\").pop().slice(0, len);\r\n    const separateIntegerPart = numberPart => {\r\n      let n = [...numberPart];\r\n      let i = -3;\r\n\r\n      while (n.length + i > 0) {\r\n        n.splice(i, 0, separators[locale].thousands);\r\n        i -= 4;\r\n      }\r\n\r\n      return n.join(``);\r\n    };\r\n    const parts = `${number}`\r\n      .split(/[.,]/)\r\n      .reduce((acc, val, i) =>\r\n        ({ ...acc, [i < 1 ? \"integer\" : \"decimal\"]: (i < 1 ? val : precision(number, val.length)) }), {});\r\n\r\n    return `${separateIntegerPart(parts[\"integer\"])}${\r\n      parts.decimal ? `${separators[locale].decimal}${parts.decimal}` : ``}`;\r\n  })();\r\n};\r\n\r\nconst curry = fn => {\r\n  const curryFn = (...args1) => args1.length >= fn.length ? fn(...args1) : (...args2) => curryFn(...args1, ...args2);\r\n  return curryFn;\r\n};\r\nconst infiniteCurry = (fn, seed) => {\r\n  const reduceValue = (args, seedValue) =>\r\n    args.reduce((acc, a) => fn.call(fn, acc, a), seedValue);\r\n  const next = (...args) =>\r\n    (...x) =>\r\n      !x.length ? reduceValue(args, seed) : next(...args, reduceValue(x, seed));\r\n  return next();\r\n};\r\nconst clipBoardFactory = elementId  => {\r\n  return (str = \"-1\") => {\r\n    const el = (() => {\r\n      const ta = Object.assign(\r\n        document.createElement(`textarea`), {\r\n          id: elementId,\r\n          readonly: true,\r\n          value: str,\r\n          style: `position:absolute;left:-9999px`, }\r\n      );\r\n      document.body.appendChild(ta);\r\n      return ta;\r\n    })();\r\n    el.select();                    // Select the <input> content\r\n    document.execCommand('copy');   // Copy - only works as a result of a user action (e.g. click events)\r\n    document.body.removeChild(el);  // Remove the <input> element\r\n  }\r\n};\r\nconst tryParseJson = jsonTrialValue => {\r\n  if (!jsonTrialValue) { return null; }\r\n  try {\r\n    return JSON.parse(jsonTrialValue);\r\n  } catch (err) {\r\n    return jsonTrialValue;\r\n  }\r\n};\r\n/**\r\n * @typedef storage\r\n * @description A helper for <code>localStorage</code>.\r\n * @property get {function} (key:string) retrieve item with [key].\r\n * @property object {function} see <code>getObject</code>.\r\n * @property getObject {function} alias for <code>storage.object</code>.\r\n *  (key:string) retrieve item [key] where value is JSON and return as parsed Object.\r\n *  <br>If parsing did not succeed (aka, value is not or not valid JSON) this returns the plain value.\r\n *  @property set {function} (key:string, value: string) create a <code>localStorage</code>\r\n *  item with [key] and [value].\r\n *  @property setJSON {function} (key:string, value: Object) create a <code>localStorage</code> item with [key]/\r\n *  and [value] where value is an Object (and will be converted to JSON).\r\n *  @property remove {function} (key: string) remove item with key [key] from <code>localStorage</code>.\r\n *  @property clear {function}: remove evertything from <code>localStorage</code>\r\n */\r\nconst storage = {\r\n  get: key => localStorage.getItem(key),\r\n  object: key => tryParseJson(localStorage.getItem(key)), // backward compatibility\r\n  getObject: key => tryParseJson(localStorage.getItem(key)),\r\n  set: (key, value) => localStorage.setItem(key, value),\r\n  setJson: (key, object) => localStorage.setItem(key, JSON.stringify(object)),\r\n  remove: key => localStorage.removeItem(key),\r\n  clear: () => localStorage.clear()\r\n};\r\n\r\n// see also: https://stackblitz.com/edit/typescript-mmrre8?file=index.ts\r\nconst round2NDecimals = (input, decimals = 2, toString = false) => {\r\n  // just return input value if it's not a recognizable number\r\n  if (input === null ||\r\n        input.constructor === Boolean ||\r\n        isNaN(+input)) { return input; }\r\n\r\n  const currentNOfDecimals = (String(input).split(\".\")[1] || ``).length - 1;\r\n  // recurse per decimal if necessary\r\n  const converted = currentNOfDecimals > decimals\r\n    ? round2NDecimals( +( `${Math.round( parseFloat( `${input}e${currentNOfDecimals}` )  )}e-${\r\n        currentNOfDecimals}` ), decimals )\r\n    : +( `${Math.round( parseFloat( `${input}e${decimals}` )  )}e-${decimals}` );\r\n\r\n  return toString ? converted.toFixed(decimals) : converted;\r\n};\r\n\r\nexport {\r\n  cleanWhitespace,\r\n  toZeroPaddedEuropeanDate,\r\n  date2EuropeanDate,\r\n  displayHour,\r\n  throwIf,\r\n  Logger,\r\n  time2Fragments,\r\n  parseAllToTemplate,\r\n  parseTemplate,\r\n  randomStringExtension,\r\n  addCssIfNotAlreadyAdded,\r\n  repeat,\r\n  initDefault,\r\n  createDeepCloneExtension,\r\n  groupDigits,\r\n  curry,\r\n  infiniteCurry,\r\n  clipBoardFactory,\r\n  storage,\r\n  tryParseJson,\r\n  round2NDecimals,\r\n  importAsync,\r\n  time,\r\n  isObjectAndNotArray,\r\n  toDashedNotation,\r\n  toUndashedNotation,\r\n  truncateHtmlStr,\r\n};\r\n", "// some DOM plumbing\r\n// noinspection JSUnresolvedVariable,JSCheckFunctionSignatures\r\n\r\nimport {\r\n  cleanupHtml,\r\n  getRestricted,\r\n  setTagPermission,\r\n  allowUnknownHtmlTags } from \"./DOMCleanup.js\";\r\nimport {truncateHtmlStr} from \"./Helpers.js\";\r\n\r\n/**\r\n * Methods for manipulating the <code>Document Object [Model]</code> (aka <code>DOM</code>)\r\n * @Module DOM\r\n */\r\n\r\n/**\r\n * The possible positions of elements to insert (<code>HTMLElement.insertAdjacent[HTML/HTMLElement]</code>).\r\n * @typedef adjacents\r\n * @property BeforeBegin {string} before element\r\n * @property AfterBegin {string} before first child\r\n * @property BeforeEnd {string} after last child\r\n * @property AfterEnd {string} after element\r\n */\r\nconst adjacents = {\r\n  BeforeBegin: \"beforebegin\",\r\n  AfterBegin: \"afterbegin\",\r\n  BeforeEnd: \"beforeend\",\r\n  AfterEnd: \"afterend\" };\r\n\r\n/**\r\n * Create a HTML element from a html string in memory.\r\n * @param htmlString {string} The HTML string to use\r\n * <br><b>Note</b>: the html is sanizited\r\n * @returns {HTMLElement|undefined} {HTMLElement|undefined}\r\n */\r\nconst htmlToVirtualElement = htmlString => {\r\n  const placeholder = Object.assign(document.createElement(\"div\"), { id:\"placeholder\", innerHTML: htmlString.trim() });\r\n\r\n  return placeholder.childNodes.length\r\n    ? cleanupHtml(placeholder)\r\n    : undefined;\r\n};\r\n\r\n/**\r\n * Add a <code>HTMLElement</code> to the document\r\n * @param elem {HTMLElement} The element to add\r\n * @param root {HTMLElement} The root element the element should be added to (default: document.body)\r\n * @param position {string} the position where the element must end up (default <code>beforeend</code>)\r\n */\r\nconst element2DOM = (elem, root = document.body, position = adjacents.BeforeEnd) => {\r\n  if (elem) {\r\n    if (elem instanceof HTMLElement) {\r\n      return root.insertAdjacentElement(position, elem);\r\n    }\r\n    if (elem instanceof Comment) {\r\n      root.insertAdjacentHTML(position, `<!--${elem.textContent}-->`);\r\n      return elem;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Convert a html string to an instance of <code>HTMLElement</code>.\r\n * <br><b>Note</b>: the resulting element is always sanitized using the\r\n * attrbutes/tags settings. Use <code>DOM.element2DOM</code> to fysically\r\n * insert/append etc. it into your DOMtree\r\n * @param htmlStr {string} The html to convert to <code>HTMLElement</code>\r\n * e.g. <code>&lt;p id=\"id\" class=\"someClass\">Hello &lt;span style=\"color: green\">world&lt;/span>&lt;/p></code>\r\n * @returns {HTMLElement|Comment} the newly created <code>HTMLElement</code> instance or nothing\r\n * (in case of creating a html comment)\r\n */\r\nconst createElementFromHtmlString = htmlStr => {\r\n  htmlStr = htmlStr.trim();\r\n  let nwElem = htmlToVirtualElement(htmlStr);\r\n\r\n  if (htmlStr.startsWith(`<!--`) && htmlStr.endsWith(`-->`)) {\r\n    return document.createComment(htmlStr.replace(/<!--|-->$/g, ''));\r\n  }\r\n  \r\n  if (!nwElem.children.length) {\r\n      return document.createComment(`JQL element creation error! ${\r\n        truncateHtmlStr(htmlStr, 100)} => not valid or not allowed`);\r\n  }\r\n\r\n  return nwElem.children[0];\r\n};\r\n\r\nexport {\r\n  getRestricted,\r\n  setTagPermission,\r\n  createElementFromHtmlString,\r\n  element2DOM,\r\n  cleanupHtml,\r\n  allowUnknownHtmlTags,\r\n  adjacents as insertPositions,\r\n};\r\n", "// derived from https://testbed.nicon.nl/showFiddle/ehd2710f\r\n// noinspection JSValidateJSDoc\r\nimport {toDashedNotation} from \"./Helpers.js\";\r\n\r\n/**\r\n * Add or change style rules in a <code>&lt;style></code> element, added to the\r\n * header of the enclosing document if not already done so\r\n * @module Styling\r\n */\r\nconst createStyle = cssId => {\r\n  const theLink = Object.assign(\r\n    document.createElement(`style`), { id: cssId, type: `text/css` } );\r\n  document.querySelector(`head`).appendChild(theLink);\r\n  return theLink;\r\n}\r\nconst getOrCreateStyleSheet = cssId =>\r\n  (document.querySelector(`#${cssId}`) || createStyle(cssId)).sheet;\r\n\r\nconst compareSelectors = (s1, s2) => s1.replace(`::`, `:`) === s2.replace(`::`, `:`);\r\nconst setRule = (rule, values) =>\r\n  Object.entries(values)\r\n    .forEach( ([prop, nwValue = \"\"]) => rule.style.setProperty(toDashedNotation(prop), nwValue) );\r\n/**\r\n * change or create some css rule in an existing or dynamically created stylesheet (id: cssId) in the document\r\n * @param selector {string} the (css) selectorText, like <code>ul li.inActive</code>, <code>.someClass</code> etc.\r\n * @param styleValues {Object} an object with CSSStyleDeclarations\r\n * <br><b>Note</b>: enclose a string value of `content` in quotes (e.g. <code>&#123;content: `'Some string'`&#125;</code>)\r\n * <br><b>Note</b>: rule keys should be valid (e.g. <code>&#123;marginRight: `0.3rem`&#125;</code>\r\n * or <code>&#123;\"margin-right\": `0.3rem`&#125;</code>)\r\n * @param cssId {string|undefined} id of the css stylesheet (to create or retrieve), default \"customCSS\"\r\n * @example\r\n * // assume changeRuleset is imported as setStyleRule\r\n * setStyleRule(\".myClass\", {color: \"#c0c0c0\", padding: \"0 4px 0 15px\"}, \"YesItsMyCss\");\r\n * //           ^ someRule  ^                                             ^\r\n * //                       ^ styleProps                                  ^\r\n * //                                                                     ^ id of the stylesheet\r\n */\r\nfunction changeCssStyleRule(selector, styleValues = {}, cssId=\"customCSS\") {\r\n  if (!styleValues ||\r\n    Array.isArray(styleValues) ||\r\n    styleValues.constructor !== Object ||\r\n    Object.keys(styleValues).length < 1) {\r\n    return;\r\n  }\r\n\r\n  const styleSheet = getOrCreateStyleSheet(cssId);\r\n  const ruleSet = styleSheet.cssRules;\r\n\r\n  if (ruleSet) {\r\n    let rule = [...ruleSet].find(r => compareSelectors(r.selectorText, selector));\r\n\r\n    if (!rule) {\r\n      styleSheet.insertRule(`${selector} {}`, styleSheet.cssRules.length || 0);\r\n      rule = ruleSet[styleSheet.cssRules.length-1];\r\n    }\r\n\r\n    setRule(rule, styleValues);\r\n  }\r\n}\r\nexport default changeCssStyleRule;", "// noinspection JSUnusedLocalSymbols,JSCheckFunctionSignatures,JSValidateJSDoc,JSUnresolvedVariable\r\n// noinspection JSUnresolvedVariable\r\n\r\nimport {hex2RGBA} from \"./JQLExtensionHelpers.js\";\r\nimport {isObjectAndNotArray,} from \"./Helpers.js\"\r\nimport setStyle from \"./Styling.js\";\r\n\r\n//#region collection lambda'style\r\n/**\r\n * @module\r\n * @description These lambda functions will be used to loop through every element\r\n * of an ExendedNodelist instance. The loop always returns the instance, so\r\n * every instance method is chainable.\r\n * <p><b>Notes</b></p><ul>\r\n *  <li>All methods are <i>chainable</i>.\r\n *  <li><code>(implicit)</code> means the parameter should not be provided in the caller\r\n *  <br>so: <code>[instance].toggleClass(<s>someHTMLElement,</s> `someClass`)</code>\r\n *  </ul>\r\n * @example\r\n * // presume $ is the alias for ExtendedNodeList\r\n * $(`.shouldBeRed`)\r\n *   .css({color: red})\r\n *   .setData({isRed: `yes`});\r\n * // so, every element with className `shouldBeRed` within\r\n * // the instance collection will be styled inline (with red color)\r\n * // and it will contain a data-attribute [data-is-red=\"yes\"]\r\n */\r\n\r\n/**\r\n * toggle className (on/off) of all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param className {string} the class name to toggle (eg 'hidden')\r\n */\r\nconst toggleClass = (el, className) => {\r\n  el.classList.toggle(className);\r\n};\r\n\r\n/**\r\n * toggle individual style properties for all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * properties must be key-value pairs\r\n * Note: this may fail, because browsers may reformat\r\n * style values in their own way. See the color stuff\r\n * for example. Use rgba if you want to toggle opacity\r\n * for a color too\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param keyValuePairs {Object} e.g. &#123;marginRight: '12px'&#125;\r\n */\r\nconst toggleStyleFragments = (el, keyValuePairs) =>\r\n  el && Object.entries(keyValuePairs).forEach(([key, value]) => {\r\n    if (value instanceof Function) {\r\n      value = value(el);\r\n    }\r\n\r\n    if (/color/i.test(key)) {\r\n      value = value.startsWith(`#`)\r\n        ? hex2RGBA(value)\r\n        : value.replace(/(,|,\\s{2,})(\\w)/g, (...args) => `, ${args[2]}`);\r\n    }\r\n\r\n    el.style[key] = `${el.style[key]}` === `${value}` ? \"\" : value;\r\n  });\r\n\r\n/**\r\n * Remove some attribute from all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param name {string} the attribute name\r\n */\r\nconst removeAttr = (el, name) => el && el.removeAttribute(name);\r\n\r\n/**\r\n * Toggle attribute [name] with [value] for all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param name {string} attribute name (e.g. 'title')\r\n * @param value {string} attribute value to set\r\n */\r\nconst toggleAttr = (el, name, value) =>\r\n  el && el.hasAttribute(name)\r\n    ? el.removeAttribute(name)\r\n    : el.setAttribute(name, value);\r\n\r\n/**\r\n * remove content for all elements of the collection\r\n * of the ExtendedNodeList instance\r\n\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n */\r\nconst empty = el => el && (el.textContent = \"\");\r\n\r\n/**\r\n * alias for empty\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n */\r\nconst clear = el => empty(el);\r\n\r\n/**\r\n * swap [classname] with [...nwClassnames] of all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * enables replacing a class name with one or more class name(s)\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param className {string} the className to replace\r\n * @param nwClassNames {...string} the class name(s) to replace [className] with\r\n */\r\nconst replaceClass = (el, className, ...nwClassNames) => {\r\n  console.log(className, nwClassNames);\r\n  el.classList.remove(className);\r\n  nwClassNames.forEach(name => el.classList.add(name));\r\n}\r\n\r\n/**\r\n * remove all elements of the collection\r\n * of the ExtendedNodeList instance from the DOM tree\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n */\r\nconst remove = el => el.remove();\r\n\r\n/**\r\n * remove [classNames] from all elements of the collection\r\n * of the ExtendedNodeList instance. Class names can be one\r\n * or more strings\r\n\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param classNames {...string} one or more class names\r\n */\r\nconst removeClass = (el, ...classNames) =>\r\n  classNames.forEach(cn => el.classList.remove(cn));\r\n\r\n/**\r\n * add [classNames] to all elements of the collection\r\n * of the ExtendedNodeList instance. Class names can be one\r\n * or more strings\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param classNames {...string} one or more class names\r\n */\r\nconst addClass = (el, ...classNames) =>\r\n  el && classNames.forEach(cn => el.classList.add(cn));\r\n\r\n/**\r\n * show all elements of a collection\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n */\r\nconst show = el => el.style.display = ``;\r\n\r\n/**\r\n * hide all elements of a collection\r\n\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n */\r\nconst hide = el => el.style.display = `none`;\r\n\r\n//(el, show) => el.style.display = show ? `` : `none`;\r\n\r\n/**\r\n * set data-attribute for all elements of the collection\r\n * of the ExtendedNodeList instance.\r\n * attributes must be key-value pairs\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param keyValuePairs {Object} Object e.g. &#123;isSet: 'true'&#125;\r\n * <br><b>Note</b> do <i>not</i> use dashed keys but camelcase if you\r\n * need to split up the dataset. <b>wrong</b>: <code>no-code</code>, <b>right</b>: <code>noCode</code>.\r\n * The latter will be <i>rendered</i> as <code>`data-no-code`</code> in HTML, but not in js-code.\r\n */\r\nconst setData = (el, keyValuePairs) => {\r\n  // noinspection JSValidateTypes\r\n  el && isObjectAndNotArray(keyValuePairs) &&\r\n  Object.entries(keyValuePairs).forEach(([key, value]) => el.dataset[key] = value);\r\n}\r\n\r\n/**\r\n * Set attribute or property values for all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param keyValuePairs {Object} Object e.g. &#123;title: 'I am Groot'&#125;\r\n */\r\nconst assignAttrValues = (el, keyValuePairs) =>\r\n  el && Object.entries(keyValuePairs).forEach(([key, value]) => {\r\n    if (key.startsWith(`data`)) {\r\n      setData(el, {[key]: value});\r\n    }\r\n\r\n    if (key.toLowerCase() === \"class\") {\r\n      value.split(/\\s+/).forEach(v => el.classList.add(`${v}`))\r\n    }\r\n\r\n    if (value.constructor === String) {\r\n      el[key] = value;\r\n    }\r\n  });\r\n\r\n/**\r\n * Get or set attributes for all elements of the collection\r\n * of the ExtendedNodeList instance\r\n * attributes must be key-value pairs\r\n * style and data-attributes must also be key-value pairs\r\n * @param el {HTMLElement} (implicit [ExtendedNodeList instance].collection[i]) an element from the collection\r\n * @param keyOrObj {string|Object} Object e.g. &#123;color: '#c0c0c0'&#125;\r\n * @param value {string} some value\r\n * @returns {*|string}\r\n */\r\nconst attr = (el, keyOrObj, value) => {\r\n  if (!el) {\r\n    return true;\r\n  }\r\n\r\n  if (value !== undefined) {\r\n    keyOrObj = {[keyOrObj]: value};\r\n  }\r\n\r\n  if (!value && keyOrObj.constructor === String) {\r\n    return el.getAttribute(keyOrObj);\r\n  }\r\n\r\n  Object.entries(keyOrObj).forEach(([key, value]) => {\r\n    const keyCompare = key.toLowerCase().trim();\r\n\r\n    if (keyCompare === `style`) {\r\n      return css(el, value, undefined);\r\n    }\r\n\r\n    if (keyCompare === `data`) {\r\n      return setData(el, value);\r\n    }\r\n\r\n    if (value instanceof Object) {\r\n      return assignAttrValues(el, value);\r\n    }\r\n\r\n    return el.setAttribute(key, value);\r\n  });\r\n}\r\n\r\n/**\r\n * Style the elements of the collection of an ExtendedNodeList instance <i>inline</i>,\r\n * so <code>&lt;div style=\"[the style from parameters]\"></code>.\r\n * Preferably use key-value pairs\r\n * @param el {HTMLElement} (implicit) current ExtendedNodeList instance\r\n * @param keyOrKvPairs {Object|string} Object e.g. <code>&#123;marginRight: '12px'&#125</code>,\r\n * or string e.g. <code>\"marginRight\"</code>\r\n * <br>key may be: `paddingRight` or `\"padding-right\"`\r\n * @param value {string|undefined} if value is not <code>undefined</code>,\r\n * keyOrKvPairs should be a string too\r\n * <br>If the value should be empty (reset: e.g. <code>padding: \"\"</code>), use a dash \"-\"\r\n * @returns {ExtendedNodeList|string} ExtendedNodeList instance, so chainable\r\n */\r\nconst styleInline = (el, keyOrKvPairs, value) => {\r\n  if (value && keyOrKvPairs.constructor === String) {\r\n    keyOrKvPairs = {[keyOrKvPairs]: value || \"none\"};\r\n  }\r\n\r\n  if (!Array.isArray((keyOrKvPairs)) && keyOrKvPairs.constructor === Object) {\r\n    Object.entries(keyOrKvPairs).forEach(([key, value]) => el.style[key] = value);\r\n  }\r\n};\r\n\r\n/**\r\n * Style the elements of a collection of the ExtendedNodeList\r\n * instance <i>within a custom style sheet</i>, using an intermediate class.\r\n * <br><b>Note</b>: the intermediate <code>className</code> starts with`jQLCreated_`.\r\n * There will be one intermediate class name per element. Subsequent .css calls will\r\n * change the rules for that class name.\r\n * <br>Preferably use key-value pairs, even when assigning a single property.\r\n * @example\r\n * // presume $ is the alias for ExtendedNodeList\r\n * $(`<p>`).css({marginLeft: `12px`, color: `green`, borderLeft: `2px solid red`})\r\n * // the document will now contain <p class=\"JQLCreated_[a random string]]\"></p>\r\n * // use your own class name\r\n * $(`<p>`).css({className: `leftRedBorder`, marginLeft: `12px`, color: `green`, borderLeft: `2px solid red`});\r\n * // the document will now contain <p class=\"leftRedBorder\"></p>\r\n * @param el {HTMLElement} (implicit) current ExtendedNodeList instance\r\n * @param keyOrKvPairs {Object|string} Object or string e.g. <code>&#123;marginRight: '12px'&#125;</code>\r\n * or <code>'margin-right'</code>\r\n * <br>key or string may be: `paddingRight` or `\"padding-right\"`\r\n * <br><b>Note</b>: if you want to use your own class name (so not a random name),\r\n * include a <code>className</code> property in the Object. See example.\r\n * @param value {string|undefined} if value is not <code>undefined</code>, keyOrKvPairs should be a string too\r\n * <br>If the value should be empty (reset: e.g. <code>padding: \"\"</code>), use a dash \"-\"\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst css = (el, keyOrKvPairs, value) => {\r\n  if (value && keyOrKvPairs.constructor === String) {\r\n    keyOrKvPairs = {[keyOrKvPairs]: value === \"-\" ? \"\" : value};\r\n  }\r\n  let nwClass = undefined;\r\n\r\n  if (keyOrKvPairs.className) {\r\n    nwClass = keyOrKvPairs.className;\r\n    delete keyOrKvPairs.className;\r\n  }\r\n\r\n  const classExists = ([...el.classList].find(c => c.startsWith(`JQLCreated`) || nwClass && c === nwClass));\r\n  nwClass = classExists || nwClass || `JQLCreated_${String.createRandomHtmlElementId(12)}`;\r\n  setStyle(`.${nwClass}`, keyOrKvPairs, `JQLCustomCSS`);\r\n  el.classList.add(nwClass);\r\n};\r\n\r\n//#endregion collection lambda's\r\nconst extendedNodeListCollectionLamdas = {\r\n  toggleClass, addClass, removeClass, attr, removeAttr,\r\n  toggleAttr, toggleStyleFragments, show, hide, empty, remove,\r\n  replaceClass, clear, setData, css, styleInline\r\n};\r\n\r\nexport default extendedNodeListCollectionLamdas;", "// noinspection JSValidateJSDoc\r\n/**\r\n * A factory to create, wrap and store event handler lambda's for\r\n * elements in the enclosing document\r\n * @module HandlerFactory\r\n * @exports handlerFactory\r\n */\r\n\r\nlet handlers = {};\r\n\r\n/**\r\n * Handler method for an array of handlers per event type.\r\n * <i>Per event type</i> (e.g. <code>click</code>, <code>change</code> etc.) this is\r\n * the one and only handler that is added to the document Object\r\n * So:<ul>\r\n * <li>All handlers are delegated.</li>\r\n * <li>For every <code>Event.type</code> there will be exactly one\r\n * handler, added to the document.</li>\r\n * <li><code>metaHandler</code> iterates\r\n * over the (wrapped) handler lambda's created with the\r\n * <code>createHandlerForHID</code> factory.</li></ul>\r\n * @param evt {Event} the event sent by the browser\r\n */\r\nconst metaHandler = evt => handlers[evt.type].forEach(handler => handler(evt));\r\n\r\n/**\r\n * Wraps a handler (from $([]).on/ON/delegate) and returns\r\n * a new function.\r\n * @param extCollection {ExtendedNodeList} the ExentedNodeList instance\r\n * @param HID {string} the Handler id: '[data-hid=...]' or some selector like '#something'\r\n * - this determines execution or not of the callback lambda\r\n * @param callback {Function} the callback lambda\r\n * @returns {Function} the wrapped callback lambda\r\n */\r\nconst createHandlerForHID = (extCollection, HID, callback) => {\r\n  return evt => {\r\n    const target = evt.target.closest(HID);\r\n\r\n    if (target) {\r\n      return callback(new extCollection.constructor(target), evt);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * add listener for event type if it's not existing in the handlers Object\r\n * @param type {string} the event type (e.g. <code>click</code>, <code>focusin</code> etc)\r\n */\r\nconst addListenerIfNotExisting = type =>\r\n  !Object.keys(handlers).find(registeredType => registeredType === type) &&\r\n  document.addEventListener(type, metaHandler);\r\n\r\n/**\r\n * The result of <code>HandlerFactory</code> is\r\n * a method to wrap, store and link event handlers to elements\r\n * in the document.\r\n * @todo add possibility to delete handlers\r\n * <br>See <a href=\"./JQLExtensions.js.html#line496\">ExtendedNodeListExtensions.delegate</a>\r\n * code for usage.\r\n */\r\nexport default (extCollection, type, HIDselector, callback) => {\r\n  addListenerIfNotExisting(type);\r\n  const fn = createHandlerForHID(extCollection, HIDselector, callback);\r\n  handlers = handlers[type]\r\n    ? {...handlers, [type]: handlers[type].concat(fn)}\r\n    : {...handlers, [type]: [fn]};\r\n};", "//noinspection JSCheckFunctionSignatures,JSUnresolvedFunction,JSUnusedGlobalSymbols,JSUnresolvedVariable,ES6UnusedImports,JSIncompatibleTypesComparison,JSClosureCompilerSyntax,DuplicatedCode\r\n\r\n//#region ExtendedNodeList lambda's\r\nimport {createElementFromHtmlString} from \"./DOM.js\";\r\nimport {loop, addHandlerId, isVisible} from \"./JQLExtensionHelpers.js\";\r\nimport handlerFactory from \"./HandlerFactory.js\";\r\n// only to enable a 'type' for documentation\r\nimport {randomStringExtension} from \"./Helpers.js\";\r\nimport setStyle from \"./Styling.js\";\r\n\r\nrandomStringExtension();\r\nconst ExtendedNodeList = {dummy: `JSDoc dummy 'type'`};\r\n/**\r\n * All extension methods for <code>ExtendedNodeList</code> where looping may not be\r\n * an option. See (the source of)\r\n * <a href=\"./module-ExtensionHelpers.html#~initializePrototype\">ExtensionHelpers > initializePrototype</a>.\r\n * <p><b>Notes</b></p>\r\n *  <ul><li>Most methods are <i>chainable</i>.\r\n *  build.cmd<li><code>[...].css</code></a> is a collection method, not in this file but also chainable, see\r\n *  <a href=\"./module-ExtendedNodeListCollectionExtensions.html#~css\">the documentation there</a>.\r\n *  <li><code>(implicit)</code> means the parameter should not be provided in the caller</ul>\r\n * @module\r\n * @example\r\n * import $ from \"JQueryLike.js\";\r\n * // chainability means:\r\n * $(`<div id=\"helloworld\">`)\r\n *  .text(`Example: hello ... world`)\r\n *  .append($(`<span> OK</span>`))\r\n *  .css({\r\n *    marginTop: `0.5rem`,\r\n *    border: `3px solid green`,\r\n *    padding: `5px`,\r\n *    fontSize: `1.2em`,\r\n *    display: `inline-block`, })\r\n *  .find$(`span`)\r\n *  .css({className: `okRed`, color: `red`});\r\n *  // result (class names are partly random):\r\n *  // <div id=\"helloworld\" class=\"JQLCreated_YZ5XnwbCEGxH\">Example: hello ... world<span class=\"okRed\"> OK</span></div>\r\n */\r\n\r\n/**\r\n * Get or set textContent the first element in the\r\n * the collection of [extCollection] and return\r\n * either a string from the joined array of text\r\n * values from all elements in the collection or\r\n * ExtendedNodeList instance.\r\n * overwrites current textContent of the first element,\r\n * or appends the text to it.\r\n * <br><b>Note</b>: uses textContent, so no html here\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param textValue {string|undefined} the text to inject. No value returns the property value.\r\n * @param append {boolean} appends textValue if true, otherwise destructive\r\n * @returns {ExtendedNodeList|string} ExtendedNodeList instance\r\n * or (if <code>textValue</code> is empty) the property value.\r\n */\r\nconst text = (extCollection, textValue, append) => {\r\n  const el = extCollection.first();\r\n\r\n  if (!el) {\r\n    return extCollection;\r\n  }\r\n\r\n  if (!textValue) {\r\n    return el.textContent;\r\n  } else if (append) {\r\n    el.textContent += textValue;\r\n  } else {\r\n    el.textContent = textValue;\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Alias for loop\r\n * @example\r\n * $(`#somediv`).each( (el, i) => ...);\r\n * // where $ = the alias for the ExtendedNodeList constructor\r\n */\r\nconst each = (extCollection, lambda) => loop(extCollection, lambda);\r\n\r\n/**\r\n * Get the value of a data-attribute for the first element\r\n * of the ExtendedNodeList instance\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param dataAttribute {string} some attribute, e.q. 'initial'\r\n * @param valueWhenFalsy {string|number|undefined} value when the attribute does not exist\r\n * @returns {string|number|undefined}\r\n */\r\nconst getData = (extCollection, dataAttribute, valueWhenFalsy) => {\r\n  const firstElem = extCollection.first();\r\n  return firstElem && firstElem.dataset[dataAttribute] || valueWhenFalsy;\r\n};\r\n\r\n/**\r\n * Is the collection of the current (implicit) ExtendedNodeList instance empty?\r\n * @param extCollection {ExtendedNodeList} current ExtendedNodeList\r\n * @returns {boolean}\r\n */\r\nconst isEmpty = extCollection => extCollection.collection.length < 1;\r\n\r\n/**\r\n * Checks the values of pseudo selectors :hidden, :visible or :disabled\r\n * <br><b>Todo</b>: really useful?\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param checkValue {string} one of :visibile, :hidden, :disabled\r\n * @returns {string|boolean}\r\n */\r\nconst is = (extCollection, checkValue) => {\r\n  const firstElem = extCollection.first();\r\n\r\n  if (!firstElem) {\r\n    return true;\r\n  }\r\n\r\n  switch (checkValue) {\r\n    case \":visible\": {\r\n      return isVisible(firstElem); // TODO\r\n    }\r\n    case \":hidden\":\r\n      return !isVisible(firstElem);\r\n    case \":disabled\":\r\n      return firstElem.getAttribute(\"readonly\") || firstElem.getAttribute(\"disabled\");\r\n    default:\r\n      return true;\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if (one of) [classNames] exist in the first element of the\r\n * ExtendedNodeList instance\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExentedNodeList instance\r\n * @param classNames {...string}\r\n * @returns {boolean} true if one of classNames exists in the elements' classList\r\n */\r\nconst hasClass = (extCollection, ...classNames) => {\r\n  const firstElem = extCollection.first();\r\n  return classNames.find(name => firstElem.classList.contains(name)) || false;\r\n};\r\n\r\n/**\r\n * Replace a child in the collection of an ExtendedNodeList instance\r\n * with something else\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param oldChild {HTMLElement|string} <code>HTMLElement</code> or selector string\r\n * @param newChild {HTMLElement} <code>HTMLElement</code> or\r\n * <code>ExtendedNodeList</code> instance\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst replace = (extCollection, oldChild, newChild) => {\r\n  const firstElem = extCollection.first();\r\n\r\n  if (newChild.constructor === extCollection.constructor) {\r\n    newChild = newChild.first();\r\n  }\r\n\r\n  if (firstElem && oldChild) {\r\n    oldChild = oldChild.constructor === String\r\n      ? firstElem.querySelector(oldChild)\r\n      : oldChild.constructor === extCollection.constructor\r\n        ? oldChild.first()\r\n        : oldChild;\r\n\r\n    if (oldChild && newChild) {\r\n      oldChild.replaceWith(newChild);\r\n    }\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Replace the collection of an ExtendedNodeList instance with something else\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param newChild {HTMLElement|ExtendedNodeList} <code>HTMLElement</code> or\r\n * <code>ExtendedNodeList</code> instance\r\n * @returns {ExtendedNodeList} <code>ExtendedNodeList</code> instance, so chainable\r\n * <br><b>Note:</b> the returned <code>ExtendedNodeList</code> instance is the replaced element.\r\n */\r\nconst replaceMe = (extCollection, newChild) => {\r\n  newChild = newChild instanceof HTMLElement ? new extCollection.constructor(newChild) : newChild;\r\n  extCollection.parent().replace(extCollection, newChild)\r\n  return newChild;\r\n};\r\n\r\n/**\r\n * Get or set the value of (the first element of)\r\n * the ExtendedNodeList instance, where the first\r\n * element is one of input or select HTMLElement\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param value2Set {string|undefined} string or nothing\r\n * @returns {string|undefined}\r\n */\r\nconst val = (extCollection, value2Set) => {\r\n  const firstElem = extCollection.first();\r\n  if (!firstElem) {\r\n    return;\r\n  }\r\n  if ([HTMLInputElement, HTMLSelectElement].includes(firstElem.constructor)) {\r\n    if (value2Set || typeof value2Set === \"string\") {\r\n      firstElem.value = value2Set;\r\n    }\r\n    return firstElem.value;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the direct parent node of the first element of\r\n * the ExtendedNodeList instance\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @returns {ExtendedNodeList} instance of ExtendedNodeList, so chainable\r\n */\r\nconst parent = extCollection => extCollection.first() &&\r\n  new extCollection.constructor(extCollection.first().parentNode) ||\r\n  extCollection;\r\n\r\n/**\r\n * Appends one ore more elements to the first element\r\n * of the instance collection (for real, in the DOM tree)\r\n * @param extCollection {...ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param elems2Append {...(HTMLElement|ExtendedNodeList|string)}\r\n * The element(s) to append. If string(s), should be valid html\r\n * @returns {ExtendedNodeList} instance of ExtendedNodeList, so chainable\r\n */\r\nconst append = (extCollection, ...elems2Append) => {\r\n  const firstElem = extCollection.first();\r\n\r\n  if (firstElem && elems2Append) {\r\n    elems2Append.forEach(elem => {\r\n      if (elem.constructor === String) {\r\n        new extCollection.constructor(elem, firstElem);\r\n      }\r\n      if (Array.isArray(elem.collection) && elem.collection.filter(v => v).length > 0) {\r\n        elem.collection.forEach(el => firstElem.appendChild(el))\r\n      }\r\n      if (elem instanceof HTMLElement || elem instanceof Comment) {\r\n        firstElem.appendChild(elem);\r\n      }\r\n    });\r\n  }\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Appends the collection of one ExtendedNodeList instance\r\n * to another instance, so injects the element(s) of\r\n * [extCollection] to the first element of [extCollection2AppendTo]\r\n * (for real, injected and visible in the DOM tree).\r\n * <br><b>Note</b>: this returns the appended instance,\r\n * so not extCollection2AppendTo.\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param extCollection2AppendTo {ExtendedNodeList} the instance to append to\r\n * @returns {ExtendedNodeList} initial instance of ExtendedNodeList, so chainable\r\n */\r\nconst appendTo = (extCollection, extCollection2AppendTo) => {\r\n  if (extCollection2AppendTo.constructor !== extCollection.constructor) {\r\n    extCollection2AppendTo = new extCollection.constructor(extCollection2AppendTo);\r\n  }\r\n\r\n  extCollection2AppendTo.append(extCollection);\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Injects an element before the first element\r\n * of the collection of an instance of ExtendedNodeList\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param elem {HTMLElement|ExtendedNodeList} the element to append\r\n * @param insertBeforeElem {ChildNode|string} optional: selector or first element of extCollection\r\n * @returns {ExtendedNodeList} instance of ExtendedNodeList, so chainable\r\n */\r\nconst insert = (extCollection, elem, insertBeforeElem) => {\r\n  const firstElem = extCollection.first();\r\n  \r\n  if (!firstElem) {\r\n    return extCollection;\r\n  }\r\n\r\n  if (insertBeforeElem) {\r\n    // noinspection JSIncompatibleTypesComparison\r\n    insertBeforeElem = insertBeforeElem.constructor === String\r\n      ? firstElem.querySelector(insertBeforeElem)\r\n      : insertBeforeElem.constructor === extCollection.constructor\r\n        ? insertBeforeElem.first()\r\n        : insertBeforeElem;\r\n  } else {\r\n    insertBeforeElem = firstElem.childNodes[0];\r\n  }\r\n\r\n  // noinspection JSIncompatibleTypesComparison\r\n  if (elem.constructor === extCollection.constructor) {\r\n    elem = elem.first();\r\n  }\r\n\r\n  firstElem.insertBefore(elem, insertBeforeElem);\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Retrieves a single element from an instance of ExtendedNodeList\r\n * and returns a new ExtendedNodeList instance from that element\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param indexOrSelector {number|string}the index of the instance collection\r\n * @returns {ExtendedNodeList} instance of ExtendedNodeList, so chainable\r\n */\r\nconst single = (extCollection, indexOrSelector = \"0\") => {\r\n  if (extCollection.collection.length > 0) {\r\n    if (isNaN(+indexOrSelector) && extCollection.find(indexOrSelector)) {\r\n      return extCollection.find$(indexOrSelector);\r\n    }\r\n    const index = +indexOrSelector;\r\n    return index < extCollection.collection.length\r\n      ? new extCollection.constructor(extCollection.collection[indexOrSelector])\r\n      : extCollection;\r\n  } else {\r\n    return extCollection;\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieve the first element of the ExtendedNodeList instance collection\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param asExtCollection {boolean} if true, return new ExtendedNodeList instance, else HTMLElement\r\n * true => return as new ExtendedNodeList instance, false: as raw HTMLElement\r\n * @returns {ExtendedNodeList|HTMLElement|undefined} ExtendedNodeList instance, HTMLElement or nothing\r\n */\r\nconst first = (extCollection, asExtCollection = false) => {\r\n  if (extCollection.collection.length > 0) {\r\n    return asExtCollection\r\n      ? extCollection.single()\r\n      : extCollection.collection[0];\r\n  }\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Retrieve first [el] from the collection of the ExtendedNodeList instance\r\n * and return it as a new ExtendedNodeList instance\r\n * (if it exists, otherwise undefined)\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param indexOrSelector {number} the collection index\r\n * @returns {ExtendedNodeList|undefined} ExtendedNodeList instance or nothing\r\n */\r\nconst first$ = (extCollection, indexOrSelector) => extCollection.single(indexOrSelector);\r\n\r\n/**\r\n * Find one or more elements within the ExtendedNodeList instance collection\r\n * using a css query (e.g. '.someClass')\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param selector {string} css selector\r\n * @returns {Array|NodeListOf}\r\n */\r\nconst find = (extCollection, selector) => {\r\n  const firstElem = extCollection.first();\r\n  return firstElem && firstElem.querySelectorAll(selector) || [];\r\n};\r\n\r\n/**\r\n * Find one or more elements within the ExtendedNodeList instance collection\r\n * using a css query (e.g. '.someClass') and return a new ExtendedNodeList instance\r\n * from it's result\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param selector {string} css selector\r\n * @returns {ExtendedNodeList|undefined} a new ExtendedNodeList instance or nothing\r\n */\r\nconst find$ = (extCollection, selector) => {\r\n  const firstElem = extCollection.first();\r\n  return firstElem && selector && new extCollection.constructor(firstElem.querySelector(selector));\r\n};\r\n\r\n/**\r\n * Get or set a property/attribute value of first element from\r\n * the ExtendedNodeList instance collection\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param property {string} (e.g. 'title')\r\n * @param value {string|undefined} If it has a value, then set the property value\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst prop = (extCollection, property, value) => {\r\n  const firstElem = extCollection.first();\r\n  if (firstElem && property in firstElem) {\r\n    firstElem[property] = value || firstElem[property];\r\n    return value ? extCollection : firstElem[property];\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Add handler lambda for an ExtendedNodeList instance.\r\n * <br>A handler id is created if applicable (addHandlerId)\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param type {string} event type (e.g. 'click')\r\n * @param callback {function} handler lambda\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst on = (extCollection, type, callback) => {\r\n  if (extCollection.collection.length) {\r\n    const cssSelector = addHandlerId(extCollection);\r\n    handlerFactory(extCollection, type, cssSelector, callback);\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Get or set (inner-) html of the first element in the\r\n * collection of [extCollection] and return\r\n * either a string from the joined array of text\r\n * values from all elements in the collection or\r\n * ExtendedNodeList instance.\r\n * overwrites current html of the first element,\r\n * or appends the value to it.\r\n * Note: the html is always sanitized (see DOMCleanup)\r\n * @todo split up (get, set)\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param htmlValue {string|undefined} string or nothing\r\n * @param append {boolean} appends the html if true, otherwise destructive\r\n * @returns {string|ExtendedNodeList} current ExtendedNodeList instance or\r\n * (if <code>htmlValue</code> is empty) the current (inner)html of the first\r\n * element.\r\n */\r\nconst html = (extCollection, htmlValue, append) => {\r\n  if (htmlValue === undefined) {\r\n    const firstEl = extCollection.first();\r\n    if (firstEl) {\r\n      return firstEl.innerHTML;\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  if (extCollection.collection.length) {\r\n    const el2Change = extCollection.first();\r\n    if (!el2Change) {\r\n      return \"\";\r\n    }\r\n    if (`{htmlValue}`.trim().length < 1) {\r\n      el2Change.textContent = \"\";\r\n    } else {\r\n      const nwElement = createElementFromHtmlString(`<div>${htmlValue}</div>`);\r\n\r\n      if (append) {\r\n        el2Change.innerHTML += nwElement.innerHTML;\r\n      } else {\r\n        el2Change.innerHTML = nwElement.innerHTML;\r\n      }\r\n    }\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Retrieves outer html for the first element of the ExtendedNodeList instance\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @returns {string|undefined}\r\n */\r\nconst outerHtml = extCollection => (extCollection.first() || {outerHTML: undefined}).outerHTML;\r\n\r\n/**\r\n * Sets/adds/removes html for an element within the collection\r\n * of the ExtendedNodeList instance (identified with a css query).\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param forQuery {string} a css query (e.g. `#someId`)\r\n * @param htmlString {string} the html string to replace or append to exististing.\r\n * <br><b>Note</b>: if the string is empty, the html is removed\r\n * <br><b>Note</b>: the html is always sanitized (see DOMCleanup)\r\n * @param append {boolean} if true html will be appended, otherwise destructive\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst htmlFor = (extCollection, forQuery, htmlString = \"\", append = false) => {\r\n  if (forQuery && extCollection.collection.length) {\r\n    const el2Change = extCollection.find$(forQuery);\r\n    if (!el2Change) {\r\n      return extCollection;\r\n    }\r\n\r\n    if (`{htmlValue}`.trim().length < 1) {\r\n      el2Change.textContent = \"\";\r\n      return extCollection;\r\n    }\r\n\r\n    const nwElement = createElementFromHtmlString(`<div>${htmlString}</div>`);\r\n    nwElement && el2Change.html(nwElement.innerHTML, append);\r\n  }\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Create event handler lambda(s)\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * <br><b>Note</b>: may be empty\r\n * @param type {string} event type (e.g. 'click')\r\n * @param cssSelector {string} e.g. '#someId'\r\n * @param callbacks {...function} one or more lambda functions\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst delegate = (extCollection, type, cssSelector, ...callbacks) => {\r\n  callbacks.forEach(callback =>\r\n    handlerFactory(extCollection, type, cssSelector, callback));\r\n\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Add handler lambda(s) for event [type] and\r\n * the ExtendedNodeList instance\r\n * @param extCollection {ExtendedNodeList} (implicit) current ExtendedNodeList instance\r\n * @param type {string} event type (e.g. 'click')\r\n * @param callbacks {...functions} one or more lambda functions\r\n * @returns {ExtendedNodeList} ExtendedNodeList instance, so chainable\r\n */\r\nconst ON = (extCollection, type, ...callbacks) => {\r\n  if (extCollection.collection.length) {\r\n    callbacks.forEach(cb => extCollection.on(type, cb));\r\n  }\r\n\r\n  return extCollection;\r\n};\r\n\r\n\r\nconst ExtendedNodelistLambdas = {\r\n    text,\r\n    each,\r\n    getData,\r\n    isEmpty,\r\n    is,\r\n    hasClass,\r\n    replace,\r\n    replaceMe,\r\n    val,\r\n    parent,\r\n    append,\r\n    appendTo,\r\n    insert,\r\n    single,\r\n    first,\r\n    first$,\r\n    find,\r\n    find$,\r\n    prop,\r\n    on,\r\n    html,\r\n    outerHtml,\r\n    htmlFor,\r\n    delegate,\r\n    ON,\r\n};\r\n\r\nexport default ExtendedNodelistLambdas;\r\n//#endregion ExtendedNodeList lambda's", "// noinspection JSCheckFunctionSignatures,JSUnresolvedVariable,JSUnusedGlobalSymbols,ES6UnusedImports,JSUnresolvedFunction,JSUnusedLocalSymbols\r\n\r\nimport {setStylingId4Log} from \"./JQLLog.js\";\r\nimport {randomStringExtension} from \"./Helpers.js\";\r\nimport extendedNodeListCollectionLamdas from \"./JQLCollectionExtensions.js\";\r\nimport ExtendedNodeListLambdas from \"./JQLExtensions.js\";\r\nimport {element2DOM, insertPositions} from \"./DOM.js\";\r\n\r\nconst ExtendedNodeList = {dummy: `JSDoc dummy 'type'`};\r\n\r\n//#region common helpers\r\n/**\r\n * Some helpers for JQL (module, extensions).\r\n * @module\r\n */\r\n// no comment\r\nconst isCommentNode = elem => elem && elem instanceof Comment;\r\nconst isHtmlString = input => input.constructor === String && /^<|>$/.test(`${input}`.trim());\r\nconst isArrayOfHtmlStrings = input => Array.isArray(input) && !input.some(s => !isHtmlString(s));\r\nconst ElemArray2HtmlString = elems => elems.filter(el => el).reduce((acc, el) => acc.concat(el.outerHTML), ``);\r\nconst checkInput = (input, self) =>\r\n  self.collection = !input ? [] :\r\n    input instanceof HTMLElement ? [input] : input instanceof NodeList\r\n      ? [...input] : input instanceof self.constructor\r\n        ? input.collection : undefined;\r\nconst setCollectionFromCssSelector = (input, root, self) => {\r\n  /** determine the root to query from */\r\n  const selectorRoot = root !== document.body && (input.constructor === String && input.toLowerCase() !== \"body\")\r\n    ? root : document;\r\n  self.collection = [...selectorRoot.querySelectorAll(input)];\r\n  return `(JQL log) css querySelector [${input}], output ${self.collection.length} element(s)`;\r\n};\r\n/**\r\n * iterator used for most extendedNodeListCollectionExtensions.\r\n * Also exposed as '[ExtCollection].each'\r\n * @param {ExtendedNodeList} extCollection the collection of the current ExtendedNodeList instance\r\n * @param {function} callback to use in the loop\r\n * @returns {ExtendedNodeList} instance, so chainable\r\n */\r\nconst loop = (extCollection, callback) => {\r\n  for (let i = 0; i < extCollection.collection.length; i += 1) {\r\n    callback(extCollection.collection[i], i);\r\n  }\r\n  return extCollection;\r\n};\r\n\r\n/**\r\n * Injects the collection to the DOM tree\r\n * @private\r\n * @param collection {Array} array of <code>HTMLElement</code>s (in memory),\r\n * i.e. the collection of the instance to return\r\n * @param root {HTMLElement} The root element to wich the collection should be injected to\r\n * @param position {insertPositions} The position to inject the element(s)\r\n * @returns {Array} an Array of injected <code>HTMLElement</code>s, maybe empty\r\n */\r\nconst inject2DOMTree = (collection = [], root = document.body, position = insertPositions.BeforeEnd) =>\r\n  collection.reduce((acc, elem) =>\r\n    elem && (elem instanceof HTMLElement || isCommentNode(elem))\r\n      ? [...acc, element2DOM(elem, root, position)] : acc, []);\r\n\r\n/**\r\n * Create a handlerId for Element.\r\n * if it does not already exist\r\n * @private\r\n * @param extCollection {ExtendedNodeList} current ExtendedNodeList instance\r\n * @returns {string} a css selector for the handler id\r\n */\r\nconst addHandlerId = extCollection => {\r\n  !(\"getRandom\" in String) && randomStringExtension();\r\n  const handleId = extCollection.first().dataset.hid || String.getRandom(8);\r\n  extCollection.setData({hid: handleId});\r\n  return `[data-hid=\"${handleId}\"]`;\r\n};\r\n\r\n/**\r\n * Determine the current visibility of a HTMLElement.\r\n * @param {HTMLElement} el some html element or a style property\r\n * @returns {boolean} true if visible, false if not\r\n */\r\nconst isVisible = function (el) {\r\n  const elStyle = el.style;\r\n  const computedStyle = getComputedStyle(el);\r\n  const invisible = [elStyle.visibility, computedStyle.visibility].includes(\"hidden\");\r\n  const noDisplay = [elStyle.display, computedStyle.display].includes(\"none\");\r\n  const offscreen = el.offsetTop < 0 ||\r\n    (el.offsetLeft + el.offsetWidth) < 0 ||\r\n    el.offsetLeft > document.body.offsetWidth;\r\n  const noOpacity = +computedStyle.opacity === 0 || +(elStyle.opacity || 1) === 0;\r\n  return !(offscreen || noOpacity || noDisplay || invisible);\r\n};\r\n\r\n/**\r\n * Retrieves key-value pairs from data-attributes\r\n * if applicable.\r\n * @param el {HTMLElement} the html element\r\n * @returns {Object|undefined} key value-pairs\r\n */\r\nconst getAllDataAttributeValues = el => {\r\n  const getKey = attr => attr.nodeName.slice(attr.nodeName.indexOf(`-`) + 1);\r\n  const data = [...el.attributes]\r\n    .filter(da => da.nodeName.startsWith(`data-`))\r\n    .reduce((acc, val) =>\r\n      ({...acc, [getKey(val)]: val.nodeValue}), {});\r\n  return Object.keys(data).length && data || undefined;\r\n};\r\n\r\n/**\r\n * Generic prototype initializer for JQL.\r\n * @param ctor {ExtendedNodeList} The ExtendedNodeList constructor\r\n */\r\nconst initializePrototype = ctor => {\r\n  // noinspection JSUnresolvedVariable\r\n  const proto = ctor.prototype;\r\n  Object.entries(ExtendedNodeListLambdas)\r\n    .forEach(([key, lambda]) => {\r\n      if (lambda instanceof Function) {\r\n        proto[key] = function (...args) {\r\n          return lambda(this, ...args);\r\n        };\r\n      }\r\n    });\r\n  Object.entries(extendedNodeListCollectionLamdas)\r\n    .forEach(([key, lambda]) => {\r\n      if (lambda instanceof Function) {\r\n        proto[key] = function (...args) {\r\n          return loop(this, el => lambda(el, ...args));\r\n        };\r\n      }\r\n    });\r\n  proto.isSet = true;\r\n  setStylingId4Log(proto.customStylesheetId);\r\n};\r\n\r\n//#endregion common helpers */\r\n\r\n//#region style color toggling helpers\r\n/**\r\n * Convert abbreviated hex color to full (eg #0C0 to #00CC00)\r\n * Uses in hex2RGBA\r\n * @param hex {string} the hexadecimal color code\r\n * @returns {string}\r\n */\r\nconst hex2Full = hex => {\r\n  hex = (hex.trim().startsWith(\"#\") ? hex.slice(1) : hex).trim();\r\n  return hex.length === 3 ? [...hex].map(v => v + v).join(\"\") : hex;\r\n};\r\n\r\n/**\r\n * Convert hex color to rgb(a) (eg #ffc to rgb(255, 255, 204)).\r\n * @param hex {string} the hexadecimal color code eg #dddd00\r\n * @param opacity {number} the opacity value (0 - 1, eg 0.5)\r\n * @returns {string}\r\n */\r\nconst hex2RGBA = function (hex, opacity = 100) {\r\n  hex = hex2Full(hex.slice(1));\r\n  const op = opacity % 100 !== 0;\r\n  return `rgb${op ? \"a\" : \"\"}(${\r\n    parseInt(hex.slice(0, 2), 16)}, ${\r\n    parseInt(hex.slice(2, 4), 16)}, ${\r\n    parseInt(hex.slice(-2), 16)}${op ? `, ${opacity / 100}` : \"\"})`;\r\n};\r\n\r\n//#endregion style color toggling helpers\r\nexport {\r\n  loop,\r\n  hex2RGBA,\r\n  initializePrototype,\r\n  isVisible,\r\n  addHandlerId,\r\n  isHtmlString,\r\n  isArrayOfHtmlStrings,\r\n  isCommentNode,\r\n  inject2DOMTree,\r\n  ElemArray2HtmlString,\r\n  checkInput,\r\n  setCollectionFromCssSelector,\r\n};\r\n", "// noinspection JSValidateJSDoc\r\n\r\n/**\r\n * A small module for logging in a fixed positioned JQLLog box\r\n * <br>Every line logged is preceded by the time it is logged (granularity: milliseconds)\r\n * The styling of the logbox happens via a <code>&lt;style></code> element, added to the\r\n * header of the enclosing document.\r\n * @module JQLLog\r\n */\r\nimport {createElementFromHtmlString, element2DOM, insertPositions } from \"./DOM.js\";\r\nimport setStyle from \"./Styling.js\";\r\nimport {time} from \"./Helpers.js\";\r\nimport {isVisible} from \"./JQLExtensionHelpers.js\";\r\n\r\n/**\r\n * defaultStyling is the styling used for a the box used for logging (a <code>HTMLFieldSetElement</code> element).\r\n * May be overridden by your own styles, but must use the id <code>#logBox</code>.\r\n */\r\nlet defaultStyling = {\r\n  \"#logBox\": {\r\n    minWidth: 0,\r\n    maxWidth: 0,\r\n    minHeight: 0,\r\n    maxHeight: 0,\r\n    opacity: 0,\r\n    border: `none`,\r\n    padding: 0,\r\n    overflow: `hidden`,\r\n    transition: `all 1s`,\r\n    position: `fixed`,\r\n  },\r\n  \"#logBox.visible\": {\r\n    backgroundColor: `white`,\r\n    position: `relative`,\r\n    zIndex: 5,\r\n    opacity: 1,\r\n    border: `1px dotted rgb(153, 153, 153)`,\r\n    minWidth: `97vw`,\r\n    minHeight: `20vh`,\r\n    maxWidth: `97vw`,\r\n    overflow: `auto`,\r\n    maxHeight: `20vh`,\r\n    margin: `1rem auto auto`,\r\n    padding: `0 8px 19px 8px`,\r\n  },\r\n  \"#logBox legend\": {\r\n    textAlign: `center`,\r\n    backgroundColor: `rgba(119, 119, 119, 1.0)`,\r\n    padding: `2px 10px`,\r\n    color: `rgba(255, 255, 255, 1.0)`,\r\n    font: `normal 12px/15px verdana, arial`,\r\n    boxShadow: `2px 1px 10px #777`,\r\n    borderRadius: `4px`,\r\n  },\r\n  \"#logBox legend:before\": {\r\n    content: `'JQL Logging'`,\r\n  },\r\n};\r\nlet defaultStylingId = `JQLCustomCSS`;\r\nlet useLogging = false;\r\nlet log2Console = false;\r\n/**\r\n * Add style classes for the JQLLog box to a custom css style element.\r\n * @param styles {Object} style rules Object, e.g. <code>&#123;margin: `0`, color: `green`&#125;</code>.\r\n * Default styles are in <code>defaultStyling</code>\r\n * @param cssId {string} the id of the custom style element (automagically created in the\r\n * header of the document in which JQL is used). Default is 'JQLCustomCSS'.\r\n */\r\nconst setStyling4Log = (styles = defaultStyling, cssId = defaultStylingId) => {\r\n  const exists = document.querySelector(cssId);\r\n  // this triggers rename (id) of existing stylesheet\r\n  if (exists) { exists.id = cssId; }\r\n    Object.entries(styles).forEach(([selector, style]) => setStyle(selector, style, cssId));\r\n};\r\n\r\nlet useHtml = false;\r\n\r\n/**\r\n * Use logging for debug (set on/off or show/hide the JQLLog box).\r\n * @typedef debugLog\r\n * @type {Object}\r\n * @property {function} isVisible Is the JQLLog box visible?\r\n * @property {function} on Activate logging for JQL.\r\n * @property {function} off Deactivate logging for JQL.\r\n * @property {function} hide Hide the JQLLog box.\r\n * @property {function} show Show the JQLLog box.\r\n * @property {function} toConsole Log to console.\r\n * @property {function} (getter) isOn is logging on?\r\n */\r\nconst debugLog = {\r\n  get isOn() { return useLogging; },\r\n  isVisible() {\r\n    const logBox = document.querySelector(`#logBox`);\r\n    return logBox && isVisible(logBox);\r\n  },\r\n  on() {\r\n    useLogging = true;\r\n    document.querySelector(`#logBox`).classList.add(`visible`);\r\n    JQLLog(`Logging started`);\r\n  },\r\n  off() {\r\n    JQLLog(`Logging stopped`);\r\n    document.querySelector(`#logBox`).classList.remove(`visible`);\r\n    useLogging = false;\r\n  },\r\n  toConsole(yes) {\r\n    log2Console = yes;\r\n    if (yes) {\r\n      document.querySelector(`#logBox`).classList.remove(`visible`);\r\n      useLogging = false;\r\n    }\r\n  },\r\n  hide() {\r\n    const logBox = document.querySelector(`#logBox`);\r\n    if (logBox) {\r\n      document.querySelector(`#logBox`).classList.remove(`visible`);\r\n    }\r\n  },\r\n  show() {\r\n    const logBox = document.querySelector(`#logBox`);\r\n    if (logBox) {\r\n      document.querySelector(`#logBox`).classList.add(`visible`);\r\n    }\r\n  },\r\n};\r\n\r\nconst createLogElement = () => {\r\n  const loggingFieldSet = `\r\n    <fieldset id=\"logBox\">\r\n      <legend></legend>\r\n      <${useHtml ? `div` : `pre`} id=\"jql_logger\"></pre>\r\n    </fieldset>`;\r\n  element2DOM(createElementFromHtmlString(loggingFieldSet), document.body, insertPositions.BeforeBegin);\r\n  return document.querySelector(`#jql_logger`);\r\n};\r\n\r\nconst logBox = document.querySelector(\"#jql_logger\") || createLogElement();\r\n\r\n/**\r\n * Create JQLLog entry/entries, preceded with the time of logging (millisecond granularity).\r\n * <br>If the local [useLogging] boolean is false, nothing is logged\r\n * <br> in JQL exposed as <code>JQL.log</code>\r\n * @param args {...(string|Object)} string(s) or Object(s) to print in the JQLLog box\r\n * * <br><b>Note</b> Objects are converted to JSON representation\r\n */\r\nconst JQLLog = (...args) => {\r\n    if (!useLogging) { return; }\r\n    const logLine = arg => `${arg instanceof Object ? JSON.stringify(arg, null, 2) : arg}\\n`;\r\n    args.forEach( arg => \r\n      logBox.insertAdjacentHTML(\r\n        `afterbegin`,\r\n        `${time()} ${logLine(arg)}`)\r\n    );\r\n};\r\n\r\nconst setStylingId4Log = id => defaultStylingId = id;\r\nexport { JQLLog, debugLog, setStylingId4Log, setStyling4Log };", "// noinspection JSUnusedLocalSymbols,JSUnusedGlobalSymbols,JSUnresolvedFunction,JSValidateJSDoc,JSUnresolvedVariable\r\n// noinspection JSUnresolvedFunction\r\n\r\nimport {\r\n  debugLog,\r\n  JQLLog,\r\n  setStyling4Log } from \"./JQLLog.js\";\r\n\r\nimport {\r\n  time,\r\n  truncateHtmlStr,\r\n} from \"./Helpers.js\";\r\n\r\nimport {\r\n  setTagPermission,\r\n  allowUnknownHtmlTags,\r\n} from \"./DOMCleanup.js\";\r\n\r\nimport {\r\n  createElementFromHtmlString,\r\n  insertPositions,\r\n} from \"./DOM.js\";\r\n\r\nimport setStyle from \"./Styling.js\";\r\n\r\nimport {\r\n  initializePrototype,\r\n  isHtmlString,\r\n  isArrayOfHtmlStrings,\r\n  inject2DOMTree,\r\n  isCommentNode,\r\n  ElemArray2HtmlString,\r\n  checkInput,\r\n  setCollectionFromCssSelector,\r\n} from \"./JQLExtensionHelpers.js\";\r\n\r\nconst customStylesheetId = `JQLCustomCSS`;\r\nconst logLineLength = 75;\r\n\r\n/**\r\n * The JQL core\r\n * @module JQL\r\n */\r\n// -------------------------------------------------------------------- //\r\n/**\r\n * The core constructor for creating and/or deliver a node(list), exposed as\r\n * <code>JQL</code>\r\n * <br>It delivers an instance of <code>ExtendedNodeList</code> containing a collection of\r\n * <code>HTMLElement</code>s (may be empty), for which a number of jquery-like extension methods is\r\n * available (e.g. <code>[instance].<b style=\"color:red\">addClass</b></code>).<br>When the parameter\r\n * contains html (e.g. <code>&lt;p class=\"someClass\">Hello wrld>&lt;/p></code>), the element(s) is/are\r\n * created and by default injected in de DOM tree unless [<code>root</code>] is a <code>HTMLBRElement</code>.\r\n * <br><b>Note</b>: any html creation triggers checking and sanitizing the html to prevent script injection etc.\r\n * @param input One of<ul>\r\n * <li><code>Node</code> list\r\n * <li><code>HtmlElement</code> instance\r\n * <li><code>ExtendedNodeList</code> instance\r\n * <li><code>string</code> css selector (e.g. <code>'#someElem'</code>).<br>\r\n * <b>Note</b>: up to selectors level 3 for most modern browsers,\r\n *  maybe level 4 (draft) for more advanced browsers\r\n * <br>(see selectors {@link https://drafts.csswg.org/selectors-3/ level 3}\r\n *  or {@link https://drafts.csswg.org/selectors-4/ level 4 draft})\r\n * <li><code>string</code> html element string (e.g. <code>'&lt;div>Hello&lt;/div>'</code>)\r\n * <li><code>Array</code> of <code>string</code>\r\n *  (e.g. <code>['&lt;span>Hello&lt;/span>', '&lt;span>world&lt;/span>']</code>)\r\n * </ul>\r\n * @param root {HTMLElement} The root element to which an element to create must be appended or inserted into/before/after\r\n * (see [position] parameter)<ul>\r\n * <li>Defaults to <code>document.body</code>\r\n * <li>If one or more elements is/are created they will not be inserted into the DOM tree\r\n * when [root] is an instance of <code>HTMLBRElement</code> (so <code>&lt;br></code>)</ul>\r\n * @param position {string} Position within or before/after the root where the element must be injected\r\n * relative to [root]\r\n * - e.g. 'afterbegin' (or import and use insertPositions from DOM.js)\r\n * @returns {ExtendedNodeList} An instance of ExtendedNodeList\r\n * @example\r\n * import $ from \"JQueryLike.js\";\r\n * $(document.querySelectorAll(`p`));\r\n * $(document.querySelector(`p.something`));\r\n * $($(`.something`));\r\n * $(`.something`);\r\n * $(`<p class=\"something\" id=\"ex1\">Hi. I am <b>Groot</b><p>`);\r\n * $([`<p class=\"something\" id=\"ex2\">Hi. I am <b>Groot</b><p>`, `<div id=\"Groot\">Yup, aren't you?</div>`]);\r\n * // extensions (most are chainable)\r\n * $(`#ex1`).text(`. Say no more`, true).addClass(`done`);\r\n * $(`#Groot`)\r\n *   .css({color: `green`, fontWeight: `bold`})\r\n *   .html(`<i>You are, really. And it's fine.</i>`, true);\r\n */\r\nconst ExtendedNodeList = function (\r\n  input,\r\n  root = document.body,\r\n  position = insertPositions.BeforeEnd) {\r\n\r\n  if (ExtendedNodeList.prototype.isSet === undefined) {\r\n    initializePrototype(ExtendedNodeList);\r\n  }\r\n\r\n  checkInput(input, this);\r\n\r\n  if (Array.isArray(this.collection)) {\r\n    return this;\r\n  }\r\n\r\n  try {\r\n    this.collection = [];\r\n    root = root instanceof ExtendedNodeList ? root.first() : root;\r\n    const isRawHtml = isHtmlString(input);\r\n    const isRawHtmlArray = isArrayOfHtmlStrings(input);\r\n    const shouldCreateElements = isRawHtmlArray || isRawHtml;\r\n\r\n    if (!shouldCreateElements) {\r\n      JQLLog(setCollectionFromCssSelector(input, root, this));\r\n      return this;\r\n    }\r\n\r\n    const logStr = (`(JQL log) raw input: [${\r\n      truncateHtmlStr(isRawHtmlArray ? input.join(``) : input, 80)}]`);\r\n\r\n    if (shouldCreateElements) {\r\n      [input].flat()\r\n        .forEach(htmlFragment => this.collection.push(createElementFromHtmlString(htmlFragment)));\r\n    }\r\n\r\n    if (shouldCreateElements && this.collection.length > 0) {\r\n      this.collection = !(root instanceof HTMLBRElement)\r\n        ? inject2DOMTree(this.collection, root, position).filter(el => !isCommentNode(el))\r\n        : this.collection;\r\n\r\n      JQLLog(`${logStr}\\n  Created (outerHTML truncated) [${\r\n        truncateHtmlStr(ElemArray2HtmlString(this.collection) || \"sanitized: no elements remaining\")\r\n          .substr(0, logLineLength)}]`);\r\n    }\r\n  } catch (error) {\r\n    const msg = `Caught jql selector or html error:\\n${error.stack ? error.stack : error.message}`;\r\n    debugLog.isOn && JQLLog(msg) || console.log(msg);\r\n  }\r\n}\r\n\r\nconst JQL = (...args) => new ExtendedNodeList(...args);\r\n\r\nObject.entries({\r\n  /**\r\n   * alias for <code>document.querySelector</code>\r\n   * @param selector {string} a css selector\r\n   * @returns {HTMLElement|null}\r\n   */\r\n  node: selector => document.querySelector(selector),\r\n\r\n  /**\r\n   * Alias for <code>document.querySelectorAll</code>\r\n   * @param selector {string} a css selector\r\n   * @returns {NodeListOf<*>}\r\n   */\r\n  nodes: selector => document.querySelectorAll(selector),\r\n\r\n  /**\r\n   * Create an ExtendedNodeList instance without injecting elements (so, collection elements in memory)\r\n   * <code>JQL.virtual</code>,\r\n   * @example\r\n   * import $ from \"JQueryLike.js\";\r\n   * const inMemoryParagraph = $.virtual(`<p>I am and I am not</p>`);\r\n   * // you won't see this in the DOM, but you can manipulate properties\r\n   * inMemoryParagraph.styleInline({color: `green`}).setData({IAmGreen: `yep`});\r\n   * $(`body`).append(inMemoryParagraph);\r\n   * // result: <p style=\"color:green\" data-i-am-green=\"yep\">I am and I am not</p>\r\n   * //                                ^ Note: stringified output from the browser\r\n   * // now, there it is\r\n   * $(`<div>Hello stranger. Try hovering me!</div>`).addClass(`something`);\r\n   * @poram html {string} a HTML string e.g. <code>&lt;div class=\"hi\">a div&lt;/div></code>\r\n   * @returns {ExtendedNodeList} An instance of ExtendedNodeList\r\n   */\r\n  virtual: html => new ExtendedNodeList(html, document.createElement(\"br\")),\r\n\r\n  /**\r\n   * Set style rules in the JQL custom stylesheet element\r\n   * <ul><li>The rules are written to a custom style sheet with id <code>#JQLCustomCSS</code> into the document\r\n   * <li>You can use pseudo selectors. In case of creating a rule with the <code>content</code> property\r\n   * be sure to quote the text value (see example)</ul>\r\n   * <code>JQL.setStyle</code>,\r\n   * @param selector {string} the selector e.g. <code>#someElem.someClass</code>\r\n   * @param ruleValues {Object} an object containing the rules for the selector\r\n   * @example\r\n   * import $ from \"JQueryLike.js\";\r\n   * $.setStyle(`body`, {font: `normal 12px/15px verdana, arial`, margin: `2em`});\r\n   * $.setStyle(`.something:hover:after`, {content: `' You hovered me!'`, color: `red`});\r\n   * // usage\r\n   * $(`<div>Hello stranger. Try hovering me!</div>`).addClass(`something`);\r\n   */\r\n  setStyle: (selector, ruleValues) => setStyle(selector, ruleValues, customStylesheetId),\r\n\r\n  /**\r\n   * Activate/deactivate/show/hide (debug-)logging\r\n   * <code>JQL.JQLLog</code>,\r\n   * see <a href=\"./module-Log.html\">Log (type: debugLog)</a>\r\n   */\r\n  debugLog,\r\n\r\n  /**\r\n   * Log stuff to the logger (if active)\r\n   * * <code>JQL.JQLLog</code>,\r\n   * see <a href=\"./module-JQLLog.html#~JQLLog\">JQL/JQLLog</a>\r\n   */\r\n  log: JQLLog,\r\n\r\n  /**\r\n   * Allow/disallow the use of certain HTML tags when creating elements using JQL\r\n   * <code>JQL.setTagPermission</code>,\r\n   * see <a href=\"./module-HTMLCleanup.html#~setTagPermission\">HTMLCleanup</a>\r\n   */\r\n  setTagPermission,\r\n\r\n  /**\r\n   * Allow/disallow unknown HTML tags\r\n   * <code>JQL.allowUnknownHtmlTags,</code>,\r\n   * see <a href=\"./module-HTMLCleanup.html\">HTMLCleanup</a>\r\n   */\r\n  allowUnknownHtmlTags,\r\n\r\n  /**\r\n   * Positions for use in insertAdjacentHTML(-Element)\r\n   * <code>JQL.insertPositions</code>,\r\n   * See <a href=\"module-DOM.html\">DOM (type: adjacents)</a>\r\n   */\r\n  insertPositions,\r\n\r\n  /**\r\n   * Set the styling for the logger element (<code>#logBox</code>)\r\n   * <code>JQL.setStyling4Log</code>,\r\n   * see <a href=\"./module-Log.html#~setStyling4Log\">Log.setStyling4Log</a>\r\n   */\r\n  setStyling4Log,\r\n\r\n  /**\r\n   * Current time helper\r\n   * <code>JQL.time</code>, see <a href=\"module-Helpers.html#~time\">Helpers.time</a>\r\n   */\r\n  time,\r\n  customStylesheetId,\r\n}).forEach(([methodKey, method]) => JQL[methodKey] = method);\r\n\r\nexport default JQL;"],
  "mappings": "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",
  "names": []
}
