{"jql_About":{"description":"This module (<b>JQ</b>uery<b>L</b>ike) was inspired by the idea that some JQuery was too good <a target=\"_blank\" href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">to ditch</a>.\n\nIt is developed in a modular fashion and uses plain ES20xx, so not really (or really not, take your pick) suitable for older browsers. \n\nThe module is written in a <i>classfree object oriented</i> fashion, inspired by a <a target=\"_blank\" href=\"https://youtu.be/XFTOG895C7c?t=2562\">Douglas Crockford presentation</a>.\n\nIt is <i>not</i> a replacement for <a target=\"_blank\" href=\"https://github.com/jquery/jquery\">JQuery</a>. Consider it a subset of JQuery <i>alike</i> methods to retrieve, create, modify or manipulate (collections of) HTML elements in your HTML document.\n\nThis document is completely built using JQL. Another example/demo-version can be found @<a href=\"https://kooi.dev/JQLDemo/\" target=\"_blank\">kooi.dev/JQLDemo</a>.\n\nIn the following you'll find documentation for usage of the module, divided into 4 chapters:\n\n<ul>\n<li><div data-action=\"jump2Nav\" data-jumpgroup=\"instance\" class=\"linkLike\">INSTANCE</div>: all methods applicable to a JQL <i>instance</i>;</li>\n<li><div data-action=\"jump2Nav\" data-jumpgroup=\"static\" class=\"linkLike\">STATIC</div>: JQL static module methods;</li>\n<li><div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">POPUP</div>: JQL includes a module to create (modal) popup messages;</li>\n<li><div data-action=\"jump2Nav\" data-jumpgroup=\"debuglog\" class=\"linkLike\">DEBUGLOG</div>: JQL includes a module to extensively log everything it does (you do with it).</li></ul>\nSome documentation contains example code. For all examples <code>$</code> is the imported JQL module (so <code>import $ from \"[location of JQL]\"</code>). Some examples can be run (use the [Try it] button). If elements are created/modified in an example, the result is shown within the item at hand and removed after a few seconds.\n\nThis documentation is currently <i><b>work in progress</b></i> ...\n\n<a target=\"_blank\" href=\"//github.com/KooiInc/JQL\"\n><img src=\"//sdn.nicon.nl/Tests/GitIcon.png\" class=\"gitLink\"\n>source code @Github</a>"},"instance_text":{"description":"Set the textcontent of all elements of the instance element collection. \n\nWhen <code>textValue</code> is empty, returns the current textcontent of the <i>first element</i> of the instance element collection.\nOtherwise returns the JQL Instance.","params":[{"textValue":"String"},{"append":"Boolean, default false"}],"returnValue":"String | JQL Instance"},"instance_each":{"description":"Loops through every element of the instance collection and applies the given callback function to it.\n\nThe signature of the callback function is <code>(element, [i]) => {...}</code>. Elements that are not <code>HTMLElement</code> (e.g. <code>Comment</code> or text nodes) are <i>not</i> processed.\n\nClick the [Try it] button twice and watch the method name headers for a demo.\n\n<example>\nconst mNameElems = $(`.methodName`);\nconst brown = `rgb(165, 42, 42)`;\nconst currentColor = mNameElems.computedStyle(`color`);\nmNameElems.each( el => $(el).style({color: currentColor === brown ? `` : brown}) );\n</example>\n<button class=\"exRunBttn\" data-action=\"eachEx\">Try it</button>","params":[{"cb":"Function. The lambda function to appy to every element of the collection."}],"returnValue":"JQL Instance"},"instance_remove":{"description":"Removes every element of the instance element collection, <i>or</i>, when <code>selector</code> is present, removes every child element from of the instance element collection for which the selector applies.\n\n<example>\n$(`p`).remove(); // => all <p> are removed from the document\n$(`p`).remove(`.toBeRemoved`); // => all <p.toBeRemoved> are removed from the document\n$(`p`).remove(`:not(.keepMe)`); // => all <p> except `<p.keepMe>` are removed from the document\n</example>","params":[{"selector":"string. A (valid) css selector string, e.g. <code>#someDiv.someClass</code>"}],"returnValue":"None"},"instance_computedStyle":{"description":"Retrieves the computed style for the given <code>property</code> the first element of the instance collection.\n\n<example>\n  $.editCssRule(`.redEx {color: red; font-weight: bold}`);\n  $(`<p class=\"redEx\">Hello!</p>`, /*[root element]*/);\n  popup.create(`$(\".redEx\").computedStyle(\"color\"): ${ $(`.redEx`).computedStyle(`color`) }\n  <br>$(\".redEx\").computedStyle(\"font-weight\"): ${ $(`.redEx`).computedStyle(`font-weight`) }`);\n</example>\n<button class=\"exRunBttn\" data-action=\"computedStyleEx\">Try it</button>","params":[{"property":"string. Style property string, e.g. <code>width</code>, <code>display</code>"}],"returnValue":"String | undefined"},"instance_isEmpty":{"description":"returns: <code>true</code> if the JQL Instance collection is empty, otherwise <code>false</code>.\n\n<b>Note</b>: alternatively you can use <code>[JQL instance].is.empty</code>.\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  <b>Hello</b>! <span></span></div>`,  /*[root element]*/);\npopup.create(`<code>someDiv.isEmpty()</code> =&gt; ${someDiv.isEmpty()}\n  <br><code>someDiv.find$(\"span:first-child\").isEmpty()</code> =&gt; ${\n    someDiv.find$(`span:first-child`).isEmpty()}`, () => $(`[data-id=\"tmpEx\"]`).remove());\n</example>\n<button class=\"exRunBttn\" data-action=\"isEmptyEx\">Try it</button>","params":[],"returnValue":"Boolean"},"instance_getData":{"description":"Retrieve the value of a data-attribute. When <code>valueWhenFalsy</code> is present, it will return that value if the data-attribute does not exist.\n\n<example>\nconst popup = $.popup();\nconst thisBttn = $(evt.target);\nconst action = thisBttn.getData(`action`);\nconst undef = thisBttn.getData(`nonexistent`);\nconst undefWithDefaultValue = thisBttn.getData(`nothing`, `NOCANDO`);\npopup.create([`action: ${action}`, `undef: ${undef}`, `undefWithDefaultValue: ${undefWithDefaultValue}`].join(`<br>`));\n</example>\n<button class=\"exRunBttn\" data-action=\"getDataEx\">Try it</button>","params":[{"dataAttribute":"string. The data-attribute to query, e.q. <code>width</code>"},{"valueWhenFalsy":"Any. The value to return when the data-attribute was not found."}],"returnValue":"Any | undefined"},"instance_is":{"description":"<code>[JQL instance].is</code> is a static property that returns an Object. To retrieve a property of that Object use <code>[JQL instance].is[property]</code>. If the JQL instance element collection is empty, the return values of all properties except <code>empty</code> will be \"n/a\".\n\n<code>[JQL instance].is</code> properties: \n\n<ul><li><code>writable</code>: is the first element of the JQL instance collection writable?</li>\n<li><code>visible</code>: is the first element of the JQL instance collection visible in the DOM?</li>\n<li><code>disabled</code>: is the first element of the JQL instance collection disabled?</li>\n<li><code>open</code>: is the first element of the JQL instance collection open (<code>&lt;details></code> or <code>&lt;dialog></code>)</li>\n<li><code>modal</code>: is the first element of the JQL instance collection modal (<code>&lt;dialog></code>)</li>\n<li><code>empty</code>: is the JQL instance element collection empty?</li>\n<li><code>virtual</code>: does the JQL instance only exist in memory?</li></ul>\n<example>\nconst inpDisabled = $(`<input id=\"disabledInput\" disabled type=\"text\" placeholder=\"I am not enabled\">`, /*[root element]*/);\nconst is = inpDisabled.is;\nconst features = [\n  `visible? ${is.visible}`,\n  `disabled? ${is.disabled}`,\n  `writable? ${is.writable}`,\n];\npopup.create(`<p>${features.join(`<br>`)}</p>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"isEx\">Try it</button>\n","params":[],"returnValue":"Object&lt;string, Boolean | string>"},"instance_hasClass":{"description":"For (the list of) className(s) determine if the first (root) element of the JQL Instance element collection contains (one of) the <code>classNames</code>.\n\n<example>\nconst tmpDiv = $(`<div class=\"one two tree\">Hello world</div>`);\npopup.create(\n  `<code>tmpDiv.hasClass(\"one\", \"tree\")</code> =&gt; ${tmpDiv.hasClass(\"one, tree\")}<br>\n   <code>tmpDiv.hasClass(\"one\", \"four\")</code> =&gt; ${tmpDiv.hasClass(\"one, four\")}<br>\n   <code>tmpDiv.hasClass(\"five\")</code> =&gt; ${tmpDiv.hasClass(\"five\")}`, () => $(`.one.two`).remove() );\n</example>\n<button class=\"exRunBttn\" data-action=\"hasClassEx\">Try it</button>","params":[{"...classNames":"string[]"}],"returnValue":"Boolean"},"instance_replace":{"description":"Replace [oldChild] (a DOM Element, css selector or a JQL instance) the root element of the instance element collection with a new JQL Instance","params":[{"oldChild":"JQL instance | HTMLElement | String. If String, a (valid) css selector. "},{"newChild":"JQL Instance"}],"returnValue":"JQL Instance"},"instance_replaceMe":{"description":"Replace the JQL Instance with a new JQL Instance. \n\n<b>Note</b>: If the new instance is <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"static_virtual\">virtual</div>, it will be added to the DOM tree on replacement.\n\n<example>\nconst oldDiv = $(`<div id=\"oldD\">I shall be replaced...<div>`, /*[root element]*/);\nconst newDiv = $.virtual(`<div id=\"newD\">I have replaced div#oldD!<div>`);\nsetTimeout(() => oldDiv.replaceMe(newDiv).style({color: `red`}), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"replaceMeEx\">Try it</button>","params":[{"newChild":"HTMLElement | JQL instance"}],"returnValue":"JQL Instance"},"instance_toDOM":{"description":"Add a 'virtual' element (an element created in memory, using the <code>[instance].virtual</code> method) to the DOM. Defaults to adding the element to the body, but <code>root</code> may be any element (if the DOM allows it). See <div class=\"linkLike\" data-jumpkey=\"static_virtual\" data-action=\"jump2Nav\">virtual</div> documentation for an example.","params":[{"root":"HTMLElement. Default <code>document.body</code>"},{"position":"String. One of \"beforeend\", \"afterbegin\", \"beforebegin\", \"afterend\". Default: \"beforeend\""}],"returnValue":"JQL Instance"},"instance_first":{"description":"Returns the first element of the JQL element collection or a new JQL Instance derived from the first element of the JQL Instance element collection. When <code>asJQLInstance</code> is true, the element is returned as a new JQL Instance (equivalent to <div data-action=\"jump2Nav\" data-jumpkey=\"instance_first$\" class=\"linkLike\">first$</div>), otherwise a <code>DOM Node</code>.\n\n<example>\nconst jqlElems = $(`#navigation li[data-key]`);\npopup.create($(`\n  <div>\n    <code>jqlElems.collection.length</code>: ${jqlElems.collection.length},<br>\n    outerHTML <code>jqlElems.first()</code>: ${jqlElems.first().outerHTML.replace(/</g, `&lt;`)}\n  </div>`));\n</example>\n<button class=\"exRunBttn\" data-action=\"firstEx\">Try it</button>\n","params":[{"asJQLInstance":"Boolean. Default false"}],"returnValue":"HTMLElement | JQL Instance"},"instance_append":{"description":"Appends one ore more elements to each element of the JQL Instance collection (for real, in the DOM tree).\n\nIf elems2Append consists of html string(s), they should contain valid html (e.g., no flow content in in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>). The HTML is always sanitized.\n\n<b>Note</b>: when the JQL Instance to append to is empty, nothing will happen.\n\n<example>\n$.editCssRule(`#tmpEx {color: green; font-weight: bold;}`);\n$(`<div>Hi there!</div>`, /*[root element]*/).append(`<div id=\"tmpEx\">I am the appended one ...</div>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"appendEx\">Try it</button>","params":[{"...elems2Append":"string[] | HTMLElement[]| Text[] | Comment[] | JQL Instance[]"}],"returnValue":"JQL Instance"},"instance_appendTo":{"description":"Appends the collection of one JQL instance to another instance, so injects the element(s) of [JQl instance element collection] to each element of <code>appendTo</code> (for real, injected and visible in the DOM tree).\n\n<b>Note</b>: this returns <code>appendTo</code> (so, the <i>parent</i> JQL Instance).\n\n<example>\n$.editCssRule(`#tmpEx {color: blue; font-weight: normal}`);\n$.editCssRule(`#tmpEx div {color: red; font-weight: bold}`);\nconst helloWorld = $(`<p id=\"tmpEx\">Hello World</p>`, /*[root element]*/);\nconst div2Append = $$(`<div>And bye again</div>`);\nsetTimeout(() => div2Append.appendTo(helloWorld), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"appendToEx\">Try it</button>","params":[{"appendTo":"JQL instance"}],"returnValue":"JQL Instance"},"static_delegate":{"description":"Create targeted event listeners/handlers. \n\n<b>Note</b>: <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/DOM_events\">non bubbling events</a> are delegated using <code>{capture: true}</code>. This concerns the following events:\n<ul>\n  <li><code>load</code></li>\n  <li><code>unload</code></li>\n  <li><code>scroll</code></li>\n  <li><code>focus</code></li>\n  <li><code>blur</code></li>\n  <li><code>DOMNodeRemovedFromDocument</code></li>\n  <li><code>DOMNodeInsertedIntoDocument</code></li>\n  <li><code>loadstart</code></li>\n  <li><code>progress</code></li>\n  <li><code>error</code></li>\n  <li><code>abort</code></li>\n  <li><code>load</code></li>\n  <li><code>loadend</code></li>\n  <li><code>pointerenter</code></li>\n  <li><code>pointerleave</code></li>\n  <li><code>readystatechange</code></li></ul>\nThe example creates a click listener/handler for the header of this chapter (\"delegate\"). \n\n<example>\n$.delegate(\n  `click`,\n  `#static_delegate`,\n    evt => {\n      if (!evt.target.dataset.after) {\n        evt.target.setAttribute(`data-after`, `1`);\n        return $.editCssRule(`\n          #${evt.target.id}::after {\n            content: \" HI! My name is U.S.E. Less. Click to add or remove me...\";\n            color: green; }` \n        );\n      }\n\n      $.removeCssRule(`#${evt.target.id}::after`);\n      return evt.target.removeAttribute(`data-after`);\n  }\n);\n$(`#static_delegate`).trigger(`click`);\n</example>\n<button class=\"exRunBttn\" data-action=\"staticDelegateEx\">Try it</button>","params":[{"type":"string. Event type (e.g. <code>click</code>) to listen for"},{"origin":"string. Optional css identifying the element to assign listener to (e.g. <code>#someId</code>)"},{"...handlers":"One or more lambda functions"}],"returnValue":"JQL Instance"},"instance_dimensions":{"description":"Retrieve the actual dimensions of the first (root) element in the instance element collection. It actually returns the result of <code>getBoundingClientRect</code>, see <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">MDN</a> for interpretation of the values.\n\n<b>Note</b>: dimensions is a <i>property</i>, not a function. Usage <code>[JQL instance].dimensions</code>.\n\n<example>\nconst dimElem = $(`<p>Hello, where am I at the moment?</p>`, /*[root element]*/)\n  .style({color: `red`, fontWeight: `bold`});\nconst dims = JSON.stringify(dimElem.dimensions, null, 2)\n  .replace(/[}{\"]/g, ``).trim().replace(/\\n/g, `<br>`);\npopup.create(dims);\n</example>\n<button class=\"exRunBttn\" data-action=\"dimEx\">Try it</button>","params":[],"returnValue":"(Object) DOMRect | undefined"},"instance_duplicate":{"description":"Duplicate a JQL instance to memory (default) or to DOM (append to <code>root</code>).\n\nThe elements within the instance are cloned, their id's are removed and the resulting NodeList is converted to a new JQL Instance.\n\n<b>Note</b> check the cloned nodes classList/properties/attributes: you may want to change them before injecting to DOM.\n\n<example>\nconst someElem = Object.assign(\n$.editCssRule(`.someClass`, {color: `brown`});\n$(`<div class=\"someClass\">hello</div>`, /*[root]*/).duplicate(true, /*[root]*/);\n$( `.someClass`, /*[root]*/ )\n  .append($.text(` world!`))\n  .prepend($.text(`We say: `))\n  .each(el => el.setAttribute(`id`, `_${ Math.floor(10000 + Math.random() * 10000).toString(16)}` ))\n  .duplicate(true, /*[root]*/)\n  .removeClass(`someClass`)\n  .addClass(`tmp`)\n  .text(` That's right folks. Bye!`, true);\n /** \n  output in DOM\n  <div class=\"someClass\" id=\"[randomId]\">We say: hello world!</div>\n  <div class=\"someClass\" id=\"[randomId]\">We say: hello world!</div>\n  <div class>We say: hello world! That's right folks. Bye!</div>\n  <div class>We say: hello world! That's right folks. Bye!</div> \n */\n</example>\n<button class=\"exRunBttn\" data-action=\"duplicateEx\">Try it</button>","params":[{"toDOM":"Boolean. Default <code>false</code>"},{"root":"HTMLElement. Default document.body"}],"returnValue":"JQL Instance"},"instance_css":{"description":"Style each element of the element collection of the JQL Instance <i>within</i> the custom style sheet (<code>&lt;style id=\"JQLStylesheet\"></code>), using an intermediate (generated, random) or given class name. Preferably use key-value pairs, even when assigning a single property.\n\n<b>Notes</b>\n\n<ul>\n<li>the intermediate className starts with <code>\"jQLClass-\"</code>. There will be one intermediate class name per element. Subsequent .css calls will modify the rule for the generated class name.</li>\n<li>using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code></li>\n</ul>\n\n<example>\n// no className\n$(`<p id=\"noClass\">Hello #1</p>`, /*[root element]*/)\n  .css({\n     paddingLeft: `4px`, \n     color: `white`, \n     backgroundColor: `#000` } );\npopup.create(`intermediate className: ${$.node(`#noClass`).classList.shift()}`)\n// className\n$(`<p class=\"leftRedBorder\">Hello #2</p>`, /*[root element]*/)\n  .css({\n     className: `leftRedBorder`, \n     paddingLeft: `4px`, \n     color: `green`, \n     borderLeft: `12px solid red` } );\n</example>\n<button class=\"exRunBttn\" data-action=\"cssEx\">Try it</button>","params":[{"keyOrKvPairs":"Object<string, string> | string. If you want to use a className for the css, add a <code>className</code> property to the Object."},{"value":"string | undefined. If <code>value</code> is a string, <code>keyOrKvPairs</code> must be a string too."}],"returnValue":"JQL Instance"},"instance_empty":{"description":"Remove contents for all elements of the JQL instance element collection.\n\nEquivalent to <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_clear\">clear</div>","params":[],"returnValue":"JQL Instance. An instance with elements without any content."},"instance_clear":{"description":"Remove contents for all elements of the JQL instance element collection.\n\n<example>\n$([`<p data-id=\"tmpEx\">I hope they won't remove this!</p>`,\n    `<div class='metoo'>Me too!</div>`], /*[root element]*/);\nsetTimeout( () => $(`[data-id=\"tmpEx\"]`).clear(), 1500);\nsetTimeout( () => $(`.metoo`).text(`The did it didn't they?`), 2500);\n</example>\n<button class=\"exRunBttn\" data-action=\"clearEx\">Try it</button>","params":[],"returnValue":"JQL Instance. An empty instance."},"instance_hide":{"description":"Hide each element of the element collection of the JQL instance.\n\n<b>Note</b>: hiding changes the css <code>display</code> property to \"none\". It may be more useful to use a <code>css class</code> for this.\n\n<example>\nconst cleanup = self => {\n  self[0].closest(`.divExClass`).remove();\n  $.removeCssRule(`.showHide`);\n  $.removeCssRule(`button#hide, button#show, button#cleanup`);\n};\n$.editCssRule(`.showHide { display: block; color: red; font-weight: bold; }`);\n$.editCssRule(`button#hide, button#show, button#cleanup { margin-right: 5px; }`);\nconst elem = $(`\n  <div class=\"divExClass\">\n    <span class=\"showHide\">Hello World!</span>\n  </div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"hide\">hide</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).hide() ) );\nelem.append($.virtual(`<button id=\"show\">show</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).show() ) );\nelem.append( $.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => cleanup(self) ) );\n</example>\n<button class=\"exRunBttn\" data-action=\"showHideEx\">Try it</button>","params":[],"returnValue":"JQL instance"},"instance_removeAttribute":{"description":"Remove some attribute from each element of the element collection of the JQL Instance.","params":[{"attrName":"string."}],"returnValue":"JQL Instance"},"instance_removeClass":{"description":"Remove <code>classNames</code> from for each element of the element collection of the JQL Instance. Class names can be one or more strings.\n\n<example>\n$.editCssRule(`.exTest { color: red; font-weight: bold; }`);\nconst exElem = $(`<div data-id=\"tmpEx\"><b>Hello</b> <span class=\"exTest\">World</span>!</div>`, /*[root element]*/);\nsetTimeout(() => exElem.find$(`span`).removeClass(`exTest`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"removeClassEx\">Try it</button>","params":[{"...classNames":"string[]. One or more classNames"}],"returnValue":"JQL Instance"},"instance_replaceClass":{"description":"Swap <code>className</code> with <code>nwClassnames</code> for each element of the element collection of the JQL Instance. Enables replacing a class name with one or more class name(s)\n\n<example>\nconst divEx = $(`<div class=\"divExClass\">Hello World!</div>`, /*[root element]*/);\n$.editCssRule(`.redEx { color: red; }`);\n$.editCssRule(`.redExUl { text-decoration: underline; }`);\nsetTimeout(() => divEx.replaceClass(`divExClass`, `redEx`, `redExUl`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"replaceClassEx\">Try it</button>","params":[{"className":"string. the className to replace  "},{"...nwClassNames":"string[]. The class name(s) to replace <code>className</code> with."}],"returnValue":"JQL Instance"},"instance_find":{"description":"Find one or more elements within the first (root) element of the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>).\n\n<example>\npopup.create($(`.docs`).find(`#instance_find`)?.[0].outerHTML.replace(/</g, `&amp;lt;`));\n</example>\n<button class=\"exRunBttn\" data-action=\"findEx\">Try it</button>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"NodeList | empty Array"},"instance_find$":{"description":"Find one or more elements within the JQL Instance collection using a css query (e.g. '.someClass')  starting from the root element of the collection, and return a new JQL Instance from it's result\n\nFind one or more elements within the first (root) element of the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>).\n\n<example>\npopup.create($(`.docs`).find$(`#instance_find_D`)?.outerHtml().replace(/</g, `&lt;`))\n//                                           ^ note #[...] css selector can not contain $\n</example>\n<button class=\"exRunBttn\" data-action=\"find_D_Ex\">Try it</button>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"JQL Instance"},"instance_first$":{"description":"Retrieve nth Element (Number) or element from selector (css selector) from the collection of the JQL Instance and return that as a new JQL Instance (if it exists, otherwise undefined).\n\n<example>\nconst fromQS = $(`.docs`).first$(`#instance_first_D`);\nconst first$WithIndexExample = () => popup.create($(`.docs h3`).first$(17).outerHtml().replace(/</g, `&lt;`));\npopup.create(fromQS.outerHtml().replace(/</g, `&lt;`), first$WithIndexExample);\n</example>\n<button class=\"exRunBttn\" data-action=\"first$Ex\">Try it</button>\n<example>\n// non existing ...\nconst jqlElem = $(`.docs`).first$(30001);\npopup.create(`<div>non existing: ${jqlElem.outerHtml()}</div>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"first$Ex2\">Try it</button>","params":[{"indexOrSelector":"Number | string. If string, a (valid) css selector."}],"returnValue":"JQL Instance"},"instance_on":{"description":"Add listener and handler lambda('s) for the JQL Instance root element.\n\nThe lambda signature is <code>[handler function](event, JQLInstance)</code>.\n\nSee <div data-action=\"jump2Nav\" data-jumpkey=\"instance_toggleClass\" class=\"linkLike\">the toggleClass documentation</div> for examplary usage.","params":[{"type":"string. The event type (e.g. 'click', `keyup`)"},{"...callback":"Function[]. One or more handler functions (lambda's)"}],"returnValue":"JQL Instance"},"instance_outerHtml":{"description":"Retrieves the complete html for the first (root) element of the JQL Instance.\n\n<example>\nconst exElem = $$(`<div data-id=\"tmpEx\"><b>Hello</b><span>World</span>!</div>`, /*[root element]*/);\npopup.create( `<code>exElem.outerHtml()</code> =&gt; ${exElem.outerHtml()}` );\n</example>\n<button class=\"exRunBttn\" data-action=\"outerHTMLEx\">Try it</button>","params":[],"returnValue":"string"},"instance_parent":{"description":"Get the direct parentNode of the first (root) element of the JQL Instance (as new JQL Instance).","params":[],"returnValue":"JQL Instance"},"instance_html":{"description":"Get (inner-) html of the first (root) element in the collection of the JQL instance3 <i>or</i> set html for each element of the collection.\n\nOverwrites current html of the elements, or appends (<code>append</code>: true) the value to it. \n\n<b>Note</b>: <code>htmlValue</code> is always sanitized.\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  Hello <span>world</span>\n</div>`, /*[root element]*/);\nsetTimeout(() => {\n  $(`[data-id=\"tmpEx\"] span`, , /*[root element]*/).html(`universe!`);\n  setTimeout(() => $(`[data-id=\"tmpEx\"] span`, /*[root element]*/).html(` And by again`, true), 1500);\n}, 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"htmlForEx\">Try it</button>","params":[{"htmlValue":"string. (valid) HTML string"},{"append":"Boolean. Default false"}],"returnValue":"string | JQL Instance"},"instance_htmlFor":{"description":"Sets/adds/removes html for an element within the collection of the JQL Instance (identified with a css query).\n\n<b>Note</b>: html from <code>htmlString</code> is always sanitized.\n\n<b>Note</b>: if <code>htmlString</code> is empty, the element content is removed.\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  Hello <span>world</span>\n</div>`, /*[root element]*/);\nsetTimeout(() => $(`[data-id=\"tmpEx\"]`).htmlFor(`span:first-child`, `universe!`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"htmlForEx\">Try it</button>","params":[{"forQuery":"string.  A (valid) css selector."},{"htmlString":"string. (valid) HTML string."},{"append":"Boolean. Default false"}],"returnValue":"JQL Instance"},"instance_prepend":{"description":"Injects one or more elements at the start of each element of the collection of a JQL Instance.\n\nWhen (one of) <code>elems2Prepend</code> is a HTML string, it should be valid html, otherwise nothing is prepended obviously (e.g., no flow content in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>).\n\nThe syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_append\">append</div>.\n\n<b>Note</b>: <code>elems2Prepend</code> are always sanitized.\n<b>Note</b>: when the JQL Instance to prepend to is empty, nothing will happen.","params":[{"...elems2Prepend":"string | HTMLElement | Text | Comment | JQL Instance (one or more)"}],"returnValue":"JQL Instance"},"instance_prop":{"description":"Set a property (e.g. <code>title</code> or <code>disabled</code>) value for each element of the JQL Instance element collection. Or, without <code>[value]</code> retrieve the value of [property] of the first (root) element from the JQL Instance collection.\n\n<b>Note</b> Properties are validated (so, e.g. no <code>onclick</code> etc. - see example).\n\n<example>\nconst exElem = $(`<div data-id=\"tmpEx\"><b>Hello</b> <span>World</span>!</div>`, /*[root element]*/);\nexElem.prop(`title`, `now I have a title`);\nexElem.prop(`onclick`, `javascript:alert(\"hello!\")`);\n// hover the created element (below) to check the title property (before it disappears)\npopup.createTimed( `<code>exElem.prop(\"title\")</code> =&gt; ${exElem.prop(\"title\")}\n  <br><code>exElem.prop(\"onclick\")</code> =&gt; ${exElem.prop(\"onclick\")}`, 4 );\n</example>\n<button class=\"exRunBttn\" data-action=\"propEx\">Try it</button>","params":[{"property":"string (e.g. <code>title</code>"},{"value":"string | undefined."}],"returnValue":"string | JQL Instance"},"instance_attr":{"description":"<b>Get</b> (<code>keyOrObj</code> string, <code>[value]</code> empty) attribute for the root element of the JQL Instance  or <b>set</b> attributes for the first (root) element of the JQL Instance element collection.\n\n<b>Notes</b>: <ul>\n<li>to set <code>data-attribute</code> or <code>style</code>, use <code>{[data/style]: {[key]: [value], ...}</code> (see example)</li> \n<li>To set multiple <code>class</code>-names, use a comma separated string of class names (e.g. <code>[instance].attr({class: `class1, class2 ... classn`})</code>)</li>\n<li>all attributes are validated (so, e.g. no <code>onclick</code> etc.)</li>\n</ul>\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\" class=\"initial\">Hi, let me get some attributes</div>`, /*[root element]*/);\nsomeDiv.attr( {\n  title: `Yes, I have a title now!`, \n  class: `volatile`, \n  data: {myTitle: `title as data`}, \n  onclick: alert(\"will not be set!\")} );\nconst [ myDataId, myTitle, myClass, myDataTitle, myOnclick ] =\n  [ someDiv.attr(`data-id`),  someDiv.attr(`title`), someDiv.attr(`class`),\n    someDiv.attr(`data-my-title`), someDiv.attr(`onclick`)];\npopup.create([\n  `someDiv.attr(\"data-id\"): ${myDataId}`,\n  `someDiv.attr(\"data-my-title\")</code>: ${myDataTitle}`,\n  `someDiv.attr(\"title\"): ${myTitle}`,\n  `someDiv.attr(\"class\"): ${myClass}`,\n  `someDiv.attr(`onclick`),  ].join(`<br>`));\n</example>\n<button class=\"exRunBttn\" data-action=\"attrEx\">Try it</button>","params":[{"keyOrObj":"string | Object<string, string>"},{"value":"string | Object<string, string> | undefined"}],"returnValue":""},"instance_addClass":{"description":"Add [classNames] to each element of the element collection of the JQL instance. <code>...classNames</code> Can be one or more strings.\n\n<example>\n$.editCssRule(`#tmpEx.warnUser {color: red; font-weight: bold;}`);\n$.editCssRule(`.user:before {content: 'Hi user! '}`);\n$(`<div id=\"tmpEx\">This is not very useful</div>`, /*[root element]*/)\n  .addClass(`warnUser`, `user`);\n</example>\n<button class=\"exRunBttn\" data-action=\"addClassEx\">Try it</button>","params":[{"...classNames":"string[]"}],"returnValue":"JQL Instance"},"instance_About":{"description":"All methods applicable for an <i>instance</i> of JQL.\n\nAn instance of JQL is anything created with the imported JQL constructor (here <code>$</code>).\n\nExamples:<ul>\n<li><code>const exampleDiv = $(`&lt;div id=\"example\">&lt;div class=\"example\">&lt;/div>&lt;/div>`);</code></li>\n<li><code>const exampleDivs = $(`.example`);</code></li>\n<li><code>const exampleSubDivs = $(`#example`).find$(`.example`);</code></li>\n<li>... etc</li></ul>\nWhere a method's return value is <code>JQL Instance</code>, <a target=\"_blank\" href=\"https://www.geeksforgeeks.org/method-chaining-in-javascript/\"><i>method chaining</i></a> is possible.\n\n<example>\n$.editCssRule(`#tmpEx {color: green; font-weight: bold;}`);\n$(`<div id=\"tmpEx\">Hello world.</div>`, /*[root element]*/)\n  .addClass(`helloworld`)\n  .append(`<span> And the rest of the universe!</span>`)\n  .text(` (will disappear shortly)`, true);\n</example>\n<button class=\"exRunBttn\" data-action=\"chainEx\">Try it</button>"},"static_About":{"description":"Static methods are methods you can call using the imported JQL module.\nFor example, when imported as <code>$</code>, <code>$.editCssRule(...)</code> or <code>const popup = $.popup()</code>."},"instance_setData":{"description":"Set data-attribute(s) for each element of the the JQL Instance element collection. The attributes must be key-value pairs.\n\n<example>\nconst someDiv = $(`<span>Hello world</span>`, /*[root element]*/);\n$.editCssRule(\"[data-goodbye]::after { content: '...'attr(data-goodbye); }\");\nsetTimeout( () => {\n  someDiv.setData({id: \"temporary\", goodbye: \"and bye again\"});\n  setTimeout(() => $(\"[data-id='temporary']\").remove(), 2500);\n}, 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"setDataEx\">Try it</button>","params":[{"keyValuePairs":"Object<string, string>"}],"returnValue":"JQL Instance"},"instance_show":{"description":"Show each element of the element collection of the JQL instance.\n\n<b>Note</b>: this will reset the <code>display</code> css property. For more granular showing/hiding elements, use your own classes.\n\n<example>\nconst cleanup = self => {\n  self[0].closest(`.divExClass`).remove();\n  $.removeCssRule(`.showHide`);\n  $.removeCssRule(`button#hide, button#show, button#cleanup`);\n};\n$.editCssRule(`.showHide { display: block; color: red; font-weight: bold; }`);\n$.editCssRule(`button#hide, button#show, button#cleanup { margin-right: 5px; }`);\nconst elem = $(`\n  <div class=\"divExClass\">\n    <span class=\"showHide\">Hello World!</span>\n  </div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"hide\">hide</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).hide() ) );\nelem.append($.virtual(`<button id=\"show\">show</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).show() ) );\nelem.append( $.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => cleanup(self) ) );\n</example>\n<button class=\"exRunBttn\" data-action=\"showHideEx\">Try it</button>","params":[],"returnValue":"JQL Instance"},"instance_single":{"description":"When <code>indexOrSelector</code> has a value, retrieves the first matching element from a JQL Instance collection, or retrieves the first (root) element from the collection. The result will be a new JQL Instance (its collection may be empty).\n\n<code>indexOrSelector</code> is CSS Selector:\n<example>\n$(`<div data-id=\"tmpEx\">\n     <div class=\"test\">Hello world (1)</div>\n     <div class=\"test\">Hello world (2)</div>\n   </div>`, /*[root element]*/);\npopup.create(\n  `<code>$(\"[data-id='tmpEx']\").single(\".test\").outerHtml().replace(/&lt;/g, \"&amplt;\")</code><br>\n   ${$(\"[data-id='tmpEx']\").single(\".test\").outerHtml().replace(/&lt;/g, \"&amp;lt;\")}`,\n   () => $(\"[data-id='tmpEx']\").remove() );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx\">Try it</button>\n<code>indexOrSelector</code> is empty:\n<example>\n$(`<div data-id=\"tmpEx\">\n     <div class=\"test\">Hello world (1)</div>\n     <div class=\"test\">Hello world (2)</div>\n   </div>`, /*[root element]*/);\npopup.create(\n  `<code>$(\"[data-id='tmpEx']\").single().outerHtml().replace(/&lt;/g, \"&amplt;\")</code><br>\n   ${$(\"[data-id='tmpEx']\").single().outerHtml().replace(/&lt;/g, \"&amp;lt;\")}`,\n   () => $(\"[data-id='tmpEx']\").remove() );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx2\">Try it</button>\n<code>indexOrSelector</code> is number:\n<b>Note</b>: retrieve a single element by number is zero based.\n<example>\n$([`<div class=\"test_\">Hello world (1)</div>`,\n   `<div class=\"test_\">Hello world (2)</div>`,\n   `<div class=\"test_\">Hello world (3)</div>`],\n    /*[root element]*/);\npopup.create(\n  `<code>$(\".test_\").single(1).outerHtml().replace(/&lt;/g, \"&amp;lt;\")</code><br>\n   ${$(\".test_\").single(1).outerHtml().replace(/</g, \"&lt;\")}`, () => $(\".test_\").remove() );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx3\">Try it</button>","params":[{"indexOrSelector":"string | number. An optional (valid) css selector."}],"returnValue":"JQL Instance"},"instance_style":{"description":"Style each element of the of the JQL Instance element collection <i>inline</i>, so <code>&lt;div style=\"[the style from parameters]\"></code>. If <code>keyOrKvPairs</code> is a string and <code>value</code> is not empty, will set a single style value. Preferably use key-value pairs.\n\n<b>Note</b>: using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code>.","params":[{"keyOrKvPairs":"Object&lt;string, string> | string"},{"value":"string | undefined"}],"returnValue":"JQL Instance"},"instance_toNodeList":{"description":"Copy the JQL Instance element collection into a <code>NodeList</code>. It may be a way to duplicate a collection of nodes (see example).\n\n<b>Note</b>: the list is not a live <code>NodeList</code>. In other words: the nodes are copies of the original (and <i>only exist in memory</i>).\n\n<b>Note</b>: the eventual id of the copied nodes is removed (element id's must be unique). See also the <code>.duplicate</code> method.\n\n<example>\n// create 2 nodes in the DOM tree and copy the elements as NodeList\nconst nodes = $([\n  `<div id=\"some\">Hello</div>`, \n  `<div id=\"thing\">World</div>` ]).toNodeList();\n\n// change the text and color of the nodes in the list\nfor (const node of nodes) { \n  node.textContent += `!`;\n  node.style.color = `red`;\n}\n\n// append the nodes (and colorize)\n$(/*[someElement to append to]*/).append(...nodes);\n\n/* \n  initial:\n  <div id=\"some\">Hello</div>\n  <div id=\"thing\">World</div>\n\n  new and appended to DOM:\n  <div style=\"color:red;\">Hello!</div>\n  <div style=\"color:red;\">World!</div>\n*/\n</example>\n<button class=\"exRunBttn\" data-action=\"toNodeListEx\">Try it</button>","params":[],"returnValue":"NodeList"},"instance_trigger":{"description":"Trigger a handler for all elements of the the JQL Instance element collection.\n\n<b>Note</b>: bubbling is always true (<code>{bubbles: true}</code>), because event handling in this library uses <a target=\"_blank\" href=\"https://javascript.info/event-delegation\">event delegation</a>.\n\nSee the example @<div data-action=\"jump2Nav\" data-jumpkey=\"static_delegate\" class=\"linkLike\">the delegate documentation</div>","params":[{"evtType":"string. An event identifier, e.g. <code>\"click\"</code>"},{"SpecifiedEvent":"Event. The event may be specified, e.g. <code>MouseEvent</code>. Defaults to generic <code>Event</code>"},{"options":"Object<string, any>. Event options. Default <code>{bubbles: true, cancelable: false, composed: false}</code>"}],"returnValue":"JQL Instance"},"instance_toggleClass":{"description":"Toggle className (on/off) for each element of the JQL Instance element collection.\n\n<example>\n$.editCssRule(`.redEx { color: red; }`);\n$.editCssRule(`button#toggleColor, button#cleanup { margin: 0 5px; }`);\nconst elem = $(`<div class=\"divExClass redEx\">Hello World!</div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"toggleColor\">toggle</button>`)\n  .on( `click`, (_, self) => $(self[0].closest(`.divExClass`)).toggleClass(`redEx`)) );\nelem.append($.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => self[0].closest(`.divExClass`).remove()) );\n</example>\n<button class=\"exRunBttn\" data-action=\"toggleClassEx\">Try it</button>","params":[{"className":"string. The class name to toggle (eg <code>'hidden'</code>)"}],"returnValue":"JQL Instance"},"instance_val":{"description":"Get or set the value of (the root element of) the JQL instance, where the first element is one of input, textarea or select HTMLElement. When <code>newValue</code> is empty, return the current value, otherwise the JQL Instance.","params":[{"newValue":"string. The value to set."}],"returnValue":"string | JQL Instance"},"static_virtual":{"description":"Create a HTML element, but don't add it to DOM (so, only in memory).\n\n<example>\npopup.createTimed(`wait a sec ...`, 0.8);\nconst virtualElem = $.virtual(`<div data-id=\"tmpEx\">Hello</div>`)\n  .append( $.virtual(`<span> world!</span>`)\n  .style( {color: `green`, fontWeight: `bold`} )\n);\nsetTimeout( () => {\n  virtualElem.toDOM(/*[root element]*/);\n  setTimeout(() => virtualElem.remove(), 3000);\n}, 1000 );\n</example>\n<button class=\"exRunBttn\" data-action=\"virtualEx\">Try it</button>","params":[{"html":"string. A (valid) html string."}],"returnValue":"JQL Instance"},"static_text":{"description":"Create a text or comment Node.","params":[{"str":"string. The text content of the node "},{"isComment":"Boolean. Default false"}],"returnValue":"Text | Comment"},"static_popup":{"description":"Use the built in popup Factory. See <div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">the documentation</div>.","params":[],"returnValue":"Object<string, Function>"},"popup_About":{"description":"When initialized (e.g. <code>const myPopup = [JQL].popup()</code>), you can use the built in popup module. It contains 3 methods, documented in the following."},"popup_create":{"description":"Create a popup. When <code>isModalOrCallback</code> is a boolean and true, the window can not be automatically closed, use <code>removeModal</code> for that. \n\nWhen <code>isModalOrCallback</code> is a function it will be called after the popup is closed. Other <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\"><i>truthy</i></a> values create a modal popup.\n\nWhen <code>modalCallback</code> is a function, it will be called after a <i>modal</i> popup is closed.\n\nThe examples demonstrate both a modal popup and a regular one.\n<div class=\"template\">\n  <div data-popup2>\n    <p>\n      Hi. This box is <i>really</i> modal.\n      <br>There is no close icon and clicking outside this box does nothing.\n      <br>In other words: you can only close this using the button below.\n      <br>Try clicking anywhere outside the box ...\n    </p>\n  </div>\n  <div data-popup1>\n    <p data-popup1>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>\n</div>\n<example>\nconst { popup } = $;\npopup.create(`\n   <div>\n    <p>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"popup\">Try it</button>\n<example>\nconst $$ = $.virtual;\nconst closeBttn = $$(`<button id=\"modalCloseTest\">Close me</button>`)\n    .on(`click`, () => popup.removeModal())\nconst okMessage = () => popup.createTimed(`Modal closed, you're ok, bye.`, 2);\nconst message = $$(`\n  <p>\n    Hi. This box is <i>really</i> modal.\n    <br>There is no close icon and clicking outside this box does nothing.\n    <br>In other words: you can only close this using the button below.\n    <br>Try clicking anywhere outside the box ...\n  </p>`).append($$(`<p/>`).append(closeBttn));\npopup.create(message, true, okMessage, \"There's only one escape here!\");\n</example>\n<button class=\"exRunBttn\" data-action=\"popupModal\">Try it</button>","params":[{"message":"string. A text or (valid) HTML string."},{"isModalOrCallback":"Boolean | Function."},{"modalCallback":"Function. Optional function to call after closing a modal popup."},{"modalWarning":"Optional warning text when a user tries to close a modal popup without the preferred action."}],"returnValue":"Nothing"},"popup_createTimed":{"description":"Create a (non modal) popup, that closes itself after <code>closeAfter</code> seconds.\n<div class=\"template\">\n  <div data-popup3>\n    <p>Hi, this is a popup! I'll be active for 5 seconds (as long as you don't close me first).</p>\n  </div>\n</div>\n<example>\nconst { popup } = $;\npopup.createTimed(`<p>Hi, this is a popup! I'll be active for 5 seconds (as long as you don't close me first).</p>`, 5);\n</example>\n<button class=\"exRunBttn\" data-action=\"popupTimed\">Try it</button>","params":[{"message":"string. A text or (valid) HTML string."},{"closeAfter":"Number. The number of seconds after the popup closes itself. Default 2."},{"callback":"Function. Optional function to call after closing the popup."}],"returnValue":"Nothing"},"popup_removeModal":{"description":"Remove a modal popup. See the second example above @<div class=\"linkLike\" data-jumpkey=\"popup_create\" data-action=\"jump2Nav\">create</div>.","params":[{"callback":"Function. Optional function to call after closing the popup. Default undefined."}],"returnValue":"Nothing"},"static_log":{"description":"Equivalent to <div class=\"linkLike\" data-jumpkey=\"debuglog_log\" data-action=\"jump2Nav\">log</div> in <div class=\"linkLike\" data-jumpgroup=\"debuglog\" data-action=\"jump2Nav\">debugLog</div>.","params":[{"...args":"string[]"}],"returnValue":"JQL.debugLog"},"static_nodes":{"description":"Retrieve or more DOM Nodes from [root]. The equivalent of <code>Array.from([root].querySelectorAll([css selector]))</code>. \n\n<b>Note</b>: returns a real <code>Array</code> (not a <code>NodeList</code>), so all <code>Array</code> methods work on the result.\n\nFor example: <code>$.nodes(`.allGreen`).map(elem => elem.textContent += ` I'm green!`);</code>.","params":[{"selector":"string. A (valid) css selector"},{"root":"HTMLElement. Default <code>document html element</code>"}],"returnValue":"HTMLElement[]"},"static_node":{"description":"Retrieve a DOM Node from [root]. The equivalent of <code>[root].querySelector([css selector])</code>. For example: <code>const firstGreen = $.node(`.allGreen`);</code>.\n\n","params":[{"selector":"string. A (valid) css selector"},{"root":"HTMLElement. Default <code>document html element</code>"}],"returnValue":"HTMLElement"},"static_createStyle":{"description":"Factory function that creates (or retrieves) a stylesheet with the given <code>id</code> in the head of the document and returns a function to create/modify style rules in that stylesheet.\n\nSee also <div data-action=\"jump2Nav\" data-jumpkey=\"static_setStyle\" class=\"linkLike\">the setStyle documentation</div>.\n\n<example>\nconst setMyStyling = $.createStyle(`mystyle`);\nsetMyStyling(`body {margin: 2rem; font: normal 12px/15px verdana, arial;}`);\n</example>\n\n","params":[{"id":"string"}],"returnValue":"Function."},"instance_prependTo":{"description":"Injects the current JQL Instance at the start of <code>prependTo</code>. \n\nIf <code>prependTo</code> is a HTML string, it is converted to a JQL Instance.\n\nThe syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_appendTo\">appendTo</div>.\n\n<b>Note</b>: when <code>prependTo</code> is a HTML-string, the HTML is sanitized.\n","params":[{"prependTo":"string | JQL Instance"}],"returnValue":"JQL Instance"},"debuglog_About":{"description":"To use extensive logging for debugging (or just follow the application flow) you can use a special object named <code>debugLog</code>. <code>debugLog</code> is a static property of the JQL module. Where a method returns <code>debugLog</code> (so itself) the result is <i>chainable</i>. \n\nLogging by default is to the browser console, but you can also log to a specially created element within your document.\n\nBy default debug logging is not active.\n\nSee it in action in <a class=\"linkLike\" target=\"_blank\" href=\"https://kooi.dev/JQLDemo/\">the JQL demo</a>.\n\n<b>Note</b>: errors when creating elements are always logged to the browser console.\n\n<example>\n// JQL imported as $\nconst { debugLog } = $;\nif (!debugLog.isOn()) {\n  debugLog\n   .on()\n   .toConsole // See the following\n   .off()\n   .log(`We started logging to div#logBox, enjoy ...`);\n}\n</example>\nThere are two extra <i>properties</i> in <code>debugLog</code> to note:\n<ul>\n<li><code>toConsole</code> can be used to enable or disable logging to the browser console. \nUse <code>toConsole.on()</code> to enable, <code>toConsole.off()</code> to disable logging to the console.</code>.\nBy default logging to the console is enabled. If logging is not active, using <code>toConsole.on/off</code> will\nset the state for later usage.\n</li>\n<li><code>reversed</code>. By default logging (to screen) is from latest entry to the oldest. \nTo log from first entry to the last you can use <code>debugLog.reversed.on()</code>, and vice versa use <code>debugLog.reversed.off()</code>.\nAs with <code>toConsole</code> this is only useful if debug logging is active, and only if logging to console is <i>off</i>.</li>\n</ul>"},"debuglog_isOn":{"description":"Check if debug logging state is active.","params":[],"returnValue":"Boolean"},"debuglog_isVisible":{"description":"When logging to screen is active, check if the special logging box is visible.","params":[],"returnValue":"Boolean"},"debuglog_on":{"description":"Activate debug logging. By default logs all to the browser console. \n\nUse <code>[JQL].debugLog.on().toConsole.off()</code> to activate logging to screen.","params":[],"returnValue":"debugLog"},"debuglog_off":{"description":"Deactivate debug logging.","params":[],"returnValue":"debugLog"},"debuglog_remove":{"description":"Removes and deactivates all logging. If applicable removes the log box from the DOM.\n\n<b>Note</b>: reactivate debug logging with <code>[JQL].debugLog.on()</code>.","params":[],"returnValue":"debugLog"},"debuglog_log":{"description":"Log one or more strings, either to the console or the DOM logging element.\n\n<b>Note</b> for completeness: this is equivalent to the <div class=\"linkLike\" data-jumpkey=\"static_log\" data-action=\"jump2Nav\">static [JQL].log method</div>.","params":[{"...args":"string[]"}],"returnValue":"debugLog"},"debuglog_hide":{"description":"Hide the DOM log box, if applicable (not logging to console).","params":[],"returnValue":"debugLog"},"debuglog_show":{"description":"Show the DOM log box, if applicable (not logging to console).","params":[],"returnValue":"debugLog"},"debuglog_clear":{"description":"Remove all strings logged until now from DOM log box or browser console.","params":[],"returnValue":"debugLog"},"static_setStyle":{"description":"Alias <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_editCssRule\">editCssRule</div>. The method is kept for backward compatibility.\n","params":[{"cssBlockOrSelector":"string"},{"rulesObj":"Object<string, string>. Optional"}],"returnValue":"Nothing"},"static_removeCssRule":{"description":"Remove a css rule (e.g. <code>.someclass:after {content: 'someclass after text'}</code>) from the custom JQL stylesheet (<code>&lt;style id=\"JQLStylesheet\"></code>).\n\nSee <div data-action=\"jump2Nav\" data-jumpkey=\"static_delegate\" class=\"linkLike\">the [JQL].delegate documentation</div> for examplary usage.","params":[{"rule":"string."}],"returnValue":"Nothing"},"static_editCssRule":{"description":"Formerly known as <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_setStyle\">setStyle</div>.\n\nOn importing, JQL creates a custom stylesheet in the header (<code>&lt;style id=\"JQLStylesheet\"></code>. Within this stylesheet you can create, remove and/or modify style rules using <code>[jql].editCssRule</code> \n\nYou can use either real style rule string, or a selector and an Object defining the properties of that selector.\n\nWhen a rule is valid and doesn't exist, it will be created. Existing rules are modified with the given parameters.\n\nYou can remove rule properties (e.g. <code>color</code>) or complete rules.\n<ul>\n<li>To remove one or more <i>rule properties</i>, use (for example) <code>$.editCssRule(`#someDiv`, {removeProperties: {color: 1, border: 1}})</code></li>\n<li>To completely remove a css rule, use (for example) <code>$.editCssRule(`#someDiv`, {removeRule: 1})</code> <i>OR</i> use  <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_removeCssRule\">removeCssRule</div></li></ul>\n<example>\n// a rule string\n$.editCssRule(`#div1 {margin: 0.3rem; color: green; background-color: #EEE; }`);\n// an object\n$.editCssRule(`#div2`, {margin: \"0.3rem\", color: \"red\", backgroundColor: \"#EEE\"});\n// -----------------------------------------------------^ Note: camelcased\n$(`<div id=\"div1\">I am div#div1</div>`, /*[root element]*/);\n$(`<div id=\"div2\">I am div#div2</div>`, /*[root element]*/);\n// modify rule for #div1 after 1.5 seconds\nsetTimeout(() => { $.editCssRule(`#div1 { background-color: #FFFFC0; }`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"editCssRuleEx\">Try it</button>","params":[{"cssBlockOrSelector":"string. A css selector or a complete css rule"},{"rulesObj":"Object<string, string>. Optional"}],"returnValue":"Nothing"},"static_allowTag":{"description":"The creation of some html-tags are prohibited/not enabled by default (like <code>&lt;frameset></code>, or <code>&lt;script></code>). You can allow the creation of such tags using this static method.","params":[{"tag2Allow":"string. The html tag to allow (e.g. <code>media</code>)"}],"returnValue":"Nothing"},"static_prohibitTag":{"description":"The creation of most html-tags is allowed by default. You can prohibit the creation of a tag using this the <code>prohibitTag</code> method, e.g. <code>$.prohibitTag(`dialog`)</code>.","params":[{"tag2Prohibit":"string. The html tag to prohibit (e.g. <code>details</code>)"}],"returnValue":"Nothing"},"static_lenient":{"description":"You can call <code>$.lenient().on()</code> to allow creation of <i>all</i> html tags (even formally unknown tags), <code>$.lenient().off()</code> to undo that. By default lenient mode is <code>off</code>.\n\n<b>Note</b>: using lenient mode may get you into problems (element creation errors, security). It may be better to use <div class=\"linkLike\" data-jumpkey=\"static_allowTag\" data-action=\"jump2Nav\">allowTag</div> for this.","params":[],"returnValue":"Object&lt;key, Function>"},"instance_length":{"description":"The number of elements within the JQL instance element collection.\n\n<example>\n$(`<p>There are <b>${$(`h3`).length}</b> &lt;h3>-elements within this document</p>`, /*[root element]*/);\n</example>\n<button class=\"exRunBttn\" data-action=\"lenEx\">Try it</button>","params":[],"returnValue":"Number"}}