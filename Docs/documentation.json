{"jql_About":{"description":"<div>This module (<b>JQ</b>uery<b>L</b>ike) was inspired by the idea that some JQuery was too good <a target=\"_blank\" href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">to ditch</a>.</div>\n\n<div>It is developed in a modular fashion and uses plain ES20xx, so not really (or really not, take your pick) suitable for older browsers.</div>\n\n<div>The module originally was written in 2021. In 2023 it was rewritten in a <i>classfree object oriented</i> fashion, inspired by a <a target=\"_blank\" href=\"https://youtu.be/XFTOG895C7c?t=2562\">Douglas Crockford presentation</a>. This means you won't find any <code>this</code> in the code.</div>\n\n<div>It is <i>not</i> a replacement for <a target=\"_blank\" href=\"https://github.com/jquery/jquery\">JQuery</a>. Consider it a subset of JQuery <i>alike</i> methods to retrieve, create, modify or manipulate (collections of) HTML elements in your HTML document.</div>\n\n<div>This document is completely built using JQL. Another example/demo-version can be found @<a href=\"//kooiinc.github.io/JQL/TestNDemo/\" target=\"_blank\">kooiinc.github.io/JQL/TestNDemo</a>.</div>\n\n<div>In the following you'll find documentation for usage of the module, divided into 4 chapters:</div>\n\n<ul>\n  <li><div data-action=\"jump2Nav\" data-jumpgroup=\"instance\" class=\"linkLike\">INSTANCE</div>: all methods applicable to a JQL <i>instance</i>;</li>\n  <li><div data-action=\"jump2Nav\" data-jumpgroup=\"static\" class=\"linkLike\">STATIC</div>: JQL static module methods;</li>\n  <li><div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">POPUP</div>: JQL includes a module to create (modal) popup messages;</li>\n  <li><div data-action=\"jump2Nav\" data-jumpgroup=\"debuglog\" class=\"linkLike\">DEBUGLOG</div>: JQL includes a module to extensively log everything it does (you do with it).</li></ul>\n\n<div>For all examples <code>$</code> is the imported JQL module (so <code>import $ from \"[location of JQL]\"</code>).</div>\n\n<div>Most examples can be run (use the [Try it] button). If elements are created/modified in an example, the result is shown within the item at hand (and removed after a few seconds) or in a popup. The examples deliberately use all kinds of JQL methods, to familiarize the reader with them.</div>\n<a href=\"//github.com/KooiInc/JQL\"><img src=\"//github.githubassets.com/favicons/favicon.png\" class=\"gitLink\">source code @Github</a></div></div>"},"instance_text":{"description":"<div>Set the textcontent of all elements of the instance element collection.</div>\n\n<div>When <code>textValue</code> is empty, returns the current textcontent of the <i>first element</i> of the instance element collection.\nOtherwise returns the JQL Instance.</div>","params":[{"textValue":"String"},{"append":"Boolean, default false"}],"returnValue":"String | JQL Instance"},"instance_each":{"description":"<div>Loops through every element of the instance collection and applies the given callback function to it.</div>\n\n<div>The signature of the callback function is <code>(element, [i]) => {...}</code>. Elements that are not <code>HTMLElement</code> (e.g. <code>Comment</code> or text nodes) are <i>not</i> processed.</div>\n\n<div>Click the [Try it] button twice and watch the method name headers for a demo.</div>\n\n<example>\nconst mNameElems = $(`.methodName`);\nconst brown = `rgb(165, 42, 42)`;\nconst currentColor = mNameElems.computedStyle(`color`);\nmNameElems.each( el => $(el).style({color: currentColor === brown ? `` : brown}) );\n</example>\n<button class=\"exRunBttn\" data-action=\"eachEx\">Try it</button>","params":[{"cb":"Function. The lambda function to appy to every element of the collection."}],"returnValue":"JQL Instance"},"instance_remove":{"description":"<div>Removes every element of the instance element collection, <i>or</i>, when <code>selector</code> is present, removes every child element from of the instance element collection for which the selector applies.</div>\n\n<example>\n$(`p`).remove(); // => all <p> are removed from the document\n$(`p`).remove(`.toBeRemoved`); // => all <p.toBeRemoved> are removed from the document\n$(`p`).remove(`:not(.keepMe)`); // => all <p> except `<p.keepMe>` are removed from the document\n</example>","params":[{"selector":"string. A (valid) css selector string, e.g. <code>#someDiv.someClass</code>"}],"returnValue":"None"},"instance_computedStyle":{"description":"<div>Retrieves the computed style for the given <code>property</code> the first element of the instance collection.</div>\n\n<div>See also <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">Style.computed</div>.</div>\n\n<example>\n  $.editCssRule(`.redEx {color: red; font-weight: bold}`);\n  $(`<p class=\"redEx\">Hello!</p>`, /*[root element]*/);\n  popup.show( {content: `$(\".redEx\").computedStyle(\"color\"): ${ $(`.redEx`).computedStyle(`color`) }\n  <br>$(\".redEx\").computedStyle(\"font-weight\"): ${ $(`.redEx`).computedStyle(`font-weight`) }` } );\n</example>\n<button class=\"exRunBttn\" data-action=\"computedStyleEx\">Try it</button>","params":[{"property":"string. Style property string, e.g. <code>width</code>, <code>display</code>"}],"returnValue":"String | undefined"},"instance_isEmpty":{"description":"<div>returns: <code>true</code> if the JQL Instance collection is empty, otherwise <code>false</code>.</div>\n\n<div class=\"note\"><b>Note</b>: alternatively you can use <code>[JQL instance].is.empty</code>.</div>\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  <b>Hello</b>! <span></span></div>`,  /*[root element]*/);\npopup.show( {content: `<code>someDiv.isEmpty()</code> =&gt; ${someDiv.isEmpty()}\n  <br><code>someDiv.find$(\"span:first-child\").isEmpty()</code> =&gt; ${\n    someDiv.find$(`span:first-child`).isEmpty()}`, callback: () => $(`[data-id=\"tmpEx\"]`).remove()} );\n</example>\n<button class=\"exRunBttn\" data-action=\"isEmptyEx\">Try it</button>","params":[],"returnValue":"Boolean"},"instance_getData":{"description":"<div>Retrieve the value of a data-attribute. When <code>valueWhenFalsy</code> is present, it will return that value if the data-attribute does not exist.</div>\n\n<div><b>See also</b>: <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_data\">data</div>.</div>\n\n<example>\nconst popup = $.popup();\nconst thisBttn = $(evt.target);\nconst action = thisBttn.getData(`action`);\nconst undef = thisBttn.getData(`nonexistent`);\nconst undefWithDefaultValue = thisBttn.getData(`nothing`, `NOCANDO`);\npopup.show( {content: [`action: ${action}`, `undef: ${undef}`, `undefWithDefaultValue: ${undefWithDefaultValue}`].join(`<br>`)} );\n</example>\n<button class=\"exRunBttn\" data-action=\"getDataEx\">Try it</button>","params":[{"dataAttribute":"string. The data-attribute to query, e.q. <code>width</code>"},{"valueWhenFalsy":"Any. The value to return when the data-attribute was not found."}],"returnValue":"Any | undefined"},"instance_is":{"description":"<div><code>[JQL instance].is</code> is a <i>static property</i>. To retrieve a value of it use <code>[JQL instance].is[key]</code>. If the JQL instance element collection is empty, the return values of all properties except <code>empty</code> will be \"n/a\".</div>\n\n<div><code>[JQL instance].is</code> keys: </div>\n\n<ul><li><code>writable</code>: is the first element of the JQL instance collection writable?</li>\n<li><code>visible</code>: is the first element of the JQL instance collection visible in the DOM?</li>\n<li><code>disabled</code>: is the first element of the JQL instance collection disabled?</li>\n<li><code>open</code>: is the first element of the JQL instance collection open (<code>&lt;details></code> or <code>&lt;dialog></code>)</li>\n<li><code>modal</code>: is the first element of the JQL instance collection modal (<code>&lt;dialog></code>)</li>\n<li><code>empty</code>: is the JQL instance element collection empty?</li>\n<li><code>virtual</code>: does the JQL instance only exist in memory?</li></ul>\n<example>\nconst inpDisabled = $(`<input id=\"disabledInput\" disabled type=\"text\" placeholder=\"I am not enabled\">`, /*[root element]*/);\nconst is = inpDisabled.is;\nconst features = [\n  `visible? ${is.visible}`,\n  `disabled? ${is.disabled}`,\n  `writable? ${is.writable}`,\n];\npopup.show( {content: `<code>${$(`#disabledInput`).outerHtml.replace(/</g, `&lt;`)}</code><p>${features.join(`<br>`)}</p>`} );\n</example>\n<button class=\"exRunBttn\" data-action=\"isEx\">Try it</button>\n","params":[],"returnValue":"Object&lt;string, Boolean | string>"},"instance_hasClass":{"description":"<div>For (the list of) className(s) determine if the first (root) element of the JQL Instance element collection contains (one of) the <code>classNames</code>.</div>\n\n<example>\nconst tmpDiv = $(`<div class=\"one two tree\">Hello world</div>`);\npopup.show( {content:\n  `<code>tmpDiv.hasClass(\"one\", \"tree\")</code> =&gt; ${tmpDiv.hasClass(\"one, tree\")}<br>\n   <code>tmpDiv.hasClass(\"one\", \"four\")</code> =&gt; ${tmpDiv.hasClass(\"one, four\")}<br>\n   <code>tmpDiv.hasClass(\"five\")</code> =&gt; ${tmpDiv.hasClass(\"five\")}`, callback: () => $(`.one.two`).remove()} );\n</example>\n<button class=\"exRunBttn\" data-action=\"hasClassEx\">Try it</button>","params":[{"...classNames":"string[]"}],"returnValue":"Boolean"},"instance_replace":{"description":"<div>Replace [oldChild] (a DOM Element, css selector or a JQL instance) within the first (root) element of the instance element collection with a new JQL Instance</div>\n\n<example>\nconst div = $.virtual(`\n  <div>Hi there! \n    <div class=\"oldD\">I shall be replaced...</div>\n    <div class=\"oldD\">Me Too!</div>\n  </div>`);\nconst newDiv = $.virtual(`<div>Formerly known as \"div.oldD\"<div>`).style({color: `red`});\npopup.show( {\n  content: div,\n  closeAfter: 3,\n  callback: () => popup.show({\n    content: div.replace(`.oldD`, newDiv),\n    closeAfter: 3\n  }),\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"replaceEx\">Try it</button>","params":[{"oldChild":"JQL instance | HTMLElement | String. If String, a (valid) css selector. "},{"newChild":"JQL Instance"}],"returnValue":"JQL Instance"},"instance_replaceMe":{"description":"<div>Replace the JQL Instance with a new JQL Instance.</div> \n\n<div class=\"note\"><b>Note</b>: If the new instance is <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"static_virtual\">virtual</div>, it will be added to the DOM tree on replacement.</div>\n\n<example>\nconst oldDiv = $.virtual(`<div id=\"oldD\">I shall be replaced...<div>`);\nconst newDiv = $.virtual(`<div id=\"newD\">I have replaced div#oldD!<div>`);\npopup.show( {\n  content: oldDiv,\n  closeAfter: 3,\n  callback: () => popup.show({\n      content: oldDiv.replaceMe(newDiv).style({color: `red`}),\n      closeAfter: 3\n    }),\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"replaceMeEx\">Try it</button>","params":[{"newChild":"HTMLElement | JQL instance"}],"returnValue":"JQL Instance"},"instance_toDOM":{"description":"<div>Add a 'virtual' element (an element created in memory, using the <code>[instance].virtual</code> method) to the DOM. Defaults to adding the element to the body, but <code>root</code> may be any element (if the DOM allows it). See <div class=\"linkLike\" data-jumpkey=\"static_virtual\" data-action=\"jump2Nav\">virtual</div> documentation for an example.</div>","params":[{"root":"HTMLElement. Default <code>document.body</code>"},{"position":"String. One of \"beforeend\", \"afterbegin\", \"beforebegin\", \"afterend\". Default: \"beforeend\""}],"returnValue":"JQL Instance"},"instance_first":{"description":"<div>Returns the first element of the JQL element collection or a new JQL Instance derived from the first element of the JQL Instance element collection. When <code>asJQLInstance</code> is true, the element is returned as a new JQL Instance (equivalent to <div data-action=\"jump2Nav\" data-jumpkey=\"instance_first$\" class=\"linkLike\">first$</div>), otherwise a <code>DOM Node</code>.</div>\n\n<example>\nconst jqlElems = $(`#navigation li[data-key]`);\npopup.show( {content: $(`\n  <div>\n    <code>jqlElems.collection.length</code>: ${jqlElems.collection.length},<br>\n    outerHTML <code>jqlElems.first()</code>: ${jqlElems.first().outerHTML.replace(/</g, `&lt;`)}\n  </div>`)} );\n</example>\n<button class=\"exRunBttn\" data-action=\"firstEx\">Try it</button>\n","params":[{"asJQLInstance":"Boolean. Default false"}],"returnValue":"HTMLElement | JQL Instance"},"instance_append":{"description":"<div>Appends one ore more elements to each element of the JQL Instance collection (for real, in the DOM tree).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul>\n  <li>when the JQL Instance to append to is empty, nothing will happen.</li>\n  <li>If (one of) elems2Append consists of html string(s), they should contain valid html \n  (e.g., no flow content in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>). \n  The HTML is always sanitized.</li>\n  <li>Already existing (in DOM) <code>elems2Append</code> are <i>moved</i> to the JQL instance when the JQL instance to append to has one element in \n    its collection, <b>but</b></li>\n  <li><code>elems2Append</code> (if JQL instance or Node) are <i>cloned and stripped of their id</i> when the JQL instance collection to append to contains more then one element.</li>\n</ul>\n\n<example>\n$.editCssRule(`.appended { color: red; cursor: pointer; }`);\nconst toAppendJQLInstance = $.virtual(`<div class=\"appended\">I am an appended JQL instance ...</div>`)\n   .on(`click`, () => alert(`HELLO!`));\nconst elem2Append = $(`<div id=\"tmpEx\">Hi there! Wait a sec ... </div>`, /*[root element]*/)\n  .append(\n    toAppendJQLInstance,\n    `Appended text`,\n    `<div>Appended html string</div>`,\n    Object.assign( document.createElement(`div`), {textContent: `Appended element`}) );\nsetTimeout(() =>\n  popup.show( {\n    content: toAppendJQLInstance.html(`Now I am appended to the popup element, you can still click me`),\n}), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"appendEx\">Try it</button>","params":[{"...elems2Append":"string[] | HTMLElement[]| Text[] | Comment[] | JQL instance[]"}],"returnValue":"JQL Instance"},"instance_appendTo":{"description":"<div>Appends the collection of one JQL instance to another instance, so injects the element(s) of [JQl instance element collection] to each element of <code>appendTo</code> (for real, injected and visible in the DOM tree).</div>\n\n<div class=\"note\"><b>Note</b>: this returns <code>appendTo</code> (so, the <i>parent</i> JQL Instance).</div>\n\n<example>\n$.editCssRule(`#tmpEx {color: blue; font-weight: normal}`);\n$.editCssRule(`#tmpEx div {color: red; font-weight: bold}`);\nconst helloWorld = $(`<p id=\"tmpEx\">Hello World</p>`, /*[root element]*/);\nconst div2Append = $$(`<div>And bye again</div>`);\nsetTimeout(() => div2Append.appendTo(helloWorld), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"appendToEx\">Try it</button>","params":[{"appendTo":"JQL instance"}],"returnValue":"JQL Instance"},"static_delegate":{"description":"<div>Create targeted event listeners/handlers. </div>\n\n<div class=\"note\"><b>Note</b>: <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/DOM_events\">non bubbling events</a> are delegated using <code>{capture: true}</code>. This concerns the following events:</div>\n\n<ul>\n  <li><code>load</code></li>\n  <li><code>unload</code></li>\n  <li><code>scroll</code></li>\n  <li><code>focus</code></li>\n  <li><code>blur</code></li>\n  <li><code>DOMNodeRemovedFromDocument</code></li>\n  <li><code>DOMNodeInsertedIntoDocument</code></li>\n  <li><code>loadstart</code></li>\n  <li><code>progress</code></li>\n  <li><code>error</code></li>\n  <li><code>abort</code></li>\n  <li><code>load</code></li>\n  <li><code>loadend</code></li>\n  <li><code>pointerenter</code></li>\n  <li><code>pointerleave</code></li>\n  <li><code>readystatechange</code></li>\n</ul>\n\n<div>The example creates a click listener/handler for the header of this chapter (\"delegate\").</div>\n\n<example>\n$.delegate(\n  `click`,\n  `#static_delegate`,\n    evt => {\n      if (!evt.target.dataset.after) {\n        evt.target.setAttribute(`data-after`, `1`);\n        return $.editCssRule(`\n          #${evt.target.id}::after {\n            content: \" HI! My name is U.S.E. Less. Click to add or remove me...\";\n            color: green; }` \n        );\n      }\n\n      $.removeCssRule(`#${evt.target.id}::after`);\n      return evt.target.removeAttribute(`data-after`);\n  }\n);\n$(`#static_delegate`).trigger(`click`);\n</example>\n<button class=\"exRunBttn\" data-action=\"staticDelegateEx\">Try it</button>","params":[{"type":"string. Event type (e.g. <code>click</code>) to listen for"},{"origin":"string. Optional css identifying the element to assign listener to (e.g. <code>#someId</code>)"},{"...handlers":"One or more lambda functions"}],"returnValue":"JQL Instance"},"instance_dimensions":{"description":"<div>Retrieve the actual dimensions of the first (root) element in the instance element collection. It actually returns the result of <code>getBoundingClientRect</code>, see <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">MDN</a> for interpretation of the values.</div>\n\n<div class=\"note\"><b>Note</b>: dimensions is a <i>property</i>, not a function. Usage <code>[JQL instance].dimensions</code>.</div>\n\n<example>\nconst dimElem = $(`<p>Hello, where am I at the moment?</p>`, /*[root element]*/)\n  .style({color: `red`, fontWeight: `bold`});\nconst dims = JSON.stringify(dimElem.dimensions, null, 2)\n  .replace(/[}{\"]/g, ``).trim().replace(/\\n/g, `<br>`);\npopup.show( {content: dims} );\n</example>\n<button class=\"exRunBttn\" data-action=\"dimEx\">Try it</button>","params":[],"returnValue":"(Object) <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMRect\">DOMRect</a> | undefined"},"instance_duplicate":{"description":"<div>Duplicate a JQL instance to memory (default) or to DOM (append to <code>root</code>).</div>\n\n<div>The elements within the instance are cloned, their id's are removed and the resulting NodeList is converted to a new JQL Instance.</div>\n\n<div class=\"note\"><b>Note</b> check the cloned nodes classList/properties/attributes: you may want to change them before injecting to DOM.</div>\n\n<example>\nconst someElem = Object.assign(\n$.editCssRule(`.someClass`, {color: `brown`});\n$(`<div class=\"someClass\">hello</div>`, /*[root]*/).duplicate(true, /*[root]*/);\n$( `.someClass`, /*[root]*/ )\n  .append($.text(` world!`))\n  .prepend($.text(`We say: `))\n  .each(el => el.setAttribute(`id`, `_${ Math.floor(10000 + Math.random() * 10000).toString(16)}` ))\n  .duplicate(true, /*[root]*/)\n  .removeClass(`someClass`)\n  .addClass(`tmp`)\n  .text(` That's right folks. Bye!`, true);\n /** \n  output in DOM\n  <div class=\"someClass\" id=\"[randomId]\">We say: hello world!</div>\n  <div class=\"someClass\" id=\"[randomId]\">We say: hello world!</div>\n  <div class>We say: hello world! That's right folks. Bye!</div>\n  <div class>We say: hello world! That's right folks. Bye!</div> \n */\n</example>\n<button class=\"exRunBttn\" data-action=\"duplicateEx\">Try it</button>","params":[{"toDOM":"Boolean. Default <code>false</code>"},{"root":"Node. Default document.body"}],"returnValue":"JQL Instance"},"instance_css":{"description":"<div>Style each element of the element collection of the JQL Instance <i>within</i> the custom style sheet (<code>&lt;style id=\"JQLStylesheet\"></code>), using an intermediate (generated, random) or given class name. Preferably use key-value pairs, even when assigning a single property.</div>\n\n<div class=\"note\"><b>Notes</b></div>\n<ul>\n<li>the intermediate className starts with <code>\"jQLClass-\"</code>. There will be one intermediate class name per element. Subsequent .css calls will modify the rule for the generated class name.</li>\n<li>using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code></li>\n</ul>\n<example>\n// no className\n$(`<p id=\"noClass\">Hello #1</p>`, /*[root element]*/)\n  .css({\n     paddingLeft: `4px`, \n     color: `white`, \n     backgroundColor: `#000` } );\npopup.show( {content: `intermediate className: ${$.node(`#noClass`).classList.shift()}`} );\n// className\n$(`<p class=\"leftRedBorder\">Hello #2</p>`, /*[root element]*/)\n  .css({\n     className: `leftRedBorder`, \n     paddingLeft: `4px`, \n     color: `green`, \n     borderLeft: `12px solid red` } );\n</example>\n<button class=\"exRunBttn\" data-action=\"cssEx\">Try it</button>\n<div><div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">See also [JQL instance].Style.inSheet</div><div>","params":[{"keyOrKvPairs":"Object<string, string> | string. If you want to use a className for the css, add a <code>className</code> property to the Object."},{"value":"string | undefined. If <code>value</code> is a string, <code>keyOrKvPairs</code> must be a string too."}],"returnValue":"JQL Instance"},"instance_empty":{"description":"<div>Remove contents for all elements of the JQL instance element collection.</div>\n\n<div>Equivalent to <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_clear\">clear</div></div>","params":[],"returnValue":"JQL Instance. An instance with elements without any content."},"instance_clear":{"description":"<div>Remove contents for all elements of the JQL instance element collection.</div>\n\n<example>\n$([`<p data-id=\"tmpEx\">I hope they won't remove this!</p>`,\n    `<div class='metoo'>Me too!</div>`], /*[root element]*/);\nsetTimeout( () => $(`[data-id=\"tmpEx\"]`).clear(), 1500);\nsetTimeout( () => $(`.metoo`).text(`The did it didn't they?`), 2500);\n</example>\n<button class=\"exRunBttn\" data-action=\"clearEx\">Try it</button>","params":[],"returnValue":"JQL Instance. An empty instance."},"instance_hide":{"description":"<div>Hide each element of the element collection of the JQL instance.</div>\n\n<div class=\"note\"><b>Note</b>: hiding changes the css <code>display</code> property to \"none\". It may be more useful to use a <code>css class</code> for this.</div>\n\n<example>\nconst cleanup = self => {\n  self[0].closest(`.divExClass`).remove();\n  $.removeCssRule(`.showHide`);\n  $.removeCssRule(`button#hide, button#show, button#cleanup`);\n};\n$.editCssRule(`.showHide { display: block; color: red; font-weight: bold; }`);\n$.editCssRule(`button#hide, button#show, button#cleanup { margin-right: 5px; }`);\nconst elem = $(`\n  <div class=\"divExClass\">\n    <span class=\"showHide\">Hello World!</span>\n  </div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"hide\">hide</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).hide() ) );\nelem.append($.virtual(`<button id=\"show\">show</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).show() ) );\nelem.append( $.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => cleanup(self) ) );\n</example>\n<button class=\"exRunBttn\" data-action=\"showHideEx\">Try it</button>","params":[],"returnValue":"JQL instance"},"instance_removeAttribute":{"description":"<div>Remove some attribute from each element of the element collection of the JQL Instance.</div>","params":[{"attrName":"string."}],"returnValue":"JQL Instance"},"instance_removeClass":{"description":"<div>Remove <code>classNames</code> from for each element of the element collection of the JQL Instance. Class names can be one or more strings.</div>\n\n<example>\n$.editCssRule(`.exTest { color: red; font-weight: bold; }`);\nconst exElem = $(`<div data-id=\"tmpEx\"><b>Hello</b> <span class=\"exTest\">World</span>!</div>`, /*[root element]*/);\nsetTimeout(() => exElem.find$(`span`).removeClass(`exTest`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"removeClassEx\">Try it</button>","params":[{"...classNames":"string[]. One or more classNames"}],"returnValue":"JQL Instance"},"instance_replaceClass":{"description":"<div>Swap <code>className</code> with <code>nwClassnames</code> for each element of the element collection of the JQL Instance. Enables replacing a class name with one or more class name(s)</div>\n\n<example>\nconst divEx = $(`<div class=\"divExClass\">Hello World!</div>`, /*[root element]*/);\n$.editCssRule(`.redEx { color: red; }`);\n$.editCssRule(`.redExUl { text-decoration: underline; }`);\nsetTimeout(() => divEx.replaceClass(`divExClass`, `redEx`, `redExUl`), 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"replaceClassEx\">Try it</button>","params":[{"className":"string. the className to replace  "},{"...nwClassNames":"string[]. The class name(s) to replace <code>className</code> with."}],"returnValue":"JQL Instance"},"instance_find":{"description":"<div>Find one or more elements within the first (root) element of the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>).</div>\n\n<example>\npopup.show( {content: $(`.docs`).find(`#instance_find`)?.[0].outerHTML.replace(/</g, `&amp;lt;`)} );\n</example>\n<button class=\"exRunBttn\" data-action=\"findEx\">Try it</button>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"NodeList | empty Array"},"instance_find$":{"description":"<div>Find one or more elements within the JQL Instance collection using a css query (e.g. <code>'.someClass'</code>)  starting from the root element of the collection, and return a new JQL Instance from it's result</div>\n\n<example>\npopup.show( {content: $(`.docs`).find$(`#instance_find_D`)?.HTML.get(true, true)} )\n//                                                    ^ note #[...] css selector can not contain $\n</example>\n<button class=\"exRunBttn\" data-action=\"find_D_Ex\">Try it</button>","params":[{"selector":"string. A (valid) css selector"}],"returnValue":"JQL Instance"},"instance_first$":{"description":"<div>Retrieve nth Element (Number) or element from selector (css selector) from the collection of the JQL Instance and return that as a new JQL Instance (if it exists, otherwise undefined).</div>\n\n<example>\nconst fromQS = $(`.docs`).first$(`#instance_first_D`);\nconst first$WithIndexExample = () => popup.show( {content: $(`.docs h3`).first$(17).HTML.get(true, true)} );\npopup.show( {content: fromQS.HTML.get(true, true), callback: first$WithIndexExample} );\n</example>\n<button class=\"exRunBttn\" data-action=\"first$Ex\">Try it</button>\n<example>\n// non existing ...\nconst jqlElem = $(`.docs`).first$(30001);\npopup.show( {content: `<div>non existing: ${jqlElem.outerHtml}</div>`} );\n</example>\n<button class=\"exRunBttn\" data-action=\"first$Ex2\">Try it</button>","params":[{"indexOrSelector":"Number | string. If string, a (valid) css selector."}],"returnValue":"JQL Instance"},"instance_on":{"description":"<div>Add listener and handler lambda('s) for the JQL Instance root element.</div>\n\n<div>The lambda signature is <code>[handler function](event, JQLInstance)</code>.</div>\n\n<div>See <div data-action=\"jump2Nav\" data-jumpkey=\"instance_toggleClass\" class=\"linkLike\">the toggleClass documentation</div> for examplary usage.</div>","params":[{"type":"string. The event type (e.g. 'click', `keyup`)"},{"...callback":"Function[]. One or more handler functions (lambda's)"}],"returnValue":"JQL Instance"},"instance_outerHtml":{"description":"<div>Retrieves the complete html for the first (root) element of the JQL Instance.</div>\n\n<div class=\"note\"><b>Note</b>: <code>.outerHtml</code> is a <i><b>property</b></i> (not a method).</div>\n\n<example>\nconst exElem = $$(`<div data-id=\"tmpEx\"><b>Hello</b><span>World</span>!</div>`, /*[root element]*/);\npopup.show( {content: `<code>exElem.outerHtml</code> =&gt; ${exElem.outerHtml.replace(/</g, `&lt;`)}</code>`} );\n</example>\n<button class=\"exRunBttn\" data-action=\"outerHTMLEx\">Try it</button>","params":[],"returnValue":"string"},"instance_parent":{"description":"<div>Get the direct parentNode of the first (root) element of the JQL Instance (as new JQL Instance).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul><li><code>.parent</code> is a <i>property</i> (not a method)</li>\n<li>In (the unlikely) case there is no parent, <code>.parent</code> returns the original JQL instance.</li></ul>","params":[],"returnValue":"JQL Instance"},"instance_html":{"description":"<div>Get (inner-) html of the first (root) element in the collection of the JQL instance <i>or</i> set html for each element of the collection.</div>\n\n<div>Overwrites current html of the elements, or appends (<code>append</code>: true) the value to it.</div>\n\n<div class=\"note\"><b>Note</b>: <code>htmlValue</code> is always sanitized.</div>\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  Hello <span>world</span>\n</div>`, /*[root element]*/);\nsetTimeout(() => {\n  $(`[data-id=\"tmpEx\"] span`, , /*[root element]*/).html(`universe!`);\n  setTimeout(() => $(`[data-id=\"tmpEx\"] span`, /*[root element]*/).html(` And by again`, true), 1500);\n}, 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"htmlForEx\">Try it</button>","params":[{"htmlValue":"string. (valid) HTML string"},{"append":"Boolean. Default false"}],"returnValue":"string | JQL Instance"},"instance_htmlFor":{"description":"<div>Sets/adds/removes html for an element within the collection of the JQL Instance (identified with a css query).</div>\n\n<div class=\"note\"<b>Notes</b>:</div>\n<ul><li>html from <code>htmlString</code> is always sanitized.</li>\n<li>if <code>htmlString</code> is empty, the element content is removed.</li></ul>\n\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\">\n  Hello <span><b>world</b></span> <span>etc.</span>\n  </div>`, /* root element */);\nsetTimeout(() => {\n  popup.show( {\n    content: someDiv.duplicate().htmlFor(`span:first-child`, `<i><b>UNIVERSE</b></i>`),\n    callback: () => $(`[data-id=\"tmpEx\"]`).remove(),\n    closeAfter: 5 });\n}, 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"htmlForEx\">Try it</button>","params":[{"forQuery":"string.  A (valid) css selector."},{"htmlString":"string. (valid) HTML string."},{"append":"Boolean. Default false"}],"returnValue":"JQL Instance"},"instance_prepend":{"description":"<div>Injects one or more elements at the start of each element of the collection of a JQL Instance.</div>\n\n<div>The syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_append\">append</div>.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul>\n  <li>When the JQL Instance to append to is empty, nothing will happen.</li>\n  <li>If (one of) elems2Prepend consists of html string(s), they should contain valid html \n    (e.g., no flow content in elements expecting phrasing content, so for example no <code>&lt;h1></code> within <code>&lt;p></code>). \n    The HTML is always sanitized.</li>\n  <li>Already existing (in DOM) <code>elems2Prepend</code> are <i>moved</i> to the JQL instance when the JQL instance to prepend to has one element in \n    its collection, <b>but</b></li>\n  <li><code>elems2Prepend</code> (if JQL instance or Node) are <i>cloned and stripped of their id</i> \n    when the JQL instance collection to append to contains more then one element.</li>\n</ul>\n\n<example>\n$.editCssRule(`#tmpEx {color: green; font-weight: bold;}`);\n$(`<div>... hi there!</div>`, /*[root element]*/).prepend(`<div id=\"tmpEx\">Hello and also ...</div>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"prependEx\">Try it</button>","params":[{"...elems2Prepend":"string | HTMLElement | Text | Comment | JQL Instance (one or more)"}],"returnValue":"JQL Instance"},"instance_prop":{"description":"<div>Set a property (e.g. <code>title</code> or <code>disabled</code>) value for each element of the JQL Instance element collection. Or, without <code>[value]</code> retrieve the value of [property] of the first (root) element from the JQL Instance collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul><li>Properties are validated (so, e.g. no <code>onclick</code> etc. - see example).</li>\n<li>See all information on properties and attributes @<a target=\"_blank\" href=\"https://javascript.info/dom-attributes-and-properties\">javascript.info</a></li></ul>\n\n<example>\nconst exElem = $(`<div data-id=\"tmpEx\"><b>Hello</b> <span>World</span>!</div>`, /*[root element]*/);\nexElem.prop(`title`, `now I have a title`);\nexElem.prop(`onclick`, `javascript:alert(\"hello!\")`);\n// hover the created element (below) to check the title property (before it disappears)\npopup.show( {content: `<code>exElem.prop(\"title\")</code> =&gt; ${exElem.prop(\"title\")}\n  <br><code>exElem.prop(\"onclick\")</code> =&gt; ${exElem.prop(\"onclick\")}`, closeAfter: 4} );\n</example>\n<button class=\"exRunBttn\" data-action=\"propEx\">Try it</button>","params":[{"property":"string (e.g. <code>title</code>"},{"value":"string | undefined."}],"returnValue":"string | JQL Instance"},"instance_attr":{"description":"<div><b>Get</b> (<code>keyOrObj</code> string, <code>[value]</code> empty) attribute for the root element of the JQL Instance  or <b>set</b> attributes for the first (root) element of the JQL Instance element collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div> <ul>\n<li>to set <code>data-attribute</code> or <code>style</code>, use <code>{[data/style]: {[key]: [value], ...}</code> (see example)</li> \n<li>To set multiple <code>class</code>-names, use a comma separated string of class names (e.g. <code>[instance].attr({class: `class1, class2 ... classn`})</code>)</li>\n<li>All attributes are validated (so, e.g. no <code>onclick</code> etc.)</li>\n<li>Setting an attribute value ([keyOrObj] returns the JQL instance.</li>\n<li>See all information on attributes and properties @<a target=\"_blank\" href=\"https://javascript.info/dom-attributes-and-properties\">javascript.info</a></li>\n</ul>\n<example>\nconst someDiv = $(`<div data-id=\"tmpEx\" class=\"initial\">Hi, let me get some attributes</div>`, /*[root element]*/);\nsomeDiv.attr( {\n  title: `Yes, I have a title now!`, \n  class: `volatile`, \n  data: {myTitle: `title as data`}, \n  onclick: alert(\"will not be set!\")} );\nconst [ myDataId, myTitle, myClass, myDataTitle, myOnclick ] =\n  [ someDiv.attr(`data-id`),  someDiv.attr(`title`), someDiv.attr(`class`),\n    someDiv.attr(`data-my-title`), someDiv.attr(`onclick`)];\npopup.show({ content: [\n  `someDiv.attr(\"data-id\"): ${myDataId}`,\n  `someDiv.attr(\"data-my-title\")</code>: ${myDataTitle}`,\n  `someDiv.attr(\"title\"): ${myTitle}`,\n  `someDiv.attr(\"class\"): ${myClass}`,\n  `someDiv.attr(`onclick`),  ].join(`<br>`) });\n</example>\n<button class=\"exRunBttn\" data-action=\"attrEx\">Try it</button>","params":[{"keyOrObj":"string | Object<string, string>"},{"value":"string | Object<string, string> | undefined"}],"returnValue":"string | JQL instance"},"instance_addClass":{"description":"<div>Add [classNames] to each element of the element collection of the JQL instance. <code>...classNames</code> Can be one or more strings.</div>\n\n<example>\n$.editCssRule(`#tmpEx.warnUser {color: red; font-weight: bold;}`);\n$.editCssRule(`.user:before {content: 'Hi user! '}`);\n$(`<div id=\"tmpEx\">This is not very useful</div>`, /*[root element]*/)\n  .addClass(`warnUser`, `user`);\n</example>\n<button class=\"exRunBttn\" data-action=\"addClassEx\">Try it</button>","params":[{"...classNames":"string[]"}],"returnValue":"Object&lt;key, Function>"},"instance_About":{"description":"<div>All methods applicable for an <i>instance</i> of JQL.</div>\n\n<div>An instance of JQL is anything created with the imported JQL constructor (here <code>$</code>).</div>\n\n<example>\n// in html use <script type=\"module\">...</script>\nimport $ from \"//kooiinc.github.io/JQL/Bundle/jql.min.js\"; // or any location you downloaded the JQL library to\n</example>\n\n<div>As said, JQL can be used to retrieve, create, modify or manipulate (collections of) HTML elements.</div>\n<div>The syntax <code>[imported JQL constructor](input[, root, position])</code>:</div>\n\n<ul>\n<li><code>input</code>: A (n Array of) HTML string(s), HTMLElement, JQL instance or a (valid) css selector</li>\n<li><code>root</code>: (HTMLElement | JQL Instance) The root element for the [input]. Default is <code>document.body</code>. When root is a JQL Instance, the first element of its collection is presumed to be the root.</li>\n<li>\n <code>position</code>: (string) For creation of elements: where the instance should end up (relative to the root). You can use:\n <uL>\n    <li><code>\"beforebegin\"</code>: (before [root], so [root] will be the first sibling of [input])</li>\n    <li><code>\"afterbegin\"</code>: (after the begin of [root], so [input] as first element of [root])</li>\n    <li><code>\"beforeend\"</code>:  (before the end of [root], so [input] as last element of [root]))</li>\n    <li><code>\"afterend\"</code>: (after [root], so [input] will be the first sibling of [root])</li>\n  </ul>\n</li>\n</ul>\n\n<div>Every JQL Instance has a three relevant static properties:</div>\n\n<uL>\n  <li><code>collection: Array&lt;HTMLelement></code>: an Array with the collection of elements contained in the instance\n    (so, <code>$(`.someClass`).collection</code> can contain 0 to n elements)</li>\n  <li><code>isVirtual: boolean</code>: true if the instance is virtual (i.e. not (yet) in the \n   <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">DOM</a>-tree)</li>\n  <li><code>isJQL: boolean</code>: true if the instance is a JQL instance (so <code>$.nodes(`.someClass`).isJQL</code> is false) - <div class=\"linkLike\" data- \n    action=\"jump2Nav\" data-jumpkey=\"static_nodes\">see [JQL].nodes</div></li>\n</ul>\n\n<div>Examples:</div>\n\n<ul>\n  <li><code>const exampleDiv = $(`&lt;div id=\"example\">Hello &lt;div class=\"example\">world&lt;/div>&lt;/div>`);</code></li>\n  <li><code>const exampleDiv = $(`&lt;div id=\"example\"> world&lt;/div>`, $.node(`.example:first-child`), \"afterbegin\");</code></li>\n  <li><code>const exampleDiv = $(`meta, style`, document.documentElement);</code></li>\n  <li><code>const exampleDiv = $([`&lt;div class=\"a\">A&lt;/div>`, `&lt;div class=\"B\">B&lt;/div>`]);</code></li>\n  <li><code>const exampleDivs = $(`.example`);</code></li>\n  <li><code>const exampleSubDivs = $(`#example`).find$(`.example`);</code></li>\n  <li>... etc</li>\n</ul>\n\n<div>Where a method's return value is <code>JQL Instance</code>, <a target=\"_blank\" href=\"https://www.geeksforgeeks.org/method-chaining-in-javascript/\"><i>method chaining</i></a> is possible.</div>\n\n<example>\n$.editCssRules(`#tmpEx {color: green;}`, `.helloworld {font-weight: bold;}`);\n$(`<div id=\"tmpEx\">Hello world.</div>`, /*[root element]*/)\n  .addClass(`helloworld`)\n  .append(`<span> And the rest of the universe!</span>`)\n  .text(` (will disappear shortly)`, true);\n</example>\n<button class=\"exRunBttn\" data-action=\"chainEx\">Try it</button>\n<div>In the following every instance method is documented.</div>"},"static_About":{"description":"<div>Static methods are methods you can call using the imported JQL module.</div>\n\n<div>For example, when imported as <code>$</code>, <code>$.editCssRule(...)</code> or <code>const popup = $.popup()</code>.</div>\n\n<div>JQL also knows one static property for use with element creation: <code>[imported JQL constructor]<b style=\"color:red\">.at</b></code> for mapping a created elements' position relative to its parent, in other words: the <code>position</code> parameter from the <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_About\">JQL constructor</div>.</div>\n\n<div>Its properties are ([input] is the element to add, [root] the element to add to):</div>\n\n<ul>\n  <li><code>BeforeBegin</code>: (before [root], so [root] will be the first sibling of [input])</li>\n  <li><code>AfterBegin</code>: (after the begin of [root], so [input] as first element of [root])</li>\n  <li><code>BeforeEnd</code>:  (before the end of [root], so [input] as last element of [root]))</li>\n  <li><code>AfterEnd</code>: (after [root], so [input] will be the first sibling of [root])</li>\n</ul>\n\n<div>So, instead of <code>$(`&lt;div id=\"example\"&gt;Hi world&lt;/div&gt;`, /*some root element*/, \"afterbegin\")</code>, you can use <code>$(`&lt;div id=\"example\"&gt;Hi world&lt;/div&gt;`, /*some root element*/, $.at.AfterBegin)</code></div>\n\n<example>\n$.editCssRule(`h2.hello, h3.hello {margin: 0.3rem 0}`);\nconst elemContainer = $.virtual(`<div>`).append($.virtual(`<h3 class=\"hello\">world</h3>`));\n$.virtual(`<h2 class=\"hello\">Hello</h2>`, elemContainer.single(`.hello`), $.at.BeforeBegin);\npopup.show({content: elemContainer, callback: () => $.removeCssRule(`h2.hello, h3.hello`)});\n</example>\n<button class=\"exRunBttn\" data-action=\"staticAtEx\">Try it</button>"},"instance_setData":{"description":"<div>Set data-attribute(s) for each element of the the JQL Instance element collection. The attributes must be key-value pairs.</div>\n\n<div><b>See also</b>: <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_data\">data</div>.</div>\n\n<example>\nconst someDiv = $(`<span>Hello world</span>`, /*[root element]*/);\n$.editCssRule(\"[data-goodbye]::after { content: '...'attr(data-goodbye); }\");\nsetTimeout( () => {\n  someDiv.setData({id: \"temporary\", goodbye: \"and bye again\"});\n  setTimeout(() => $(\"[data-id='temporary']\").remove(), 2500);\n}, 1500);\n</example>\n<button class=\"exRunBttn\" data-action=\"setDataEx\">Try it</button>","params":[{"keyValuePairs":"Object<string, string>"}],"returnValue":"JQL Instance"},"instance_show":{"description":"<div>Show each element of the element collection of the JQL instance.</div>\n\n<div class=\"note\"><b>Note</b>: this will reset the <code>display</code> css property. For more granular showing/hiding elements, use your own classes.</div>\n\n<example>\nconst cleanup = self => {\n  self[0].closest(`.divExClass`).remove();\n  $.removeCssRule(`.showHide`);\n  $.removeCssRule(`button#hide, button#show, button#cleanup`);\n};\n$.editCssRule(`.showHide { display: block; color: red; font-weight: bold; }`);\n$.editCssRule(`button#hide, button#show, button#cleanup { margin-right: 5px; }`);\nconst elem = $(`\n  <div class=\"divExClass\">\n    <span class=\"showHide\">Hello World!</span>\n  </div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"hide\">hide</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).hide() ) );\nelem.append($.virtual(`<button id=\"show\">show</button>`)\n  .on( `click`, evt => $(evt.target.closest(`.divExClass`).querySelector(`.showHide`)).show() ) );\nelem.append( $.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => cleanup(self) ) );\n</example>\n<button class=\"exRunBttn\" data-action=\"showHideEx\">Try it</button>","params":[],"returnValue":"JQL Instance"},"instance_single":{"description":"<div>When <code>indexOrSelector</code> has a value, retrieves the first matching element from a JQL Instance collection, or retrieves the first (root) element from the collection. The result will be a new JQL Instance (its collection may be empty).</div>\n\n<code>indexOrSelector</code> is CSS Selector:\n<example>\n$(`<div data-id=\"tmpEx\">\n     <div class=\"test\">Hello world (1)</div>\n     <div class=\"test\">Hello world (2)</div>\n   </div>`, /*[root element]*/);\npopup.show( {content:\n  `<code>$(\"[data-id='tmpEx']\").single(\".test\").outerHtml.replace(/&lt;/g, \"&amplt;\")</code><br>\n   ${$(\"[data-id='tmpEx']\").single(\".test\").outerHtml.replace(/&lt;/g, \"&amp;lt;\")}`,\n   callback: () => $(\"[data-id='tmpEx']\").remove()} );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx\">Try it</button>\n<code>indexOrSelector</code> is empty:\n<example>\n$(`<div data-id=\"tmpEx\">\n     <div class=\"test\">Hello world (1)</div>\n     <div class=\"test\">Hello world (2)</div>\n   </div>`, /*[root element]*/);\npopup.show( {content:\n  `<code>$(\"[data-id='tmpEx']\").single().outerHtml.replace(/&lt;/g, \"&amplt;\")</code><br>\n   ${$(\"[data-id='tmpEx']\").single().outerHtml.replace(/&lt;/g, \"&amp;lt;\")}`,\n   callback: () => $(\"[data-id='tmpEx']\").remove()} );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx2\">Try it</button>\n<code>indexOrSelector</code> is number:\n<div class=\"note\"><b>Note</b>: retrieve a single element by number is zero based.</div>\n\n<example>\n$(`<div data-id=\"tmpEx\">\n    <div class=\"test\">Hello world (1)</div>\n    <div class=\"test\">Hello world (2)</div>\n    <div class=\"test\">Hello world (3)</div>\n   </div>`,\n    /*[root element]*/);\npopup.show( {content:\n  `<code>$(\".test_\").single(1).outerHtml.replace(/&lt;/g, \"&amp;lt;\")</code><br>\n   ${$(\".test\").single(1).outerHtml.replace(/</g, \"&lt;\")}`, \n   callback: () => $(\"[data-id='tmpEx']\").remove()} );\n</example>\n<button class=\"exRunBttn\" data-action=\"singleEx3\">Try it</button>","params":[{"indexOrSelector":"string | number. An optional (valid) css selector."}],"returnValue":"JQL Instance"},"instance_style":{"description":"<div>Style each element of the of the JQL Instance element collection <i>inline</i>, so <code>&lt;div style=\"[the style from parameters]\"></code>. If <code>keyOrKvPairs</code> is a string and <code>value</code> is not empty, will set a single style value. Preferably use key-value pairs.</div>\n\n<div class=\"note\"><b>Note</b>: using <code>!important</code> will be honored, e.g. <code>{color: `green !important`}</code>.</div>\n\n<div>Equivalent to <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_Style\">[JQL instance].Style.inline</div></div>","params":[{"keyOrKvPairs":"Object&lt;string, string> | string"},{"value":"string | undefined"}],"returnValue":"JQL Instance"},"instance_toNodeList":{"description":"<div>Copy the JQL Instance element collection into a <code>NodeList</code>. It may be a way to duplicate a collection of nodes (see example).</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul><li>the list is not a live <code>NodeList</code>. In other words: the nodes are copies of the original (and <i>only exist in memory</i>)</li>\n<li>the eventual id of the copied nodes is removed (element id's must be unique). See also the <code>.duplicate</code> method</li></ul>\n\n<example>\n// create 2 nodes in the DOM tree and copy the elements as NodeList\nconst nodes = $([\n  `<div id=\"some\">Hello</div>`, \n  `<div id=\"thing\">World</div>` ]).toNodeList();\n\n// change the text and color of the nodes in the list\nfor (const node of nodes) { \n  node.textContent += `!`;\n  node.style.color = `red`;\n}\n\n// append the nodes (and colorize)\n$(/*[someElement to append to]*/).append(...nodes);\n\n/* \n  initial:\n  <div id=\"some\">Hello</div>\n  <div id=\"thing\">World</div>\n\n  new and appended to DOM:\n  <div style=\"color:red;\">Hello!</div>\n  <div style=\"color:red;\">World!</div>\n*/\n</example>\n<button class=\"exRunBttn\" data-action=\"toNodeListEx\">Try it</button>","params":[],"returnValue":"NodeList"},"instance_trigger":{"description":"<div>Trigger a handler for all elements of the the JQL Instance element collection.</div>\n\n<div class=\"note\"><b>Note</b>: bubbling is always true (<code>{bubbles: true}</code>), because event handling in this library uses <a target=\"_blank\" href=\"https://javascript.info/event-delegation\">event delegation</a>.</div>\n\n<div>See the example @<div data-action=\"jump2Nav\" data-jumpkey=\"static_delegate\" class=\"linkLike\">the delegate documentation</div></div>","params":[{"evtType":"string. An event identifier, e.g. <code>\"click\"</code>"},{"SpecifiedEvent":"Event. The event may be specified, e.g. <code>MouseEvent</code>. Defaults to generic <code>Event</code>"},{"options":"Object<string, any>. Event options. Default <code>{bubbles: true, cancelable: false, composed: false}</code>"}],"returnValue":"JQL Instance"},"instance_toggleClass":{"description":"<div>Toggle className (on/off) for each element of the JQL Instance element collection.</div>\n\n<example>\n$.editCssRule(`.redEx { color: red; }`);\n$.editCssRule(`button#toggleColor, button#cleanup { margin: 0 5px; }`);\nconst elem = $(`<div class=\"divExClass redEx\">Hello World!</div>`, /*[root element]*/);\nelem.append($.virtual(`<button id=\"toggleColor\">toggle</button>`)\n  .on( `click`, (_, self) => $(self[0].closest(`.divExClass`)).toggleClass(`redEx`)) );\nelem.append($.virtual(`<button id=\"cleanup\">remove</button>`)\n  .on( `click`, (_, self) => self[0].closest(`.divExClass`).remove()) );\n</example>\n<button class=\"exRunBttn\" data-action=\"toggleClassEx\">Try it</button>","params":[{"className":"string. The class name to toggle (eg <code>'hidden'</code>)"}],"returnValue":"JQL Instance"},"instance_val":{"description":"<div>Get or set the value of (the root element of) the JQL instance, where the first element is one of input, textarea or select HTMLElement. </div>\n\n<div>When <code>newValue</code> is empty, return the current value, otherwise the JQL Instance. When <code>newValue</code> is not a string, the new value will be an empty string.</div>\n\n<example>\nconst input = $(`<input data-id=\"tmpEx\" type=\"text\" value=\"hello world\">`, /*[root element]*/);\nconst valueResults = `<code>input.val()</code> => ${input.val()}\n  <br>Empty it: <code>input.val(\"\")</code> => ${ input.val(\"\").val() }\n  <br>New value: <code>input.val(\"hi there\")</code> => ${input.val(\"hi there\").val()}`;\npopup.show( {content: valueResults} );\n</example>\n<button class=\"exRunBttn\" data-action=\"valEx\">Try it</button>","params":[{"newValue":"string. The value to set."}],"returnValue":"string | JQL Instance"},"static_virtual":{"description":"<div>Create a HTML element, but don't add it to DOM (so, only in memory).</div>\n\n<example>\nconst inDOM = () => $.node(`.virtual`) ? `Yep` : `Nope`;\nconst thisChapter = evt.target.closest(`.description`);\nconst virtualElem = $.virtual(`<div class=\"virtual\" data-id=\"tmpEx\">Hello</div>`)\n  .append($.virtual(`<span> world!</span>`).style({color: `green`, fontWeight: `bold`}));\npopup.show( {\n  content: `virtual element created. In DOM tree? ${inDOM()}. We'll add it to this chapter soon`,\n  closeAfter: 2.5,\n  callback: () =>\n    virtualElem.toDOM(thisChapter).append($(`<div>in DOM tree? ${inDOM()}</div>`))\n    //           ∟ add to DOM tree here\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"virtualEx\">Try it</button>","params":[{"html":"string. A (valid) html string"},{"root":"Node. The parent of the element to create"},{"position":"The position relative to the parent of the element to create"}],"returnValue":"JQL Instance"},"static_text":{"description":"<div>Create a text or comment Node.</div>","params":[{"str":"string. The text content of the node "},{"isComment":"Boolean. Default false"}],"returnValue":"Text | Comment"},"static_popup":{"description":"<div>Use the built in popup Factory. See <div data-action=\"jump2Nav\" data-jumpgroup=\"popup\" class=\"linkLike\">the documentation</div>.</div>","params":[],"returnValue":"Object<string, Function>"},"popup_About":{"description":"<div>When initialized (e.g. <code>const myPopup = [JQL].popup()</code>), you can use the built in popup module. It contains 4 methods, documented in the following.</div>"},"popup_create":{"description":"<div>Create a popup. When <code>isModalOrCallback</code> is a boolean and true, the window can not be automatically closed, use <code>removeModal</code> for that.</div>\n\n<div>When <code>isModalOrCallback</code> is a function it will be called after the popup is closed. Other <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\"><i>truthy</i></a> values create a modal popup.</div>\n\n<div class=\"note\"><b>Note</b>: <code>[popup].create</code> is a legacy method. It is replaced with the more versatile (less convoluted) <div class=\"linkLike\" data-jumpkey=\"popup_show\" data-action=\"jump2Nav\">show</div> method.</div>\n\n<div>When <code>modalCallback</code> is a function, it will be called after a <i>modal</i> popup is closed.</div>\n\n<div>The examples demonstrate both a modal popup and a regular one.</div>\n\n<div class=\"template\">\n  <div data-popup2>\n    <p>\n      Hi. This box is <i>really</i> modal.\n      <br>There is no close icon and clicking outside this box does nothing.\n      <br>In other words: you can only close this using the button below.\n      <br>Try clicking anywhere outside the box ...\n    </p>\n  </div>\n  <div data-popup1>\n    <p data-popup1>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>\n</div>\n<example>\nconst { popup } = $;\npopup.create(`\n   <div>\n    <p>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>`);\n</example>\n<button class=\"exRunBttn\" data-action=\"popup\">Try it</button>\n<example>\nconst $$ = $.virtual;\nconst closeBttn = $$(`<button id=\"modalCloseTest\">Close me</button>`)\n    .on(`click`, () => popup.removeModal())\nconst okMessage = () => popup.createTimed(`Modal closed, you're ok, bye.`, 2);\nconst message = $$(`\n  <p>\n    Hi. This box is <i>really</i> modal.\n    <br>There is no close icon and clicking outside this box does nothing.\n    <br>In other words: you can only close this using the button below.\n    <br>Try clicking anywhere outside the box ...\n  </p>`).append($$(`<p/>`).append(closeBttn));\npopup.create(message, true, okMessage, \"There's only one escape here!\");\n</example>\n<button class=\"exRunBttn\" data-action=\"popupModal\">Try it</button>","params":[{"message":"JQL instance | HTML string | string"},{"isModalOrCallback":"Boolean | Function."},{"modalCallback":"Function. Optional function to call after closing a modal popup."},{"modalWarning":"Optional warning text when a user tries to close a modal popup without the preferred action."}],"returnValue":"Nothing"},"popup_createTimed":{"description":"<div>Create a (non modal) popup, that closes itself after <code>closeAfter</code> seconds.</div>\n\n<div class=\"template\">\n  <div data-popup3>\n    <p>Hi, this is a popup! I'll be active for 5 seconds (as long as you don't close me first).</p>\n  </div>\n</div>\n<example>\nconst { popup } = $;\npopup.createTimed(`<p>Hi, this is a popup! I'll be active for 5 seconds (as long as you don't close me first).</p>`, 5);\n</example>\n<button class=\"exRunBttn\" data-action=\"popupTimed\">Try it</button>","params":[{"message":"string. A text or (valid) HTML string."},{"closeAfter":"Number. The number of seconds after the popup closes itself. Default 2."},{"callback":"Function. Optional function to call after closing the popup."}],"returnValue":"Nothing"},"popup_removeModal":{"description":"<div>Remove a modal popup. See the second example @<div class=\"linkLike\" data-jumpkey=\"popup_show\" data-action=\"jump2Nav\">show</div>.</div>","params":[],"returnValue":"Nothing"},"static_log":{"description":"<div>Equivalent to <div class=\"linkLike\" data-jumpkey=\"debuglog_log\" data-action=\"jump2Nav\">log</div> in <div class=\"linkLike\" data-jumpgroup=\"debuglog\" data-action=\"jump2Nav\">debugLog</div>, but for intermediate logging to console (so <code>debugLog</code> doesn't have to be set to 'on').</div>\n\n<div>While loading this document this logging was called several times. See the console for that.</div>","params":[{"...args":"string[]"}],"returnValue":"JQL.debugLog"},"static_nodes":{"description":"<div>Retrieve or more DOM Nodes from [root]. The equivalent of <code>Array.from([root].querySelectorAll([css selector]))</code>. </div>\n\n<div class=\"note\"><b>Note</b>: returns a real <code>Array</code> (not a <code>NodeList</code>), so all <code>Array</code> methods work on the result.</div>\n\n<div>For example: <code>$.nodes(`.allGreen`).map(elem => elem.textContent += ` I'm green!`);</code>.</div>","params":[{"selector":"string. A (valid) css selector"},{"root":"Node. Default <code>document html element</code>"}],"returnValue":"Array&lt;Node>"},"static_node":{"description":"<div>Retrieve a DOM Node from [root]. The equivalent of <code>[root].querySelector([css selector])</code>. For example: <code>const firstGreen = $.node(`.allGreen`);</code>.</div>\n\n","params":[{"selector":"string. A (valid) css selector"},{"root":"Node. Default <code>document html element</code>"}],"returnValue":"Node"},"static_createStyle":{"description":"<div>Factory function that creates (or retrieves) a stylesheet with the given <code>id</code> in the head of the document and returns a function to create/modify style rules in that stylesheet.</div>\n\n<div>See also <div data-action=\"jump2Nav\" data-jumpkey=\"static_setStyle\" class=\"linkLike\">the setStyle documentation</div>.</div>\n\n<example>\nconst setMyStyling = $.createStyle(`mystyle`);\nsetMyStyling(`body {margin: 2rem; font: normal 12px/15px verdana, arial;}`);\n</example>\n\n","params":[{"id":"string"}],"returnValue":"Function."},"instance_prependTo":{"description":"<div>Injects the current JQL Instance at the start of <code>prependTo</code>. </div>\n\n<div>If <code>prependTo</code> is a HTML string, it is converted to a JQL Instance and thus validated.</div>\n\n<div>The syntax equals <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_appendTo\">appendTo</div>.</div>\n\n\n","params":[{"prependTo":"string | JQL Instance"}],"returnValue":"JQL Instance"},"debuglog_About":{"description":"<div>To use extensive logging for debugging (or just follow the application flow) you can use a special object named <code>debugLog</code>. <code>debugLog</code> is a static property of the JQL module. Where a method returns <code>debugLog</code> (so itself) the result is <i>chainable</i>.</div>\n\n<div>Logging by default is to the browser console, but you can also log to a specially created element within your document.</div>\n\n<div>By default debug logging is not active.</div>\n\n<div>See it in action in <a class=\"linkLike\" target=\"_blank\" href=\"https://kooi.dev/JQLDemo/\">the JQL demo</a>.</div>\n\n<div class=\"note\"><b>Note</b>: errors when creating elements are always logged to the browser console.</div>\n\n<example>\n// JQL imported as $\nconst { debugLog } = $;\nif (!debugLog.isOn()) {\n  debugLog\n   .on()\n   .toConsole // See the following\n   .off()\n   .log(`We started logging to div#logBox, enjoy ...`);\n}\n</example>\n\n<div>There are two extra <i>properties</i> in <code>debugLog</code> to note:</div>\n\n<ul>\n<li><code>toConsole</code> can be used to enable or disable logging to the browser console. \nUse <code>toConsole.on()</code> to enable, <code>toConsole.off()</code> to disable logging to the console.</code>.\nBy default logging to the console is enabled. If logging is not active, using <code>toConsole.on/off</code> will\nset the state for later usage.\n</li>\n<li><code>reversed</code>. By default logging (to screen) is from latest entry to the oldest. \nTo log from first entry to the last you can use <code>debugLog.reversed.on()</code>, and vice versa use <code>debugLog.reversed.off()</code>.\nAs with <code>toConsole</code> this is only useful if debug logging is active, and only if logging to console is <i>off</i>.</li>\n</ul>"},"debuglog_isOn":{"description":"<div>Check if debug logging state is active.</div>","params":[],"returnValue":"Boolean"},"debuglog_isVisible":{"description":"<div>When logging to screen is active, check if the special logging box is visible.</div>","params":[],"returnValue":"Boolean"},"debuglog_on":{"description":"<div>Activate debug logging. By default logs all to the browser console.</div>\n\n<div>Use <code>[JQL].debugLog.on().toConsole.off()</code> to activate logging to screen.</div>","params":[],"returnValue":"debugLog"},"debuglog_off":{"description":"<div>Deactivate debug logging.</div>","params":[],"returnValue":"debugLog"},"debuglog_remove":{"description":"<div>Removes and deactivates all logging. If applicable removes the log box from the DOM.</div>\n\n<div class=\"note\"><b>Note</b>: reactivate debug logging with <code>[JQL].debugLog.on()</code>.</div>","params":[],"returnValue":"debugLog"},"debuglog_log":{"description":"<div>Log one or more strings, either to the console or the DOM logging element. <code>debugLog</code> Must be on (so <code>debugLog.isOn === true</code>). </div>\n\n<div class=\"note\"><b>Note</b> For custom log messages to the console (independent of <code>debugLog.isOn</code>) you can use the <div class=\"linkLike\" data-jumpkey=\"static_log\" data-action=\"jump2Nav\">static [JQL].log method</div>.</div>","params":[{"...args":"string[]"}],"returnValue":"debugLog"},"debuglog_hide":{"description":"<div>Hide the DOM log box, if applicable (not logging to console).</div>","params":[],"returnValue":"debugLog"},"debuglog_show":{"description":"<div>Show the DOM log box, if applicable (not logging to console).</div>","params":[],"returnValue":"debugLog"},"debuglog_clear":{"description":"<div>Remove all strings logged until now from DOM log box or browser console.</div>","params":[],"returnValue":"debugLog"},"static_setStyle":{"description":"<div>Alias <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_editCssRule\">editCssRule</div>. The method is kept for backward compatibility.</div>\n","params":[{"ruleOrSelector":""},{"ruleObject":""}],"returnValue":"Nothing"},"static_removeCssRule":{"description":"<div>Remove one or several css rule(s) (e.g. <code>.someclass:after</code>) from the custom JQL stylesheet (<code>&lt;style id=\"JQLStylesheet\"></code>).</div>\n\n<example>\nconst yn = item => item === undefined ? `Yep` : `Nope`;\nconst div1 = $.virtual(`<div id=\"div1\">I am div#div1</div>`);\nconst div2 = $.virtual(`<div id=\"div2\">I am div#div2</div>`);\n$.editCssRules(\n  `#div1 {margin: 0.3rem; color: green; background-color: #EEE; }`,\n  `#div2 {margin: 0.3rem; color: red; background-color: #EEE; }` );\npopup.show( {\n  content: $.virtual(`<div>`).append(div1, div2),\n  callback: () => {\n    $.removeCssRule(`#div1`, `#div2`);\n    const rulesExist = [...$.node(`#JQLStylesheet`, document.documentElement).sheet.cssRules]\n      .filter(r => r.cssText.startsWith(`#div1`) || r.cssText.startsWith(`#div1`))\n   popup.show( {\n     content: `Rules removed, so we expect <code>rulesExist?.cssText</code> to be undefined. Is that so? ${yn(rulesExist?.cssText)}`,\n     closeAfter: 5,\n   }); \n} );\n</example>\n<button class=\"exRunBttn\" data-action=\"removeCssRulesEx\">Try it</button>","params":[{"...rules":"string[]. One ore more css selectors"}],"returnValue":"Nothing"},"static_editCssRule":{"description":"<div>Formerly known as <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_setStyle\">setStyle</div>.</div>\n\n<div>On importing, JQL creates a custom stylesheet in the header (<code>&lt;style id=\"JQLStylesheet\"></code>. Within this stylesheet you can create, remove and/or modify style rules using <code>[jql].editCssRule</code></div>\n\n<div>You can use either real style rule string, or a selector and an Object defining the properties of that selector.</div>\n\n<div>When a rule is valid and doesn't exist, it will be created. Existing rules are modified with the given parameters.</div>\n\n<div>You can remove rule properties (e.g. <code>color</code>) or complete rules.</div>\n\n<ul>\n<li>To remove one or more <i>rule properties</i>, use (for example) <code>$.editCssRule(`#someDiv`, {removeProperties: {color: 1, border: 1}})</code></li>\n<li>To completely remove a css rule, use (for example) <code>$.editCssRule(`#someDiv`, {removeRule: 1})</code> <i>OR</i> use  <div class=\"linkLike\" div data-action=\"jump2Nav\" data-jumpkey=\"static_removeCssRule\">removeCssRule</div></li></ul>\n\n<example>\n// a rule string\n$.editCssRule(`#div1 {margin: 0.3rem; color: green; background-color: #EEE; }`);\n// an object\n$.editCssRule(`#div2`, {margin: \"0.3rem\", color: \"red\", backgroundColor: \"#EEE\"});\n// -----------------------------------------------------^ Note: camelcased\nconst div1 = $.virtual(`<div id=\"div1\">I am div#div1</div>`, /*[root element]*/);\nconst div2 = $.virtual(`<div id=\"div2\">I am div#div2</div>`, /*[root element]*/);\npopup.show( {\n  content: $.virtual(`<div>`).append(div1, div2),\n  callback: () => $.removeCssRule(`#div1`, `#div2`) } );\n</example>\n<button class=\"exRunBttn\" data-action=\"editCssRuleEx\">Try it</button>","params":[{"ruleOrSelector":"string. A css selector (e.g. <code>div[data-form]</code>) or a css rule (e.g. <code>.redBold {color: red; font-weight: bold;}</code>)"},{"ruleObject":"Object&lt;string, string> pptional. When [ruleOrSelector] is a css selector, an object with rule properties."}],"returnValue":"Nothing"},"static_allowTag":{"description":"<div>The creation of some html-tags are prohibited/not enabled by default (like <code>&lt;frameset></code>, or <code>&lt;script></code>). You can allow the creation of such tags using this static method.</div>\n\n<div class=\"note\"><b style=\"color:red\">Note</b>: using <code>allowTag</code> may introduce security problems. Handle with care!</div>","params":[{"tag2Allow":"string. The html tag to allow (e.g. <code>media</code>)"}],"returnValue":"Nothing"},"static_prohibitTag":{"description":"<div>The creation of most html-tags is allowed by default. You can prohibit the creation of a tag using this the <code>prohibitTag</code> method, e.g. <code>$.prohibitTag(`dialog`)</code>.</div>","params":[{"tag2Prohibit":"string. The html tag to prohibit (e.g. <code>details</code>)"}],"returnValue":"Nothing"},"instance_length":{"description":"<div>The number of elements within the JQL instance element collection.</div>\n\n<example>\n$(`<p>There are <b>${$(`h3`).length}</b> &lt;h3>-elements within this document</p>`, /*[root element]*/);\n</example>\n<button class=\"exRunBttn\" data-action=\"lenEx\">Try it</button>","params":[],"returnValue":"Number"},"popup_show":{"description":"<div>Create and display a popup 'window'. There is one parameter, which is an Object with the following properties.</div>\n\n<ul><li><code>content</code>: (JQL instance | HTML string | string) the message to show;</li>\n<li>[<code>modal</code>]: (Boolean) <code>true</code> makes the popup modal;</li>\n<li>[<code>closeAfter</code>]: (Number) the number of seconds after which the popup closes itself (ignored when <code>modal</code>);</li>\n<li>[<code>callback</code>]: (Function) a function that will be executed after closing the popup;</li>\n<li>[<code>warnMessage</code>]: (JQL instance | HTML string | string) a warning shown when the user clicks outside a modal popup (which normally closes a popup).</li></ul>\n\n<div>The only property that should have a value is <code>content</code>.</div>\n\n<div>The examples demonstrate a regular and modal popup.</div>\n\n<div class=\"template\">\n  <div data-popup2>\n    <p>\n      Hi. This box is <i>really</i> modal.\n      <br>There is no close icon and clicking outside this box does nothing.\n      <br>In other words: you can only close this using the button below.\n      <br>Try clicking anywhere outside the box ...\n    </p>\n  </div>\n  <div data-popup1>\n    <p data-popup1>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>\n</div>\n\n<example>\nconst { popup } = $;\npopup.show({\n  content: `\n   <div>\n    <p>Here's a popup message for you.</p>\n    <p>Close it by clicking the checkmark icon or anywhere outside the box</p>\n  </div>` } );\n</example>\n<button class=\"exRunBttn\" data-action=\"popupShow\">Try it</button>\n<example>\nconst $$ = $.virtual;\nconst closeBttn = $$(`<button id=\"modalCloseTest\">Close me</button>`)\n    .on(`click`, () => popup.removeModal())\nconst sayOK = () => popup.show( { content: `Modal closed, you're ok, bye.`, closeAfter: 2 } );\nconst message = $$(`\n  <p>\n    Hi. This box is <i>really</i> modal.\n    <br>There is no close icon and clicking outside this box does nothing.\n    <br>In other words: you can only close this using the button below.\n    <br>Try clicking anywhere outside the box ...\n  </p>`).append($$(`<p>`).append(closeBttn));\npopup.show( {\n  content: message, \n  modal: true, \n  callback: sayOK, \n  warnMessage: `\"In other words: &lt;i>you can only close this using the &lt;b>button&lt;/b> ...&lt;/i>\"` } );\n</example>\n<button class=\"exRunBttn\" data-action=\"modalPopupShowDemo\">Try it</button>","params":[{"show_isObject":"<code>{ content[, modal, closeAfter, callback, warnMessage]  }</code>"}],"returnValue":"Nothing"},"instance_data":{"description":"<div>Delivers a utility Object to manipulate data-attributes of the first element of the JQL instance collection.</div>\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul>\n<li><code>[JQL instance].data</code> is a <i>static property</i>;</li>\n<li><code>[JQL instance].data</code>'s methods are applied to the first element of the JQL instance collection;</li>\n<li>The handling of casing for data-attributes is a bit weird and poorly documented imho. \nIn html and css a data-attribute like <code>helloWorld</code> will show up as <code>hello-world</code>, for setting of/retrieval from the <code>dataset</code> it should be <code>helloWorld</code>. The methods of <code>[JQL instance].data</code> mitigate this (in other words: you can always use either <i>camelCased</i> or <i>dashed notation</i> data-attributes here). The example should demonstrate this;</li>\n<li>The methods <code>.add</code> and <code>.remove</code> return the JQL instance (so, you can chain from them).\n</ul>\n\n<div>The available methods:</div>\n\n<ul>\n  <li><code>all</code>: Retrieves all data-attribute values (e.g. <code>[JQL instance].data.all.someattribute</code>);</li>\n  <li><code>get(key: string[, whenUndefined: any])</code> Retrieves the value of data-attribute with [key] (e.g. <code>[JQL instance].data.get(\"someattribute\")</code>. \n   <code>whenUndefined</code> (optional) will be returned when the data-attribute does not exist);</li>\n  <li><code>add({key1: value1, ..., keyn: valuen})</code> Sets one or more attribute values (e.g. <code>[JQL instance].data.set({someattribute: \"1\"})</code>);</li>\n  <li><code>remove(key: string)</code> Removes the data-attribute with [key] (e.g. <code>[JQL instance].data.remove(\"someattribute\")</code>).</li>\n</ul>\n\n<div><b>See also</b>\n<div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_getData\">getData</div> and\n  <div class=\"linkLike\" data-action=\"jump2Nav\" data-jumpkey=\"instance_setData\">setData</div>.</div>\n\n<example>\nconst helloWrld = $(`<div>Hello World again</div>`);\n$.editCssRule(`[data-is-universe]:after {content: ' ... and the universe!'; color: red;}`);\nhelloWrld.data.add({isUniverse: true, something: \"else\", \"dashed-prop-given\": 1});\npopup.show( {\n  content: `<code>helloWrld.data.all</code> =&gt; ${JSON.stringify(helloWrld.data.all)}\n            <br><code>helloWrld.data.get(\"something\")</code> =&gt; ${helloWrld.data.get(`something`)}\n            <br><code>helloWrld.data.all.isUniverse</code> =&gt; ${helloWrld.data.all.isUniverse}\n            <br><code>helloWrld.data.all[\"is-universe]</code> =&gt; ${helloWrld.data.all[\"is-universe\"]}\n            <br><code>helloWrld.data.get(\"is-universe\")</code> =&gt; ${helloWrld.data.get(`is-universe`)}\n            <br><code>helloWrld.data.get(\"isUniverse\")</code> =&gt; ${helloWrld.data.get(`isUniverse`)}\n            <br><code>helloWrld.data.get(\"dashed-prop-given\")</code> =&gt; ${helloWrld.data.get(`dashed-prop-given`)}\n            <br><code>helloWrld.data.all.nonexisting</code> =&gt; ${helloWrld.data.all.nonexisting}\n            <br><code>helloWrld.data.get(\"nonexisting\", \"no sir, I'm not here\")</code> =&gt; ${\n              helloWrld.data.get(\"nonexisting\", \"no sir, I'm not here\")}`,\n  callback: () => helloWrld.data.remove(\"isUniverse\"), // note: may also be .remove(\"is-universe\")\n} );\n</example>\n<button class=\"exRunBttn\" data-action=\"dataEx\">Try it</button>","params":[],"returnValue":"Object&lt;string, Function>"},"instance_HTML":{"description":"<div>Returns a utility object for retrieving inner-/outerHTML, replacing, inserting or appending html of the first element of the JQL instance element.</div>\n\n<div>The available methods:</div>\n<ul>\n<li><code>get([outer:boolean, escaped:boolean])</code> Retrieves the html. If [outer] is true, it will be the outerHTML, otherwise innerHTML. When [escaped] is true, the html will be escaped, meaning that you can display the html within another html element.</li>\n<li><code>replace(html:string|JQL Instance)</code> Replace the innerHTML with [string]</li>\n<li><code>append(html:string|JQL Instance)</code> Appends [string] to innerHTML</li>\n<li><code>insert(html:string|JQL Instance)</code> Inserts [string] to innerHTML</li>\n</ul>`\n\n<div class=\"note\"><b>Notes</b>:</div>\n<ul>\n<li><code>replace</code>, <code>append</code> and <code>insert</code> return the JQL instance.</li>\n<li>When the [html] parameter is a JQL Instance, the outer HTML of the first element of its collection will be used.</li>\n</ul>\n\n<example>\nconst emptyEl = $.virtual(`<div>'nough said</div>`);\nconst html = emptyEl.HTML;\nconst emptyElOuterHtml1 = `created emptyEl: ${html.get(true, true)}`;\nhtml.replace(`HELLO`);\nconst emptyElOuterHtml2 = `replace: ${html.get(true, true)}`;\nhtml.append($(`<span> WORLD</span>`));\nconst emptyElOuterHtml3 = `append: ${html.get(true, true)}`;\nconst emptyElOuterHtml4 = `insert: ${html.insert($(`<b>the obligatory ...</b> `)).HTML.get(true, true)}`;\n// aggregate\nconst report = $.virtual(`<div>${emptyElOuterHtml1}<br>${emptyElOuterHtml2}<br>${\n  emptyElOuterHtml3}<br>${emptyElOuterHtml4}<br>So, there we have it:</div>`).append(emptyEl);\npopup.show({ content: report } );\n</example>\n<button class=\"exRunBttn\" data-action=\"htmlObjEx\">Try it</button>\n\n","params":[],"returnValue":"Object&lt;string, Function>"},"static_editCssRules":{"description":"<div>Add one or more css rules (e.g. <code>.redBold {color: red; font-weight: bold;}</code>) to <code>&lt;style id=\"JQLStylesheet\"></code>.</div>\n\n<example>\nconst div1 = $.virtual(`<div id=\"div1\">I am div#div1</div>`);\nconst div2 = $.virtual(`<div id=\"div2\">I am div#div2</div>`);\n$.editCssRules(\n  `#div1 {margin: 0.3rem; color: green; background-color: #EEE; }`,\n  `#div2 {margin: 0.3rem; color: red; background-color: #EEE; }` );\npopup.show( {\n  content: $.virtual(`<div>`).append(div1, div2),\n  callback: () => $.removeCssRule(`#div1`, `#div2`) } );\n</example>\n<button class=\"exRunBttn\" data-action=\"editCssRulesEx\">Try it</button>","params":[{"...rules":"string[]. One or more complete css rules"}],"returnValue":"Nothing"},"instance_Style":{"description":"<div>Delivers a utility object to manipulate styling of a JQL instance (element collection) or retrieve computed style value(s) from the first element of the element collection.</div>\n\n<div>The available methods:</div>\n<ul>\n<li><code>inline(rules:Object&lt;string, string>)</code> set the styling of all elements of the JQL instance collection using the style attribute (<code>style=\"...\"</code>)</li>\n<li><code>inSheet(rules::Object&lt;string, string>)</code> set the styling of all elements of the JQL instance collection using the JQL custom stylesheet. When rules contains a <code>className</code> property, the className and the rules values will be added to the styleSheet, otherwise a intermediate className will be created for the given rules (see the example)</li>\n<li><code>byRule({classes2Apply: Array&lt;string>, rules: Array&lt;string>})</code> Add one or more rules to the JQL custom stylesheet and (optionally) apply one or more classes to the concerning JQL Instance. See second example.</li>\n<li><code>computed</code> (getter) Retrieves the complete computedStyle of the first element of the JQL instance collection.</li>\n<li><code>valueOf(key:string)</code> Retrieve the computed value of a style property (see example)</li>\n</ul>\n<div class=\"note\"><b>Notes</b>:</div>\n\n<ul><li><code>inline</code>, <code>inSheet</code> and <code>byRule</code> return the JQL instance.</li>\n<li>For the [key] value of <code>valueOf</code> you can either supply camel cased or dashed notation (e.g. \"borderLeft\" vs \"border-left\")</li></ul>\n\n<example>\n// inline\nconst hello1 = $.virtual(`<p data-id=\"tmpEx\"></p>`).Style\n  .inline({ paddingLeft: `4px`, color: `white`, backgroundColor: `#000` });\nconst hello1Html = `HTML of hello1: ${hello1.HTML.get(true, true)}`;\nhello1.append(`<div>${hello1Html}</div>`);\n\n// inSheet with given className\nconst hello2 = $.virtual(`<p data-id=\"tmpEx\" class=\"leftRedBorder\"></p>`).Style\n  .inSheet({className: `leftRedBorder`, paddingLeft: `4px`, color: `green`, borderLeft: `12px solid red`});\nconst hello2Html = `HTML of hello2: ${hello2.HTML.get(true, true)}`;\nhello2.append(`<div>${hello2Html}</div>`);\n\n// inSheet, className generated\nconst hello3 = $.virtual(`<p data-id=\"tmpEx\"></p>`).Style\n  .inSheet({paddingLeft: `4px`, color: `green`, borderLeft: `12px solid green`});\nconst hello3Html = `HTML of hello3: ${hello3.HTML.get(true, true)}`;\nhello3.append(`<div>${hello3Html}</div>`);\nconst hello3GeneratedClassName = [...hello3[0]?.classList]?.shift();\n\n// computed (note: randomNr is a utility function)\nconst computedHello3 = $(`<div>`)\n  .html(`<code>hello3.Style.valueOf(\"borderLeftColor\")</code>: ${\n    hello3.toDOM().Style.valueOf(`borderLeftColor`)}.<br>&nbsp;<b>⤷</b> Equivalent\n    <code>hello3.Style.computed.borderLeftColor</code>: ${\n      hello3.Style.computed.borderLeftColor}`);\nconst computed = hello3.Style.computed;\nconst sliceStart = randomNr(computed.length, 10) - 10;\nconst hello3Computed = `<div><br><code>hello3.Style.computed</code> \n  (10 of ${computed.length} rules, random sample)<ul>${\n  [...computed]\n  .slice( sliceStart, sliceStart + 10)\n  .map( (v) => `<li>${v}: ${computed[v]}</li>`)\n  .join(``) }</ul></div>`.replace(/\\n+\\s{2,}/g, ` `);\n\npopup.show({\n  content: $(`<div>`).append(hello1, hello2, hello3, computedHello3, hello3Computed,),\n  callback: () => $.removeCssRule(`.${hello3GeneratedClassName}`, `.leftRedBorder`) } );\n</example>\n<button class=\"exRunBttn\" data-action=\"styleObjInStyleEx\">Try it</button>\n\n<example>\nconst helloElem = $.virtual(`<div>Hello <span>World</span></div>`);\nhelloElem.Style.byRule( {\n  classes2Apply: [`test1`],\n  // Notes: \n  // - the style rules are exactly what you would put in a css-file/style element\n  // - you can add many rules here. Only [classes2Apply] will be relevant for the element at hand (here [helloElem])\n  rules: [ \n    `.test1 { backgroundColor: #EEE; color: green }`,\n    `.test2 { color: red; }`,\n    `#test3 { color: blue; }`,] } );\nhelloElem.find$(`span`)?.addClass(`test2`);\npopup.show({\n  content: $(`<div>This resulted in:</div>`).attr({id: `test3`}).append(helloElem),\n  callback: () => $.removeCssRule(`.test1`, `.test2`, `#test3`) });\n</example>\n<button class=\"exRunBttn\" data-action=\"styleRulingsEx\">Try it</button>","params":[],"returnValue":"Nothing"},"static_fn":{"description":"<div>Add custom method to JQL instances. </div>\n\n<div>The first argument of function [fn] is the JQL instance. Calling the added method, you only need [...arguments]. See both examples for usage.</div>\n\n<example>\n// we use the instance itself to set the title property\n$.fn(`addTitle`, (me, ttl) => ttl ? me.prop(`title`, ttl) : me);\nconst someDiv = $.virtual(`<div data-id=\"tmpEx\">Hello world</div>`);\npopup.show( {\n  content: someDiv\n            .addTitle(\"hi there!\")\n            .append(`<div>My title is now \"${someDiv.prop(`title`)}\". Hover me!</div>`),\n  callback: someDiv.remove,\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"fnEx\">Try it</button>\n\n<example>\n// we use the first element of the instance to colorize. Return [me] to not break the chain.\n$.fn( `colorRed`, me => { me[0].style.color = \"red\"; return me; } );\nconst someDiv = $.virtual(`<div data-id=\"tmpEx\">Hello world</div>`);\npopup.show( {\n  content: someDiv.append($(`<div>There we have it</div>`).colorRed()),\n  callback: someDiv.remove,\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"fnEx2\">Try it</button>","params":[{"name":"string. The method name"},{"fn":"Function(self: JQL instance, [...arguments])"}],"returnValue":"Nothing"},"instance_closest":{"description":"<div>Return the parent element/node with css selector the closest (upwards) to the first element of the JQL instance collection. Equals <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\">Element.closest</a>. The element returned is either new JQL instance (when something was found) or the original JQL instance (nothing found).</div>\n\n<example>\nconst someDiv = $(`<div><b style=\"color:red\">Hello world again</b></div>`, evt.target.closest(`.description`));\npopup.show( {\n  content: `<code>someDiv.closest(\".description\").HTML.get(1, 1)</code><br>${\n    someDiv.closest(\".description\").HTML.get(1,1).slice(0, 100)}&hellip;`,\n});\n</example>\n<button class=\"exRunBttn\" data-action=\"closestEx\">Try it</button>","params":[{"selector":"string. A css selector"}],"returnValue":"JQL instance"}}